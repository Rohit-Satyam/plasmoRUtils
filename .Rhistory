format="gff",
genome=tools::file_path_sans_ext(basename(gff)) %>%
stringr::str_split(., pattern = "_",n = 3,simplify = TRUE) %>%
.[,2]) %>%
.[.$type == "protein_coding_gene", ]
gene_2_GO <- readr::read_tsv(gaf, comment = "!", col_names = FALSE,trim_ws = TRUE, progress = FALSE)
colnames(gene_2_GO) <- paste0("col",seq_len(ncol(gene_2_GO)))
## Subset the gff_data
#gff_data <- gff_data[gff_data$ID %in% unique(gene_2_GO$X2),]
go_mappings <- data.frame(
GID = gene_2_GO$col2,    # Gene ID
GO = gene_2_GO$col5,          # GO Term
EVIDENCE = gene_2_GO$col7,
stringsAsFactors = FALSE
)
gene_info <- data.frame(
GID = gff_data$ID,            # Gene ID from GFF
SYMBOL = gff_data$Name,       # Gene symbol
CHR = as.character(GenomeInfoDb::seqnames(gff_data)),           # Chromosome
START = BiocGenerics::start(gff_data),            # Start position
END = BiocGenerics::end(gff_data),                # End position
STRAND = as.character(BiocGenerics::strand(gff_data)),
stringsAsFactors = FALSE
)
## Since some gene Symbols are absent so substitute with the GIds
gene_info[is.na(gene_info[,2]),]$SYMBOL <- gene_info[is.na(gene_info[,2]),]$GID
library(AnnotationForge)
orgpath <- paste0(out.dir,"/","org.",substr(genus, 1, 1),sp,".eg.db")
if (file.exists(orgpath)) {
message(orgpath, " already exists, deleting it.")
ret <- unlink(orgpath, recursive = TRUE)
}
makeOrgPackage(chromosome=unique(gene_info),
go=unique(go_mappings),
version=as.character(version),
maintainer= maintainer,
author=maintainer,
outputDir = out.dir,
tax_id=as.character(taxid),
genus=genus,
species=sp,
goTable="go",verbose = verbose)
system(paste0("tar -czvf ", paste0(basename(orgpath),".",as.character(version),".tar.gz "),orgpath))
system(paste("rm -rf ",orgpath))
}
makeOrgdb()
BiocManager::install("AnnotationForge")
install.packages(c("bio3d", "bit", "bitops", "curl", "xfun"))
1851+1700+1757+1579+1706+1752
1357*1357
2927*2927
if (!require("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos='http://cran.us.r-project.org',dependencies = TRUE)
## Install Biocmanager packages
if (!suppressMessages(require("Biostrings", quietly = TRUE,warn.conflicts = FALSE))) BiocManager::install(c('Biostrings',"S4Vectors","ggtree"))
## Install CRAN packages
packages <- c('dplyr',"BiocManager",'stringr','pacman','tidyr','ggplot2','R3port','ggpubr','plotly','data.table','argparse','ggsci','htmlwidgets','egg',
'remotes','ggplot2',"ggvenn","ggVennDiagram","grafify","esquisse","ggeasy","shinythemes","devtools")
install.packages(setdiff(packages, rownames(installed.packages())), repos='http://cran.us.r-project.org',dependencies = TRUE)
devtools::install_github("majkamichal/easyPlot")
library(easyPlot)
detach("package:easyPlot", unload = TRUE)
devtools::install_github("gertstulp/ggplotgui")
remotes::install_github("giocomai/ganttrify")
install.packages(c("bayestestR", "bookdown", "chron", "classInt", "curl", "datawizard", "fastDummies", "fastmatch", "fitdistrplus", "ggbreak", "httr2", "igraph", "insight", "janitor", "lava", "lme4", "matrixStats", "mlbench", "mvtnorm", "ollamar", "parameters", "performance", "pkgbuild", "processx", "raster", "Rcpp", "rgl", "rlang", "Seurat", "spatstat.explore", "spatstat.geom", "spatstat.utils", "statnet.common", "stringdist", "systemfonts", "terra", "testthat", "textshaping", "tmaptools", "XML", "yulab.utils"))
remotes::install_github("giocomai/ganttrify")
remotes::install_github("feddelegrand7/ddplot")
devtools::install_github("alastairrushworth/inspectdf")
remotes::install_gitlab("hrbrmstr/hrbrthemes")
BiocManager::install("ideal")
install.packages("spam")
install.packages("learnr")
601+353+14+29+1
12*20599/100
20599/3
12*6866.333/100
6866.333+823.96
20599+2471.88
7690.293*3
20599/3
12*6900/100
install.packages("reactable")
install.packages("reactable")
install.packages("htmltools")
install.packages("htmltools")
data <- tribble(
~Gene,             ~Disruptable,     ~Ase,  ~Gam,  ~Ook,  ~Ooc,  ~Spo,  ~Liv,
"PF3D7_0817900",   "DP;O_DP",        "ND;At", "O_ND", "At", "At;At", "O_ND", "O_ND",
"PF3D7_1139300",   "DP;O_DR",        "At", "At", NA, NA, NA, NA,
"PF3D7_1429200",   "DP;O_DP",        "O_ND", "O_ND", "O_At", "O_At", "O_At", NA
)
data <- tibble(
~Gene,             ~Disruptable,     ~Ase,  ~Gam,  ~Ook,  ~Ooc,  ~Spo,  ~Liv,
"PF3D7_0817900",   "DP;O_DP",        "ND;At", "O_ND", "At", "At;At", "O_ND", "O_ND",
"PF3D7_1139300",   "DP;O_DR",        "At", "At", NA, NA, NA, NA,
"PF3D7_1429200",   "DP;O_DP",        "O_ND", "O_ND", "O_At", "O_At", "O_At", NA
)
library(tidyverse)
data <- tibble(
~Gene,             ~Disruptable,     ~Ase,  ~Gam,  ~Ook,  ~Ooc,  ~Spo,  ~Liv,
"PF3D7_0817900",   "DP;O_DP",        "ND;At", "O_ND", "At", "At;At", "O_ND", "O_ND",
"PF3D7_1139300",   "DP;O_DR",        "At", "At", NA, NA, NA, NA,
"PF3D7_1429200",   "DP;O_DP",        "O_ND", "O_ND", "O_At", "O_At", "O_At", NA
)
data <- tribble(
~Gene,             ~Disruptable,     ~Ase,  ~Gam,  ~Ook,  ~Ooc,  ~Spo,  ~Liv,
"PF3D7_0817900",   "DP;O_DP",        "ND;At", "O_ND", "At", "At;At", "O_ND", "O_ND",
"PF3D7_1139300",   "DP;O_DR",        "At", "At", NA, NA, NA, NA,
"PF3D7_1429200",   "DP;O_DP",        "O_ND", "O_ND", "O_At", "O_At", "O_At", NA
)
View(data)
# Create a lookup table for visual icons
icon_map <- list(
"DP" = tags$span(class = "glyphicon glyphicon-ok", style = "color:green"),
"O_DP" = tags$span(class = "glyphicon glyphicon-ok", style = "color:green; opacity:0.4"),
"DR" = tags$span(class = "glyphicon glyphicon-remove", style = "color:darkred"),
"O_DR" = tags$span(class = "glyphicon glyphicon-remove", style = "color:darkred; opacity:0.4"),
"ND" = tags$span(class = "glyphicon glyphicon-ok-circle", style = "color:green"),
"O_ND" = tags$span(class = "glyphicon glyphicon-ok-circle", style = "color:green; opacity:0.4"),
"At" = tags$span(class = "fa fa-exclamation", style = "color:darkred"),
"O_At" = tags$span(class = "fa fa-exclamation", style = "color:darkred; opacity:0.4"),
"ED" = tags$span(class = "fa fa-sun-o", style = "color:darkred"),
"O_ED" = tags$span(class = "fa fa-sun-o", style = "color:darkred; opacity:0.4"),
"ID" = tags$span(class = "fa fa-compress", style = "color:darkred"),
"TD" = tags$span(class = "fa fa-bar-chart", style = "color:darkred"),
"CCA" = tags$span(class = "fa fa-stop", style = "color:darkred"),
"AC" = tags$span(class = "fa fa-certificate", style = "color:darkred")
)
library(htmltools)
library(reactable)
# Create a lookup table for visual icons
icon_map <- list(
"DP" = tags$span(class = "glyphicon glyphicon-ok", style = "color:green"),
"O_DP" = tags$span(class = "glyphicon glyphicon-ok", style = "color:green; opacity:0.4"),
"DR" = tags$span(class = "glyphicon glyphicon-remove", style = "color:darkred"),
"O_DR" = tags$span(class = "glyphicon glyphicon-remove", style = "color:darkred; opacity:0.4"),
"ND" = tags$span(class = "glyphicon glyphicon-ok-circle", style = "color:green"),
"O_ND" = tags$span(class = "glyphicon glyphicon-ok-circle", style = "color:green; opacity:0.4"),
"At" = tags$span(class = "fa fa-exclamation", style = "color:darkred"),
"O_At" = tags$span(class = "fa fa-exclamation", style = "color:darkred; opacity:0.4"),
"ED" = tags$span(class = "fa fa-sun-o", style = "color:darkred"),
"O_ED" = tags$span(class = "fa fa-sun-o", style = "color:darkred; opacity:0.4"),
"ID" = tags$span(class = "fa fa-compress", style = "color:darkred"),
"TD" = tags$span(class = "fa fa-bar-chart", style = "color:darkred"),
"CCA" = tags$span(class = "fa fa-stop", style = "color:darkred"),
"AC" = tags$span(class = "fa fa-certificate", style = "color:darkred")
)
render_icons <- function(cell_val) {
keys <- unlist(strsplit(cell_val, ";"))
icons <- lapply(keys, function(k) icon_map[[k]])
div(icons)
}
reactable(data,
columns = list(
Gene = colDef(name = "Gene", align = "left"),
Disruptable = colDef(cell = function(value) render_icons(value), html = TRUE),
Ase = colDef(cell = function(value) render_icons(value), html = TRUE),
Gam = colDef(cell = function(value) render_icons(value), html = TRUE),
Ook = colDef(cell = function(value) render_icons(value), html = TRUE),
Ooc = colDef(cell = function(value) render_icons(value), html = TRUE),
Spo = colDef(cell = function(value) render_icons(value), html = TRUE),
Liv = colDef(cell = function(value) render_icons(value), html = TRUE)
),
bordered = TRUE,
highlight = TRUE,
striped = TRUE
)
library(gt)
library(dplyr)
# Sample data similar to the image
data <- tibble::tibble(
Gene = c("PF3D7_0817900", "PF3D7_1139300", "PF3D7_1429200"),
Product = c("high mobility group protein B2 (HMGB2)",
"transcription factor with AP2 domain(s) (ApiAP2)",
"transcription factor with AP2 domain(s), putative (ApiAP2)"),
Disruptable = c("‚úîÔ∏è‚úîÔ∏è", "‚úîÔ∏è‚ùå", "‚úîÔ∏è‚úîÔ∏è"),
Ase = c("üü¢‚úîÔ∏è", "‚ùó", "üü¢‚úîÔ∏è"),
Gam = c("üü¢‚úîÔ∏è", "‚ùó", "üü¢‚úîÔ∏è"),
Ook = c("‚ùó", "", "‚ùó"),
Ooc = c("‚ÄºÔ∏è", "", "‚ÄºÔ∏è"),
Spo = c("üü¢‚úîÔ∏è", "", "‚ùó"),
Liv = c("üü¢‚úîÔ∏è", "", "")
)
View(data)
# Display the table with gt
gt(data) %>%
tab_header(title = "Gene Disruption Phenotypes") %>%
cols_label(
Gene = "Gene",
Product = "Product",
Disruptable = "Disruptable",
Ase = "Ase",
Gam = "Gam",
Ook = "Ook",
Ooc = "Ooc",
Spo = "Spo",
Liv = "Liv"
) %>%
tab_options(
table.font.size = 12,
column_labels.font.weight = "bold"
)
library(gt)
library(dplyr)
# Helper function to create a green circle with a tick
green_check_circle <- function(faded = FALSE) {
if (faded) {
return(gt::html('<span style="color:green; opacity:0.4;">&#10004;</span>'))  # faded ‚úîÔ∏è
} else {
return(gt::html('<span style="color:green;">&#10004;</span>'))  # normal ‚úîÔ∏è
}
}
# Sample data using HTML for icons
data <- tibble::tibble(
Gene = c("PF3D7_0817900", "PF3D7_1139300", "PF3D7_1429200"),
Product = c("high mobility group protein B2 (HMGB2)",
"transcription factor with AP2 domain(s) (ApiAP2)",
"transcription factor with AP2 domain(s), putative (ApiAP2)"),
Disruptable = list(
gt::html('<span style="color:green;">&#10004;&#10004;</span>'),
gt::html('<span style="color:green;">&#10004;</span><span style="color:red;">&#10008;</span>'),
gt::html('<span style="color:green;">&#10004;&#10004;</span>')
),
Ase = list(
green_check_circle(),
gt::html('<span style="color:darkred;">&#10071;</span>'),  # ‚ùó
green_check_circle(faded = TRUE)
),
Gam = list(
green_check_circle(faded = TRUE),
gt::html('<span style="color:darkred;">&#10071;</span>'),
green_check_circle(faded = TRUE)
),
Ook = list(
gt::html('<span style="color:darkred;">&#10071;</span>'),
gt::html(''),
gt::html('<span style="color:darkred;">&#10071;</span>')
),
Ooc = list(
gt::html('<span style="color:darkred;">&#10071;&#10071;</span>'),
gt::html(''),
gt::html('<span style="color:darkred;">&#10071;&#10071;</span>')
),
Spo = list(
green_check_circle(),
gt::html(''),
gt::html('<span style="color:darkred;">&#10071;</span>')
),
Liv = list(
green_check_circle(),
gt::html(''),
gt::html('')
)
)
# Create the styled gt table
gt(data) %>%
tab_header(title = "Gene Disruption Phenotypes") %>%
cols_label(
Gene = "Gene", Product = "Product", Disruptable = "Disruptable",
Ase = "Ase", Gam = "Gam", Ook = "Ook", Ooc = "Ooc", Spo = "Spo", Liv = "Liv"
) %>%
tab_options(
table.font.size = 12,
column_labels.font.weight = "bold"
)
ph <- read.csv("../Downloads/phenotype (3).txt")
View(ph)
ph <- read.csv("../Downloads/phenotype (3).txt", skip = 2)
ph <- read.csv("../Downloads/phenotype (3).txt", skip = 2, sep="\t")
ph <- ph[,-c(3,4)]
sub_df <- ph[81:83,]
View(sub_df)
sub_df$GeneViability
mgsub(sub_df$GeneViability,c("V","R"),c("‚úîÔ∏è", "‚ùå"))# Display the table with gt
library(mgsub)
mgsub(sub_df$GeneViability,c("V","R"),c("‚úîÔ∏è", "‚ùå"))# Display the table with gt
sub_df$GeneViability <- mgsub(sub_df$GeneViability,c("V","R"),c("‚úîÔ∏è", "‚ùå"))# Display the table with gt
View(sub_df)
gt(sub_df)
sub_df$OrthologViability <- mgsub(sub_df$OrthologViability,c("V","R"),c("‚úîÔ∏è", "‚ùå"))# Display the table with gt
library(gt)
library(dplyr)
gt(sub_df)
sub_df$new <- paste(sub_df$GeneViability,sub_df$OrthologViability)
gt(data) %>%
tab_header(title = "Gene Disruption Phenotypes") %>%
cols_label(
Gene = "Gene",
Product = "Product",
Disruptable = "Disruptable",
Ase = "Ase",
Gam = "Gam",
Ook = "Ook",
Ooc = "Ooc",
Spo = "Spo",
Liv = "Liv"
) %>%
tab_options(
table.font.size = 12,
column_labels.font.weight = "bold"
)
gt(sub_df)
install.packages(c('magrittr', 'showtext'))
install.packages(c("magrittr", "showtext"))
library(magrittr)
library(showtext)
install.packages("emojifont")
library(emojifont)
library(gt)
library(dplyr)
# Helper function to create a green circle with a tick
green_check_circle <- function(faded = FALSE) {
if (faded) {
return(gt::html('<span style="color:green; opacity:0.4;">&#10004;</span>'))  # faded ‚úîÔ∏è
} else {
return(gt::html('<span style="color:green;">&#10004;</span>'))  # normal ‚úîÔ∏è
}
}
# Sample data using HTML for icons
data <- tibble::tibble(
Gene = c("PF3D7_0817900", "PF3D7_1139300", "PF3D7_1429200"),
Product = c("high mobility group protein B2 (HMGB2)",
"transcription factor with AP2 domain(s) (ApiAP2)",
"transcription factor with AP2 domain(s), putative (ApiAP2)"),
Disruptable = list(
gt::html('<span style="color:green;">&#10004;&#10004;</span>'),
gt::html('<span style="color:green;">&#10004;</span><span style="color:red;">&#10008;</span>'),
gt::html('<span style="color:green;">&#10004;&#10004;</span>')
),
Ase = list(
green_check_circle(),
gt::html('<span style="color:darkred;">&#10071;</span>'),  # ‚ùó
green_check_circle(faded = TRUE)
),
Gam = list(
green_check_circle(faded = TRUE),
gt::html('<span style="color:darkred;">&#10071;</span>'),
green_check_circle(faded = TRUE)
),
Ook = list(
gt::html('<span style="color:darkred;">&#10071;</span>'),
gt::html(''),
gt::html('<span style="color:darkred;">&#10071;</span>')
),
Ooc = list(
gt::html('<span style="color:darkred;">&#10071;&#10071;</span>'),
gt::html(''),
gt::html('<span style="color:darkred;">&#10071;&#10071;</span>')
),
Spo = list(
green_check_circle(),
gt::html(''),
gt::html('<span style="color:darkred;">&#10071;</span>')
),
Liv = list(
green_check_circle(),
gt::html(''),
gt::html('')
)
)
# Create the styled gt table
gt(data) %>%
tab_header(title = "Gene Disruption Phenotypes") %>%
cols_label(
Gene = "Gene", Product = "Product", Disruptable = "Disruptable",
Ase = "Ase", Gam = "Gam", Ook = "Ook", Ooc = "Ooc", Spo = "Spo", Liv = "Liv"
) %>%
tab_options(
table.font.size = 12,
column_labels.font.weight = "bold"
)
sub_df <- ph[81:83,]
sub_df$GeneViability <- mgsub(sub_df$GeneViability,c("V","R"),c('<span style="color:green;">&#10004;</span>','<span style="color:darkred;">&#10008;</span>'))
View(sub_df)
gt(sub_df)
gt::html(sub_df)
gt::html(sub_df$GeneViability)
ttt <- gt::html(sub_df$GeneViability)
class(ttt)
sub_df <- ph[81:83,]
sub_df$GeneViability <- mgsub(sub_df$GeneViability,c("V","R"),c(gt::html('<span style="color:green;">&#10004;</span>'),gt::html('<span style="color:darkred;">&#10008;</span>')))
gt(sub_df)
sub_df$GeneViability
class(sub_df$GeneViability)
data <- tibble::tibble(
Gene = c("PF3D7_0817900", "PF3D7_1139300", "PF3D7_1429200"),
Disruptable = c(
"<span style='color:green;'>&#10004;</span>",
"<span style='color:darkred;'>&#10008;</span>",
"<span style='color:green;'>&#10004;</span><span style='color:darkred;'>&#10008;</span>"
)
)
class(data$Disruptable)
data %>%
gt() %>%
text_transform(
locations = cells_body(vars(Disruptable)),
fn = function(x) map(x, ~gt::html(.x))
)
data %>%
gt() %>%
text_transform(
locations = cells_body(columns = c(Disruptable)),
fn = function(x) map(x, ~gt::html(.x))
)
library(gt)
library(dplyr)
library(purrr)
# Sample data
data <- tibble::tibble(
Gene = c("PF3D7_0817900", "PF3D7_1139300", "PF3D7_1429200"),
Disruptable = c(
"<span style='color:green;'>&#10004;</span>",
"<span style='color:darkred;'>&#10008;</span>",
"<span style='color:green;'>&#10004;</span><span style='color:darkred;'>&#10008;</span>"
)
)
# Render GT table and inject HTML correctly
data %>%
gt() %>%
text_transform(
locations = cells_body(columns = c(Disruptable)),
fn = function(x) map(x, ~gt::html(.x))
)
sub_df <- ph[81:83,]
View(sub_df)
sub_df$GeneViability <- mgsub(sub_df$GeneViability,c("V","R"),c('<span style="color:green;">&#10004;</span>','<span style="color:darkred;">&#10008;</span>'))
View(sub_df)
gt::html(sub_df$GeneViability)
gt::html(sub_df$GeneViability[1])
sub_df$GeneViability[1] <- gt::html(sub_df$GeneViability[1])
class(sub_df$GeneViability[1])
sub_df$GeneViability[1]
class(tt)
class(ttt)
sub_df$GeneViability
class(sub_df$GeneViability) <- html
class(sub_df$GeneViability) <- "html"
class(sub_df$GeneViability[1])
class(sub_df$GeneViability[1])sub_df$GeneViability
sub_df$GeneViability
gt(sub_df)
sub_df$GeneViability
sub_df <- ph[81:83,]
sub_df$GeneViability <- mgsub(sub_df$GeneViability,c("V","R"),c('<span style="color:green;">&#10004;</span>','<span style="color:darkred;">&#10008;</span>'))
sub_df <- ph[81:83,]
sub_df$GeneViability <- mgsub(sub_df$GeneViability,c("V","R"),c('<span style="color:green;">&#10004;</span>','<span style="color:darkred;">&#10008;</span>'))
sub_df$GeneViability
sub_df$GeneViability <- lapply(sub_df$GeneViability, html)
gt(sub_df)
sub_df <- ph[81:83,]
subdf$new <- paste(sub_df$GeneViability, sub_df$OrthologViability)
sub_df$GeneViability <- mgsub(sub_df$GeneViability,c("V","R"),c('<span style="color:green;">&#10004;</span>','<span style="color:darkred;">&#10008;</span>'))
sub_df$new <- mgsub(sub_df$new,c("V","R"),c('<span style="color:green;">&#10004;</span>','<span style="color:darkred;">&#10008;</span>'))
sub_df$new
sub_df <- ph[81:83,]
subdf$new <- paste(sub_df$GeneViability, sub_df$OrthologViability)
sub_df <- ph[81:83,]
sub_df$new <- paste(sub_df$GeneViability, sub_df$OrthologViability)
sub_df$new
sub_df$GeneViability <- mgsub(sub_df$GeneViability,c("V","R"),c('<span style="color:green;">&#10004;</span>','<span style="color:darkred;">&#10008;</span>'))
sub_df$new <- mgsub(sub_df$new,c("V","R"),c('<span style="color:green;">&#10004;</span>','<span style="color:darkred;">&#10008;</span>'))
sub_df$new
sub_df$new <- lapply(sub_df$new, html)
gt(sub_df)
sub_df <- ph[81:83,]
sub_df$GeneViability <- mgsub(sub_df$GeneViability,c("V","R"),c('<span style="color:green;">&#10004;</span>','<span style="color:darkred;">&#10008;</span>'))
sub_df$OrthologViability <- mgsub(sub_df$OrthologViability,c("V","R"),c('<<span style="color:green; opacity:0.4;">&#10004;</span>','<span style="color:darkred; opacity:0.4;">&#10008;</span>'))
sub_df$new <- paste(sub_df$GeneViability,sub_df$OrthologViability)
gt(sub_df)
sub_df <- ph[81:83,]
sub_df$GeneViability <- mgsub(sub_df$GeneViability,c("V","R"),c('<span style="color:green;">&#10004;</span>','<span style="color:darkred;">&#10008;</span>'))
sub_df$OrthologViability <- mgsub(sub_df$OrthologViability,c("V","R"),c('<span style="color:green; opacity:0.4;">&#10004;</span>','<span style="color:darkred; opacity:0.4;">&#10008;</span>'))
sub_df$new <- paste(sub_df$GeneViability,sub_df$OrthologViability)
gt(sub_df)
View(sub_df)
sub_df$new <- lapply(sub_df$new, html)
gt(sub_df)
6608+8400+7728
22736*12/100
6900+7500+5900
20300*0.12
22736*12/100
6900*0.12
828+900+708
828+900+708+20300
setwd("~/plasmoRUtils")
library(devtools)
build(path = "../", vignettes = FALSE)
install.packages("~/plasmoRUtils_0.0.0.9000.tar.gz", repos = NULL, type = "source")
geneID <- c("PBANKA_0100600", "PBANKA_0102900", "PF3D7_0102900")
res <- searchMT(geneID = geneID)
?plasmoRUtils::searchMT()
library(plasmoRUtils)
res <- searchMT(geneID = geneID)
warnings()
library(tidyr)
library(tidyverse)
library(SingleR)
library(pkgdown)
build_site()
build_readme()
build_home()
build_home()
build_home()
?easyAF2Signal
build_reference()
document()
build_reference_index()
build_reference()
document()
build_reference()
build_home()
