View(getPreconfiguredTable)
c("primary_key","group_name","product","target_id","source_id","num_core","num_peripheral","length","sequence","taxon_name","abbreviation","core_peripheral","ec_numbers","pfam_domains")
c("primary_key","group_name","product","target_id","source_id","num_core","num_peripheral","length","sequence","taxon_name","abbreviation","core_peripheral","ec_numbers","pfam_domains") %>% collapse()
pasteo(c("primary_key","group_name","product","target_id","source_id","num_core","num_peripheral","length","sequence","taxon_name","abbreviation","core_peripheral","ec_numbers","pfam_domains"))
paste0(c("primary_key","group_name","product","target_id","source_id","num_core","num_peripheral","length","sequence","taxon_name","abbreviation","core_peripheral","ec_numbers","pfam_domains"))
substitute(("primary_key","group_name","product","target_id","source_id","num_core","num_peripheral","length","sequence","taxon_name","abbreviation","core_peripheral","ec_numbers","pfam_domains"))
View(getTable)
utils::URLencode("primary_key","group_name","product","target_id","source_id","num_core","num_peripheral","length","sequence","taxon_name","abbreviation","core_peripheral","ec_numbers","pfam_domains"))
utils::URLencode(c("primary_key","group_name","product","target_id","source_id","num_core","num_peripheral","length","sequence","taxon_name","abbreviation","core_peripheral","ec_numbers","pfam_domains"))
utils::URLencode(paste(c("primary_key","group_name","product","target_id","source_id","num_core","num_peripheral","length","sequence","taxon_name","abbreviation","core_peripheral","ec_numbers","pfam_domains"),collapse = ","))
from=1742855
to=1747281
paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",from,"&target_organism_type_ahead=",to,'&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}')
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}')
paste0(utils::URLencode("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",reserved = TRUE),
from,
utils::URLencode("&target_organism_type_ahead=",reserved = TRUE),
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}'),,reserved = TRUE)
paste0(utils::URLencode("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",reserved = TRUE),
from,
utils::URLencode("&target_organism_type_ahead=",reserved = TRUE),
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}'),,reserved = TRUE)
paste0(utils::URLencode("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",reserved = TRUE),
from,
utils::URLencode("&target_organism_type_ahead=",reserved = TRUE),
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}'),reserved = TRUE)
utils::URLencode("&target_organism_type_ahead=",reserved = TRUE)
utils::URLencode("&target_organism_type_ahead=")
utils::URLencode("&target_organism_type_ahead=",reserved = TRUE)
paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",reserved = TRUE,
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}'))
paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}'))
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}'))
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}')
utils::URLencode('&reportConfig={"attributes":[')
utils::URLencode('],"includeHeader":true,"attachmentType":"plain"}')
getSharedOlogs <- function(from=1742855,to=1747281,customFields=NULL){
if(is.null(customFields)){
readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}')))
} else {
encodeit <- paste0("%22", customFields, "%22", collapse = ",")
readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,utils::URLencode('&reportConfig={"attributes":['),
encodeit,
utils::URLencode('],"includeHeader":true,"attachmentType":"plain"}'))))
getSharedOlogs <- function(from=1742855,to=1747281,customFields=NULL){
if(is.null(customFields)){
readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}')))
} else {
encodeit <- paste0("%22", customFields, "%22", collapse = ",")
readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,utils::URLencode('&reportConfig={"attributes":['),
encodeit,
utils::URLencode('],"includeHeader":true,"attachmentType":"plain"}')))
}
}
temp <- getSharedOlogs
temp <- getSharedOlogs()
View(temp)
temp <- getSharedOlogs(customFields = c("primary_key","target_id","group_name"))
View(temp)
.retainIDs <- function(ids_str,regex,delim) {
# 1. Split the semicolon-separated string into a character vector
ids <- stringr::str_split(ids_str, delim, simplify = TRUE)
# 2. Keep only those matching the regex
keep <- ids[stringr::str_detect(ids, regex)]
# 3. Collapse back into a single string
stringr::str_c(keep, collapse = delim)
}
.retainIDs(temp$Accession,"PF3D7","|")
.retainIDs(temp$Accession,"PF3D7","[|]")
.retainIDs(temp$Accession,"PF3D7",'[|]')
.retainIDs(temp$Accession,"PF3D7_",'pfal|')
.retainIDs(temp$Accession,"PF3D7_",'[pfal|]')
stringr::str_split(temp$Accession, "|", simplify = TRUE)
stringr::str_split(temp$Accession, "[|]", simplify = TRUE)
ids <- stringr::str_split(temp$Accession, "[|]", simplify = TRUE)
ids[stringr::str_detect(ids, "PF3D7")]
colnames(temp)
getSharedOlogs <- function(from=1742855,to=1747281,customFields=NULL){
if(is.null(customFields)){
readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}')))
} else {
encodeit <- paste0("%22", customFields, "%22", collapse = ",")
readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,utils::URLencode('&reportConfig={"attributes":['),
encodeit,
utils::URLencode('],"includeHeader":true,"attachmentType":"plain"}')))
} %>% tidyr::separate_rows(`Target ID`,",")
}
temp <- getSharedOlogs(customFields = c("primary_key","target_id","group_name"))
?tidyr::separate_rows
getSharedOlogs <- function(from=1742855,to=1747281,customFields=NULL){
if(is.null(customFields)){
readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}')))
} else {
encodeit <- paste0("%22", customFields, "%22", collapse = ",")
readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,utils::URLencode('&reportConfig={"attributes":['),
encodeit,
utils::URLencode('],"includeHeader":true,"attachmentType":"plain"}')))
} %>% tidyr::separate_rows(.,`Target ID`,sep=",")
}
temp <- getSharedOlogs(customFields = c("primary_key","target_id","group_name"))
View(temp)
getSharedOlogs <- function(from=1742855,to=1747281,customFields=NULL, separaterows=TRUE){
if(is.null(customFields)){
df <- readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}')), progress = FALSE,show_col_types = FALSE )
} else {
encodeit <- paste0("%22", customFields, "%22", collapse = ",")
df <- readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,utils::URLencode('&reportConfig={"attributes":['),
encodeit,
utils::URLencode('],"includeHeader":true,"attachmentType":"plain"}')),progress = FALSE,show_col_types = FALSE,)
}
ifelse(isTRUE(separaterows),df%>% tidyr::separate_rows(.,`Target ID`,sep=","),df)
}
temp <- getSharedOlogs(customFields = c("primary_key","target_id","group_name"))
View(temp)
temp[[1]]
df <- readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}')), progress = FALSE,show_col_types = FALSE )
View(df)
separaterows=TRUE
ifelse(isTRUE(separaterows),
df%>% tidyr::separate_rows(.,`Target ID`,sep=","),
df)
df%>% tidyr::separate_rows(.,`Target ID`,sep=",")
df <- df%>% tidyr::separate_rows(.,`Target ID`,sep=",")
df <- ifelse(isTRUE(separaterows),
df%>% tidyr::separate_rows(.,`Target ID`,sep=","),
df)
}
getSharedOlogs <- function(from=1742855,to=1747281,customFields=NULL, separaterows=TRUE){
getSharedOlogs <- function(from=1742855,to=1747281,customFields=NULL, separaterows=TRUE){
if(is.null(customFields)){
df <- readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,
utils::URLencode('&reportConfig={"attributes":["primary_key","target_id"],"includeHeader":true,"attachmentType":"plain"}')), progress = FALSE,show_col_types = FALSE )
} else {
encodeit <- paste0("%22", customFields, "%22", collapse = ",")
df <- readr::read_tsv(paste0("https://orthomcl.org/orthomcl/service/record-types/sequence/searches/BySharedOrtholog/reports/attributesTabular?query_organism_type_ahead=",
from,
"&target_organism_type_ahead=",
to,utils::URLencode('&reportConfig={"attributes":['),
encodeit,
utils::URLencode('],"includeHeader":true,"attachmentType":"plain"}')),progress = FALSE,show_col_types = FALSE)
}
if(isTRUE(separaterows)){
df%>% tidyr::separate_rows(.,`Target ID`,sep=",")
} else {
df}
}
temp <- getSharedOlogs(customFields = c("primary_key","target_id","group_name"))
temp <- getSharedOlogs(customFields = c("primary_key","target_id","group_name"),separaterows = F)
json_data$searchData$dynamicAttributes
library(MotifDb)
BiocManager::install("MotifDb")
library(MotifDb)
motifs<-query(MotifDb, "pfalciparum")
motifs@elementMetadata
df <- getPreconfiguredTable(org = "Plasmodium falciparum 3D7",
db = "plasmodb",customField = "OrthologsLite")
}
View(df)
?plotDomain
plot <- plotDomain(geneID = c("PF3D7_0518900", "PF3D7_0602800", "PF3D7_0624600"))
plot
library(plasmoRUtils)
?searchApicoTFdb
setwd("C:/Users/rohit_satyam/Downloads/plasmoRUtils")
library(plasmoRUtils)
?searchApicoTFdb
## Fetch all Experimentally validated TRs
searchApicoTFdb(fetch = "exptfs")
?searchGSC
?searchHP
## To use it for other organism, turn off uniprotToGID and provide taxid of the organism
test <- searchHP("BRCA1",taxid = NULL, uniprotToGID = FALSE)
View(searchHP)
searchHP <- function(geneID, taxid="36329", uniprotToGID=TRUE) {
if(any(is.null(taxid) | taxid=="")){
url <- glue::glue("http://www.hitpredict.org/proteins.php?Value={geneID}&Species=0")
} else {
url <- glue::glue("http://www.hitpredict.org/proteins.php?Value={geneID}&Species={taxid}")
}
webpage <- rvest::read_html(url)
htp_link <- webpage %>%
rvest::html_nodes("a") %>%
rvest::html_attr("href") %>%
stringr::str_subset("./htp_int") %>%
unique()
if (length(htp_link)!=0) {
alldf <- purrr::map(htp_link, function(x){
url <- paste0("http://www.hitpredict.org/", stringr::str_replace(x, "./htp_int", "htp_int_txt"))
skip_lines_start <- 3
skip_lines_end <- 1
total_lines <- readr::read_lines(url) %>% length()
nrows <- total_lines - skip_lines_start - skip_lines_end - 1
message(glue::glue("\033[0;32mPPI found for: {geneID}\033[0m\n"))
data <- utils::read.table(url, header = TRUE, sep = "\t", skip = skip_lines_start, nrows = nrows) %>%
dplyr::mutate(QueryID = geneID)
})
data <- dplyr::bind_rows(alldf)
if (uniprotToGID) {
# pfa_ensembl <- biomaRt::useEnsemblGenomes(biomart = "protists_mart", dataset = "pfalciparum_eg_gene")
# converted <- biomaRt::getBM(attributes = c("uniprotsptrembl", "ensembl_gene_id"),
#                    filters = "uniprotsptrembl",
#                    values = data$Interactor,
#                    mart = pfa_ensembl)
converted <- toGeneid(unique(data$Interactor),
from = "uniprot","ensembl",
org = "Plasmodium falciparum 3D7",
db = "plasmodb",customFields=c("primary_key","uniprot_ids"))
data <- S4Vectors::merge(data,converted, all.x=TRUE,all.y=FALSE,
by.x="Interactor", by.y="UniProt ID(s)")
}
return(data)
} else {
message("No interaction found in HitPredict Database")
}
}
## To use it for other organism, turn off uniprotToGID and provide taxid of the organism
test <- searchHP("BRCA1",taxid = NULL, uniprotToGID = FALSE)
searchHP <- function(geneID, taxid="36329", uniprotToGID=TRUE) {
if(any(is.null(taxid) || taxid=="")){
url <- glue::glue("http://www.hitpredict.org/proteins.php?Value={geneID}&Species=0")
} else {
url <- glue::glue("http://www.hitpredict.org/proteins.php?Value={geneID}&Species={taxid}")
}
webpage <- rvest::read_html(url)
htp_link <- webpage %>%
rvest::html_nodes("a") %>%
rvest::html_attr("href") %>%
stringr::str_subset("./htp_int") %>%
unique()
if (length(htp_link)!=0) {
alldf <- purrr::map(htp_link, function(x){
url <- paste0("http://www.hitpredict.org/", stringr::str_replace(x, "./htp_int", "htp_int_txt"))
skip_lines_start <- 3
skip_lines_end <- 1
total_lines <- readr::read_lines(url) %>% length()
nrows <- total_lines - skip_lines_start - skip_lines_end - 1
message(glue::glue("\033[0;32mPPI found for: {geneID}\033[0m\n"))
data <- utils::read.table(url, header = TRUE, sep = "\t", skip = skip_lines_start, nrows = nrows) %>%
dplyr::mutate(QueryID = geneID)
})
data <- dplyr::bind_rows(alldf)
if (uniprotToGID) {
# pfa_ensembl <- biomaRt::useEnsemblGenomes(biomart = "protists_mart", dataset = "pfalciparum_eg_gene")
# converted <- biomaRt::getBM(attributes = c("uniprotsptrembl", "ensembl_gene_id"),
#                    filters = "uniprotsptrembl",
#                    values = data$Interactor,
#                    mart = pfa_ensembl)
converted <- toGeneid(unique(data$Interactor),
from = "uniprot","ensembl",
org = "Plasmodium falciparum 3D7",
db = "plasmodb",customFields=c("primary_key","uniprot_ids"))
data <- S4Vectors::merge(data,converted, all.x=TRUE,all.y=FALSE,
by.x="Interactor", by.y="UniProt ID(s)")
}
return(data)
} else {
message("No interaction found in HitPredict Database")
}
}
## To use it for other organism, turn off uniprotToGID and provide taxid of the organism
test <- searchHP("BRCA1",taxid = NULL, uniprotToGID = FALSE)
View(test)
url <- glue::glue("http://www.hitpredict.org/proteins.php?Value=BRCA1&Species=0")
htp_link <- webpage %>%
rvest::html_nodes("a") %>%
rvest::html_attr("href") %>%
stringr::str_subset("./htp_int") %>%
unique()
webpage <- rvest::read_html(url)
htp_link <- webpage %>%
rvest::html_nodes("a") %>%
rvest::html_attr("href") %>%
stringr::str_subset("./htp_int") %>%
unique()
htp_link
webpage %>% rvest::html_table()
tbl <- webpage %>% rvest::html_table()
webpage %>%
rvest::html_nodes("a") %>%
rvest::html_attr("href") %>%
stringr::str_subset("./htp_int")
webpage %>%
rvest::html_nodes("a") %>%
rvest::html_attr("href") %>%
stringr::str_subset("./htp_int") %>%
unique()
library(devtools)
build(path = "../plasmoRUtilsv1.1.0.tar.gz", vignettes = FALSE)
detach("package:plasmoRUtils", unload = TRUE)
remove.packages("plasmoRUtils")
install.packages("C:/Users/rohit_satyam/Downloads/plasmoRUtilsv1.1.0.tar.gz", repos = NULL, type = "source")
# Load package and some other useful packages by using
suppressPackageStartupMessages(
suppressWarnings({
library(plasmoRUtils)
library(dplyr)
library(plyr)}))
## Single gene query
searchHP("PF3D7_0418300") %>% head()
## To use it for other organism, turn off uniprotToGID and provide taxid of the organism
test <- searchHP("BRCA1",taxid = "3702" , uniprotToGID = FALSE)
View(test)
?searchIpDb
?searchIpDb
# Load package and some other useful packages by using
suppressPackageStartupMessages(
suppressWarnings({
library(plasmoRUtils)
library(dplyr)
library(plyr)}))
## Using Gene IDs
searchIpDb( c("PF3D7_0807800", "PF3D7_1023900")) %>% head()
## Using uniprot IDs
searchIpDb( c("C5LD32", "A5KAC7"),idtype = "uniprot") %>% head()
searchKipho(org="pf",type = "kinase")
searchKipho(org="pf",type = "phosphatase")
searchMiip(c("PF3D7_0807800","PF3D7_1023900"))
searchPM(geneID = c("PF3D7_0420300","PF3D7_0621000"))
searchPhPl(geneID = c("PF3D7_0420300","PF3D7_0621000","PF3D7_0523800"), org="pf") %>% head()
listOrthomcl()
View(listOrthomcl())
?getpairedOrthologs
res <- lapply(c(1744982,1747281), function(x){
getpairedOrthologs(from = 1742855,
to=x,
db="orthomcl",transform = FALSE)
})
View(res)
res[[1]] %>% head()
res[[2]] %>% head()
res <- res%>% setNames(c("Pvivax","Tgme49"))
merged_df <- Reduce(function(x, y) merge(x, y, by = "Accession", all = TRUE), list_of_dfs)
merged_df <- Reduce(function(x, y) merge(x, y, by = "Accession", all = TRUE), res)
View(merged_df)
res <- lapply(c(1744982,1747281,1742951), function(x){
getpairedOrthologs(from = 1742855,
to=x,
db="orthomcl",transform = FALSE)
}) %>% setNames(c("Pvivax","Tgme49","Pb"))
merged_df <- Reduce(function(x, y) merge(x, y, by = "Accession", all = TRUE), res)
View(merged_df)
View(merged_df)
merged_df[] <- lapply(merged_df, function(x) gsub("^[^|]+\\|", "", x))
merged_df[] <- lapply(merged_df, function(x) gsub("^[^|]+\\|", "", x))
merged_df <- Reduce(function(x, y) merge(x, y, by = "Accession", all = TRUE), res)
View(merged_df)
strip_prefix <- function(x) sub("^[^|]+\\|", "", x)     # per-token
clean_list   <- function(s) {
toks <- trimws(strsplit(s, ",", fixed = TRUE)[[1]])
paste(vapply(toks, strip_prefix, character(1)), collapse = ",")
}
merged_df[] <- lapply(merged_df, function(col) vapply(col, clean_list, character(1)))
View(merged_df)
res <- lapply(c(1744988,1747281,1742951), function(x){
getpairedOrthologs(from = 1742855,
to=x,
db="orthomcl",transform = FALSE)
}) %>% setNames(c("Pvivax","Tgme49","Pb"))
merged_df <- Reduce(function(x, y) merge(x, y, by = "Accession", all = TRUE), res)
## Tidying up the dataframe:
strip_prefix <- function(x) sub("^[^|]+\\|", "", x)     # per-token
clean_list   <- function(s) {
toks <- trimws(strsplit(s, ",", fixed = TRUE)[[1]])
paste(vapply(toks, strip_prefix, character(1)), collapse = ",")
}
merged_df[] <- lapply(merged_df, function(col) vapply(col, clean_list, character(1)))
View(merged_df)
View(merged_df)
## Changing column names
colnames(merged_df) <- c("P falciparum 3D7","P vivax Sal1","T gondii ME49","Plasmodium berghei ANKA")
View(merged_df)
?getTable()
getPreconfiguredTable("Plasmodium falciparum 3D7", db = "plasmodb", customField = "OrthologsLite")
View(listVeupathdb())
?listVeupathdb
tt <- listVeupathdb(customFields = c("primary_key","organism","project_id"))
View(tt)
tt <- listVeupathdb(customFields = c("primary_key","project_id","species"))
tt <- listVeupathdb(customFields = c("primary_key","project_id","species",'species_ncbi_tax_id'))
tt <- listVeupathdb(customFields = c("primary_key","project_id","species",'species_ncbi_tax_id','annotation_source'))
tt <- listVeupathdb(customFields = c("primary_key","project_id","species",'species_ncbi_tax_id',"organism_full"))
View(listVeupathdb())
View(listVeupathdb)
View(tt)
grep("3D7|ME49|Sal-1", tt$Organism...1)
tt[grep("3D7|ME49|Sal-1", tt$Organism...1),]
tt[grep("3D7|ME49$|Sal-1", tt$Organism...1),]
list <- listVeupathdb(customFields = c("primary_key","project_id","species",'species_ncbi_tax_id'))
list[grep("3D7|ME49$|Sal-1", list$Organism),]
dbs <- list[grep("3D7|ME49$|Sal-1", list$Organism),]
df <- lapply(1:nrow(dbs), function(x){
plasmoRUtils::getTable(org=dbs[x,]$Organism, db=tolower(dbs[x,]$`VEuPathDB Project`),customFields = c("primary_key" ,"gene_orthomcl_name","organism"))
})
df[[1]]
View(df[[1]])
View(df[[2]])
grep("N/A",df[[1]]$`Ortholog Group`)
stringr::str_detect("N/A",df[[1]]$`Ortholog Group`)
stringr::str_detect(pattern = "N/A",string = df[[1]]$`Ortholog Group`)
df2 <- lapply(df, function(x){
x[!(stringr::str_detect(pattern = "N/A",string = x$`Ortholog Group`)),]
})
View(df2)
df2[[1]]
table(df[[2]]$`Ortholog Group`)
table(merged_df$`P falciparum 3D7`)
table(merged_df$`P falciparum 3D7`)>1
table(table(merged_df$`P falciparum 3D7`)>1)
dbs
df <- lapply(1:nrow(dbs), function(x){
plasmoRUtils::getTable(org=dbs[x,]$Organism, db=tolower(dbs[x,]$`VEuPathDB Project`),customFields = c("primary_key" ,"gene_orthomcl_name","organism"))
})
df2[[1]]
merged_df2 <- Reduce(function(x, y) merge(x, y, by = "Ortholog Group", all = TRUE), df2)
View(merged_df2)
df <- lapply(1:nrow(dbs), function(x){
plasmoRUtils::getTable(org=dbs[x,]$Organism, db=tolower(dbs[x,]$`VEuPathDB Project`),customFields = c("primary_key" ,"gene_orthomcl_name"))
})
df2 <- lapply(df, function(x){
x[!(stringr::str_detect(pattern = "N/A",string = x$`Ortholog Group`)),]
})
merged_df2 <- Reduce(function(x, y) merge(x, y, by = "Ortholog Group", all = TRUE), df2)
View(merged_df2)
View(getpairedOrthologs)
merged_df2 <- merged_df2 %>% dplyr::group_by(x, `Ortholog Group`) %>% dplyr::summarise(dplyr::across(dplyr::everything(),
~paste(unique(.x), collapse = ",")), .groups = "drop")
merged_df2 <- merged_df2 %>% dplyr::group_by( `Ortholog Group`) %>% dplyr::summarise(dplyr::across(dplyr::everything(),
~paste(unique(.x), collapse = ",")), .groups = "drop")
## Changing column names
colnames(merged_df2) <- c("Orthogroup ID","P vivax Sal1","P falciparum 3D7","T gondii ME49")
View(merged_df2)
df2 %>% head()
merged_df2 %>% head()
merged_df2 %>% head(n = 10)
## Combine all the tables
merged_df2 <- Reduce(function(x, y) merge(x, y, by = "Ortholog Group", all = TRUE), df2)
merged_df2 %>% head(n = 10)
View(listipdb())
res <- lapply(c(126793,5811,5823), function(x){
getpairedOrthologs(from = 36329,
to=x,
db="ipdb",transform = TRUE)
}) %>% setNames(c("Pvivax","Tgme49","Pb"))
res[[1]]
View(res[[1]])
View(merged_df2)
View(res[[2]])
library(pkgdown)
build_news()
build_site()
build_site()
build_site()
setwd("C:/Users/rohit_satyam/Pictures/plasmoRUtils-main/plasmoRUtils-main")
setwd("C:/Users/rohit_satyam/Downloads/plasmoRUtils")
library(pkgdown)
library(devtools)
document()
pkgdown::build_site()
pkgdown::build_site()
build_article("retrieving_orthologs")
