[{"path":"/articles/Gene_ID_Conversion.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Accessing component databases of VEuPathDB","text":"plasmoRUtils package streamlines access VEuPathDB’s family 12 specialized databases ToxoDB, PlasmoDB, PiroplasmaDB (Amos et al. 2022). provides direct data retrieval capabilities VEuPathDB’s RESTful API, enabling seamless integration biological data R workflows. package supports downloading standard customized data tables, making particularly valuable researchers needing combine data multiple sources downstream analysis.","code":"# Load package and some other useful packages by using suppressPackageStartupMessages(   suppressWarnings({     library(plasmoRUtils)     library(dplyr)     library(plyr)}))"},{"path":"/articles/Gene_ID_Conversion.html","id":"gene-id-conversion","dir":"Articles","previous_headings":"","what":"Gene ID Conversion","title":"Accessing component databases of VEuPathDB","text":"common challenge bioinformatics involves mapping different identifier systems across databases. apicomplexan research, might include converting UniProt IDs, legacy gene identifiers, current Ensembl gene IDs. toGeneid() function addresses need retrieving --date annotations VEuPathDB databases, supporting bidirectional conversion various ID types flexible parameter specification.","code":""},{"path":"/articles/Gene_ID_Conversion.html","id":"retrieving-gene-annotations-and-alternative-ids","dir":"Articles","previous_headings":"Gene ID Conversion","what":"Retrieving Gene Annotations and Alternative IDs","title":"Accessing component databases of VEuPathDB","text":"toGeneid() function enables annotation retrieval provided Ensembl gene IDs. default, returns essential information including gene names, symbols, outdated gene IDs, protein Uniprot IDs. function’s versatility extends supporting custom field requests customFields parameter, available options documented getTable() help section. Note: Successful ID conversion requires precise organism nomenclature matching VEuPathDB’s conventions. example, Toxoplasma gondii ME49 must include proper spacing special characters. Invalid query Toxoplasma gondiiME49 short forms TgME49. functionality proves particularly valuable enhancing differential expression analysis results comprehensive annotations, enabling complete workflow automation without leaving command-line interfaces HPC systems.","code":"## Get annotations for list of geneIDs for PF3D7 toGeneid(c(\"PF3D7_0420300\", \"PF3D7_0621000\"), from=\"ensembl\") #> # A tibble: 2 × 10 #>   `Gene ID`     `Product Description`        `Gene Strand` `Gene Name or Symbol` #>   <chr>         <chr>                        <chr>         <chr>                 #> 1 PF3D7_0420300 AP2 domain transcription fa… forward       ApiAP2                #> 2 PF3D7_0621000 RNA polymerase subunit sigm… forward       ApSigma               #> # ℹ 6 more variables: `Previous ID(s)` <chr>, `Entrez Gene ID` <chr>, #> #   `UniProt ID(s)` <chr>, `Protein Length` <chr>, `# TM Domains` <chr>, #> #   `SignalP Peptide` <chr> ## Get annotations for list of geneIDs for organisms other than PF3D7 toGeneid(inputid = c(\"TGME49_304740\",\"TGME49_208030\"),from=\"ensembl\",org=\"Toxoplasma gondii ME49\", db=\"toxodb\") #> # A tibble: 2 × 10 #>   `Gene ID`     `Product Description`        `Gene Strand` `Gene Name or Symbol` #>   <chr>         <chr>                        <chr>         <chr>                 #> 1 TGME49_208030 microneme protein MIC4       forward       MIC4                  #> 2 TGME49_304740 rhoptry kinase family prote… reverse       ROP35                 #> # ℹ 6 more variables: `Previous ID(s)` <chr>, `Entrez Gene ID` <chr>, #> #   `UniProt ID(s)` <chr>, `Protein Length` <chr>, `# TM Domains` <chr>, #> #   `SignalP Peptide` <chr>  ## Convert uniprot IDs back to gene IDs. It will also provide Product description and Gene Symbol  toGeneid(inputid = c(\"Q8I1N6\",\"C6KT48\"),from=\"uniprot\",to=\"ensembl\" ) #> # A tibble: 2 × 4 #>   `Gene ID`     `Product Description`      `Gene Name or Symbol` `UniProt ID(s)` #>   <chr>         <chr>                      <chr>                 <chr>           #> 1 PF3D7_0420300 AP2 domain transcription … ApiAP2                Q8I1N6          #> 2 PF3D7_0621000 RNA polymerase subunit si… ApSigma               C6KT48   ## Using customFields to get only columns of interest toGeneid(inputid = c(\"TGME49_304740\",\"TGME49_208030\"),          from=\"ensembl\",org=\"Toxoplasma gondii ME49\",          db=\"toxodb\",          customFields=c(\"primary_key\",\"predicted_go_component\",\"annotated_go_function\")) #> # A tibble: 2 × 3 #>   `Gene ID`     `Computed GO Components` `Curated GO Functions` #>   <chr>         <chr>                    <chr>                  #> 1 TGME49_208030 extracellular region     N/A                    #> 2 TGME49_304740 N/A                      N/A"},{"path":"/articles/Gene_ID_Conversion.html","id":"accessing-preconfigured-data-tables-from-veupathdbs-component-sites","dir":"Articles","previous_headings":"Gene ID Conversion","what":"Accessing Preconfigured Data Tables from VEuPathDB’s component sites","title":"Accessing component databases of VEuPathDB","text":"Since VEuPathDB API documentation specifically encourages use specific organism database quoted , developed getTable() function fetch fields interests database separately. 12 component sites one portal: VEuPathDB.org. component sites : AmoebaDB, CryptoDB, FungiDB, GiardiaDB, HostDB, MicrosporidiaDB, PiroplasmaDB, PlasmoDB, ToxoDB, TrichDB, TriTrypDB VectorBase. record types (dataset organism), running search, portal reaches component sites get search results. means faster use component site directly can. frequently required fields provided help section getTable(). information fields can supplied getTable(), use following steps: Go database interest (Say “PlasmoDB”) Click Annotation, curation identifiers tab left select List IDs Scroll click Build Web Services URL Search >> hyperlink. section Choose Columns: choose fields interest. fields included help section getTable(). However, fields specific particular database dataset related fields (starts “pan_”) excluded. select fields, updated POST section webpage query builder. constituent databases VEuPathDB also provide preconfigured tables can fetched via getTable() function. enable users fetch tables, wrote another function called getPreconfiguredTable() usage shown . Please note MPMP pathway version provided PlasmoDB outdated (03-2019). pathways revised removed entirety. wish access latest MPMP version, can use data(\"mpmp.28Aug2024\") analysis scraped us. wish use geneset MPMP pathway enrichment analysis using pathfindR, can using data(\"pathfindrMPMP\"). Similarly, predictions like TMHMM SignalP InterPro updated given recent funding crunch therefore used caution. discuss separate tutorial. Note: urge users cite original articles related datasets alongside plasmoRUtils.","code":"## To fetch table for all the genes present in an organism  getTable(org=\"Plasmodium falciparum 3D7\", db=\"plasmodb\") %>% head() #> # A tibble: 6 × 10 #>   `Gene ID`     `Product Description`        `Gene Strand` `Gene Name or Symbol` #>   <chr>         <chr>                        <chr>         <chr>                 #> 1 PF3D7_0100100 erythrocyte membrane protei… forward       VAR                   #> 2 PF3D7_0100200 rifin                        reverse       RIF                   #> 3 PF3D7_0100300 erythrocyte membrane protei… reverse       VAR                   #> 4 PF3D7_0100400 rifin                        forward       RIF                   #> 5 PF3D7_0100500 erythrocyte membrane protei… reverse       N/A                   #> 6 PF3D7_0100600 rifin                        reverse       RIF                   #> # ℹ 6 more variables: `Previous ID(s)` <chr>, `Entrez Gene ID` <chr>, #> #   `UniProt ID(s)` <chr>, `Protein Length` <chr>, `# TM Domains` <chr>, #> #   `SignalP Peptide` <chr>  ## User can also provide custom fields. For example we wish to download the P. falciparum 3D7 Proteome and phosphoproteome data during intraerythrocytic development (Quantitative) (Pease et al.)  getTable(org=\"Plasmodium falciparum 3D7\", db=\"plasmodb\", customFields = c(\"primary_key\",\"pan_6365\",\"pan_6366\",\"pan_6367\")) %>% head() #> # A tibble: 6 × 4 #>   `Gene ID` Ring Ave (Global pro…¹ Troph Ave (Global pr…² Schizont Ave (Global…³ #>   <chr>     <chr>                  <chr>                  <chr>                  #> 1 PF3D7_01… N/A                    N/A                    N/A                    #> 2 PF3D7_01… N/A                    N/A                    N/A                    #> 3 PF3D7_01… N/A                    N/A                    N/A                    #> 4 PF3D7_01… N/A                    N/A                    N/A                    #> 5 PF3D7_01… N/A                    N/A                    N/A                    #> 6 PF3D7_01… N/A                    N/A                    N/A                    #> # ℹ abbreviated names: ¹​`Ring Ave (Global proteome and phosphoproteome)`, #> #   ²​`Troph Ave (Global proteome and phosphoproteome)`, #> #   ³​`Schizont Ave (Global proteome and phosphoproteome)` ## Fetch pathway table for all the genes from MPMP database  getPreconfiguredTable(org = \"Plasmodium falciparum 3D7\",db = \"plasmodb\",customField = \"MetabolicPathwaysMPMP\") %>% head() #> # A tibble: 6 × 4 #>   `Gene ID`     pathway_id Pathway                                      Activity #>   <chr>         <chr>      <chr>                                        <chr>    #> 1 PF3D7_0100100 lys_met    Peptides with confirmed methylated lysine r… erythro… #> 2 PF3D7_0100100 virulence  Candidate genes related to virulence         erythro… #> 3 PF3D7_0100100 Par_RBC    Protein-Protein Interactions between Human … erythro… #> 4 PF3D7_0100100 PfEMP1     PfEMP1 domain architectures                  erythro… #> 5 PF3D7_0100100 gene_lumef Gene expression affected by lumefantrine     erythro… #> 6 PF3D7_0100100 PQS        P. falciparum genes harboring G-quadruplexes erythro…"},{"path":"/articles/Gene_ID_Conversion.html","id":"fetching-genome-metadata-and-strain-names","dir":"Articles","previous_headings":"Gene ID Conversion","what":"Fetching genome metadata and strain names","title":"Accessing component databases of VEuPathDB","text":"examples, saw importance passing exact name org argument toGeneid() function properly. helper function provided achieve called listVeupathdb(). default, 11 columns returned including organism name, respective database present “VEuPathDB Project” column additional information. However, can limit search columns interests shown . stated VEuPathDB: best use VEuPathDB portal get table organisms sites, organism: component site, urls access fasta gff files. Since function also provide URLs FASTA GFF files, can use find URLs files interested import R directly without leaving console.","code":"listVeupathdb() %>% head() #> # A tibble: 6 × 11 #>   Organism                 Species Genome Fasta Downloa…¹ CDS Fasta Download L…² #>   <chr>                    <chr>   <chr>                  <chr>                  #> 1 Edhazardia aedis USNM 4… Edhaza… http://MicrosporidiaD… http://MicrosporidiaD… #> 2 Kluyveromyces marxianus… Kluyve… http://FungiDB.org/co… http://FungiDB.org/co… #> 3 Aspergillus luchuensis … Asperg… http://FungiDB.org/co… http://FungiDB.org/co… #> 4 Epichloe glyceriae E277  Epichl… http://FungiDB.org/co… http://FungiDB.org/co… #> 5 Aspergillus versicolor … Asperg… http://FungiDB.org/co… http://FungiDB.org/co… #> 6 Aspergillus sydowii CBS… Asperg… http://FungiDB.org/co… http://FungiDB.org/co… #> # ℹ abbreviated names: ¹​`Genome Fasta Download Link`, #> #   ²​`CDS Fasta Download Link` #> # ℹ 7 more variables: `Transcript Fasta Download Link` <chr>, #> #   `Protein Fasta Download Link` <chr>, `VEuPathDB Project` <chr>, #> #   Genes <chr>, `GFF Download Link` <chr>, `Genome Source` <chr>, #> #   `Structural Annotation Source` <chr> listVeupathdb(customFields=c(\"species\", \"project_id\")) %>% head() #> # A tibble: 6 × 2 #>   Species                  `VEuPathDB Project` #>   <chr>                    <chr>               #> 1 Entamoeba nuttalli       AmoebaDB            #> 2 Acanthamoeba castellanii AmoebaDB            #> 3 Mastigamoeba balamuthi   AmoebaDB            #> 4 Acanthamoeba sp.         AmoebaDB            #> 5 Acanthamoeba sp.         AmoebaDB            #> 6 Acanthamoeba sp.         AmoebaDB listVeupathdb() %>%    subset(.,Organism ==\"Edhazardia aedis USNM 41457\") %>%    select(`GFF Download Link`) %>% as.character() %>%    rtracklayer::import.gff3() %>% head() #> GRanges object with 6 ranges and 12 metadata columns: #>            seqnames    ranges strand |    source                type     score #>               <Rle> <IRanges>  <Rle> |  <factor>            <factor> <numeric> #>   [1] AFBI030000... 5287-6076      + | VEuPathDB protein_coding_gene        NA #>   [2] AFBI030000... 5287-6076      + | VEuPathDB mRNA                       NA #>   [3] AFBI030000... 5287-6076      + | VEuPathDB exon                       NA #>   [4] AFBI030000... 5447-6043      + | VEuPathDB CDS                        NA #>   [5] AFBI030000... 5287-5446      + | VEuPathDB five_prime_UTR             NA #>   [6] AFBI030000... 6044-6076      + | VEuPathDB three_prime_UTR            NA #>           phase            ID   description   ebi_biotype          Parent #>       <integer>   <character>   <character>   <character> <CharacterList> #>   [1]      <NA>    EDEG_00001 hypothetic... protein_co...                 #>   [2]      <NA> EDEG_00001... hypothetic...          <NA>      EDEG_00001 #>   [3]      <NA> exon_EDEG_...          <NA>          <NA>   EDEG_00001... #>   [4]         0 EDEG_00001...          <NA>          <NA>   EDEG_00001... #>   [5]      <NA> utr_EDEG_0...          <NA>          <NA>   EDEG_00001... #>   [6]      <NA> utr_EDEG_0...          <NA>          <NA>   EDEG_00001... #>       gene_ebi_biotype     gene_id protein_source_id            Note #>            <character> <character>       <character> <CharacterList> #>   [1]             <NA>        <NA>              <NA>                 #>   [2]    protein_co...        <NA>              <NA>                 #>   [3]             <NA>  EDEG_00001              <NA>                 #>   [4]             <NA>  EDEG_00001     EDEG_00001...                 #>   [5]             <NA>        <NA>              <NA>                 #>   [6]             <NA>        <NA>              <NA>                 #>   ------- #>   seqinfo: 342 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/Gene_ID_Conversion.html","id":"mapping-pdb-ids-to-gene-ids","dir":"Articles","previous_headings":"Gene ID Conversion","what":"Mapping PDB IDs to Gene IDs","title":"Accessing component databases of VEuPathDB","text":"currently facility VEuPathDB convert PDB IDs respective gene IDs. PDB ID corresponds multimer complex multiple PDB ids, becomes arduous map Gene IDs manually. provide solution issue, can first convert PDB chains Uniprot IDs using pdb2uniprot() function can use toGeneid() function obtain gene IDs.","code":"pdbids <- c(\"7D2W\",\"4U5A\",\"6E10\") df <- lapply(pdbids, pdb2uniprot) %>% plyr::ldply()  geneids <- toGeneid(inputid = unique(df$attribute),from = \"uniprot\",to = \"ensembl\")  ## Combining the geneIDs with df S4Vectors::merge(df,geneids,all=TRUE, by.x=\"attribute\", by.y=\"UniProt ID(s)\") %>% head() #>    attribute entity_id chain_id struct_asym_id unp_start unp_end #> 1 A0A143ZZR8         1        A              A        27     206 #> 2 A0A143ZZR8         1        B              B        27     206 #> 3     Q75UY1         1        C              C        42     241 #> 4     Q75UY1         1        D              D        42     241 #> 5     Q75UY1         1        A              A        42     241 #> 6     Q75UY1         1        B              B        42     241 #>   start.residue_number start.author_residue_number start.author_insertion_code #> 1                    3                          NA                             #> 2                    3                          NA                             #> 3                    2                          NA                             #> 4                    2                          NA                             #> 5                    2                          NA                             #> 6                    2                          NA                             #>   end.residue_number end.author_residue_number end.author_insertion_code query #> 1                182                       181                            7D2W #> 2                182                       181                            7D2W #> 3                201                        NA                            4U5A #> 4                201                        NA                            4U5A #> 5                201                        NA                            4U5A #> 6                201                        NA                            4U5A #>         Gene ID                       Product Description Gene Name or Symbol #> 1 PF3D7_1372300 Plasmodium exported protein (PHISTa-like)                 N/A #> 2 PF3D7_1372300 Plasmodium exported protein (PHISTa-like)                 N/A #> 3          <NA>                                      <NA>                <NA> #> 4          <NA>                                      <NA>                <NA> #> 5          <NA>                                      <NA>                <NA> #> 6          <NA>                                      <NA>                <NA>"},{"path":"/articles/Gene_ID_Conversion.html","id":"session","dir":"Articles","previous_headings":"","what":"Session","title":"Accessing component databases of VEuPathDB","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14 ucrt) #> Platform: x86_64-w64-mingw32/x64 #> Running under: Windows 11 x64 (build 26100) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_India.utf8  LC_CTYPE=English_India.utf8    #> [3] LC_MONETARY=English_India.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=English_India.utf8     #>  #> time zone: Asia/Riyadh #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] plyr_1.8.9          dplyr_1.1.4         plasmoRUtils_1.0.0  #> [4] rlang_1.1.6         readr_2.1.5         janitor_2.2.1       #> [7] randomcoloR_1.1.0.1 BiocStyle_2.32.1    #>  #> loaded via a namespace (and not attached): #>   [1] segmented_2.1-4             fs_1.6.6                    #>   [3] ProtGenerics_1.36.0         matrixStats_1.5.0           #>   [5] bitops_1.0-9                lubridate_1.9.4             #>   [7] pRoloc_1.44.1               httr_1.4.7                  #>   [9] RColorBrewer_1.1-3          doParallel_1.0.17           #>  [11] ggsci_3.2.0                 tools_4.4.1                 #>  [13] MSnbase_2.30.1              backports_1.5.0             #>  [15] utf8_1.2.5                  R6_2.6.1                    #>  [17] lazyeval_0.2.2              withr_3.0.2                 #>  [19] prettyunits_1.2.0           gridExtra_2.3               #>  [21] preprocessCore_1.66.0       cli_3.6.5                   #>  [23] Biobase_2.64.0              textshaping_1.0.1           #>  [25] gt_1.0.0                    sass_0.4.10                 #>  [27] topGO_2.56.0                mvtnorm_1.3-3               #>  [29] randomForest_4.7-1.2        proxy_0.4-27                #>  [31] pkgdown_2.1.3               Rsamtools_2.20.0            #>  [33] systemfonts_1.2.3           txdbmaker_1.0.1             #>  [35] AnnotationForge_1.46.0      dichromat_2.0-0.1           #>  [37] parallelly_1.44.0           limma_3.60.6                #>  [39] rstudioapi_0.17.1           impute_1.78.0               #>  [41] RSQLite_2.4.0               FNN_1.1.4.1                 #>  [43] generics_0.1.4              BiocIO_1.14.0               #>  [45] vroom_1.6.5                 gtools_3.9.5                #>  [47] car_3.1-3                   dendextend_1.19.0           #>  [49] GO.db_3.19.1                Matrix_1.7-1                #>  [51] MALDIquant_1.22.3           drawProteins_1.24.0         #>  [53] S4Vectors_0.42.1            abind_1.4-8                 #>  [55] lifecycle_1.0.4             yaml_2.3.10                 #>  [57] snakecase_0.11.1            carData_3.0-5               #>  [59] SummarizedExperiment_1.34.0 recipes_1.3.1               #>  [61] SparseArray_1.4.8           BiocFileCache_2.12.0        #>  [63] Rtsne_0.17                  grid_4.4.1                  #>  [65] blob_1.2.4                  promises_1.3.3              #>  [67] crayon_1.5.3                PSMatch_1.8.0               #>  [69] lattice_0.22-6              beachmat_2.20.0             #>  [71] echarts4r_0.4.5.9000        annotate_1.82.0             #>  [73] GenomicFeatures_1.56.0      chromote_0.5.1              #>  [75] mzR_2.38.0                  KEGGREST_1.44.1             #>  [77] pillar_1.10.2               knitr_1.50                  #>  [79] GenomicRanges_1.56.2        rjson_0.2.23                #>  [81] lpSolve_5.6.23              future.apply_1.11.3         #>  [83] codetools_0.2-20            mgsub_1.7.3                 #>  [85] glue_1.8.0                  V8_6.0.3                    #>  [87] pcaMethods_1.96.0           data.table_1.17.4           #>  [89] MultiAssayExperiment_1.30.3 vctrs_0.6.5                 #>  [91] png_0.1-8                   gtable_0.3.6                #>  [93] kernlab_0.9-33              cachem_1.1.0                #>  [95] gower_1.0.2                 xfun_0.52                   #>  [97] prodlim_2025.04.28          S4Arrays_1.4.1              #>  [99] mime_0.13                   coda_0.19-4.1               #> [101] survival_3.8-3              ncdf4_1.24                  #> [103] timeDate_4041.110           SingleCellExperiment_1.26.0 #> [105] iterators_1.0.14            hardhat_1.4.1               #> [107] lava_1.8.1                  statmod_1.5.0               #> [109] MLInterfaces_1.84.0         ipred_0.9-15                #> [111] nlme_3.1-166                bit64_4.6.0-1               #> [113] progress_1.2.3              filelock_1.0.3              #> [115] LaplacesDemon_16.1.6        GenomeInfoDb_1.40.1         #> [117] bslib_0.9.0                 affyio_1.74.0               #> [119] irlba_2.3.5.1               rpart_4.1.23                #> [121] colorspace_2.1-1            BiocGenerics_0.50.0         #> [123] DBI_1.2.3                   nnet_7.3-19                 #> [125] tidyselect_1.2.1            processx_3.8.6              #> [127] bit_4.6.0                   compiler_4.4.1              #> [129] curl_6.2.3                  rvest_1.0.4                 #> [131] httr2_1.1.2                 graph_1.82.0                #> [133] SparseM_1.84-2              xml2_1.3.8                  #> [135] plotly_4.10.4               desc_1.4.3                  #> [137] DelayedArray_0.30.1         bookdown_0.43               #> [139] rtracklayer_1.64.0          scales_1.4.0                #> [141] hexbin_1.28.5               affy_1.82.0                 #> [143] rappdirs_0.3.3              stringr_1.5.1               #> [145] digest_0.6.37               mixtools_2.0.0.1            #> [147] rmarkdown_2.29              XVector_0.44.0              #> [149] htmltools_0.5.8.1           pkgconfig_2.0.3             #> [151] SingleR_2.6.0               sparseMatrixStats_1.16.0    #> [153] MatrixGenerics_1.16.0       dbplyr_2.5.0                #> [155] fastmap_1.2.0               htmlwidgets_1.6.4           #> [157] UCSC.utils_1.0.0            shiny_1.10.0                #> [159] DelayedMatrixStats_1.26.0   farver_2.1.2                #> [161] jquerylib_0.1.4             jsonlite_2.0.0              #> [163] mclust_6.1.1                BiocParallel_1.38.0         #> [165] mzID_1.42.0                 ModelMetrics_1.2.2.2        #> [167] BiocSingular_1.20.0         RCurl_1.98-1.17             #> [169] magrittr_2.0.3              scuttle_1.14.0              #> [171] Formula_1.2-5               GenomeInfoDbData_1.2.12     #> [173] Rcpp_1.0.14                 viridis_0.6.5               #> [175] MsCoreUtils_1.16.1          vsn_3.72.0                  #> [177] pROC_1.18.5                 stringi_1.8.7               #> [179] zlibbioc_1.50.0             MASS_7.3-61                 #> [181] listenv_0.9.1               parallel_4.4.1              #> [183] splines_4.4.1               Biostrings_2.72.1           #> [185] hms_1.1.3                   ps_1.9.1                    #> [187] igraph_2.1.4                ggpubr_0.6.0                #> [189] QFeatures_1.14.2            ggsignif_0.6.4              #> [191] reshape2_1.4.4              biomaRt_2.60.1              #> [193] stats4_4.4.1                ScaledMatrix_1.12.0         #> [195] XML_3.99-0.18               evaluate_1.0.3              #> [197] BiocManager_1.30.25         tzdb_0.5.0                  #> [199] foreach_1.5.2               httpuv_1.6.16               #> [201] tidyr_1.3.1                 purrr_1.0.4                 #> [203] future_1.49.0               clue_0.3-66                 #> [205] bio3d_2.4-5                 ggplot2_3.5.2               #> [207] rsvd_1.0.5                  broom_1.0.8                 #> [209] xtable_1.8-4                restfulr_0.0.15             #> [211] AnnotationFilter_1.28.0     easyPubMed_2.13             #> [213] e1071_1.7-16                rstatix_0.7.2               #> [215] later_1.4.2                 class_7.3-22                #> [217] viridisLite_0.4.2           ragg_1.4.0                  #> [219] tibble_3.2.1                websocket_1.4.4             #> [221] memoise_2.0.1               AnnotationDbi_1.66.0        #> [223] GenomicAlignments_1.40.0    IRanges_2.38.1              #> [225] cluster_2.1.8               globals_0.18.0              #> [227] timechange_0.3.0            caret_7.0-1                 #> [229] sampling_2.10"},{"path":[]},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to plasmoRUtils","text":"downloading package, install following dependencies. plasmoRUtils package available CRAN can installed follows:","code":"cranpkgs <- c('BiocManager','randomcoloR', 'janitor', 'readr', 'rlang', 'dplyr', 'ggsci', 'rvest', 'easyPubMed', 'plyr', 'scales', 'ggplot2', 'glue', 'tidyr', 'tibble', 'data.table', 'plotly', 'purrr', 'stringr', 'S4Vectors', 'echarts4r', 'magrittr', 'bio3d', 'httr', 'jsonlite', 'ggpubr', 'gt', 'mgsub', 'reshape2','pathfindR')  install.packages(setdiff(cranpkgs, rownames(installed.packages())), dependencies = TRUE)  biocpkgs <- c(\"rmarkdown\",\"pRoloc\",\"knitr\",\"BiocStyle\",\"DESeq2\",\"styler\",\"utils\",\"IRanges\",\"BiocGenerics\",\"rtracklayer\",\"scuttle\",\"txdbmaker\",\"topGO\",\"drawProteins\",\"GenomicFeatures\",\"biomaRt\",\"AnnotationForge\",\"Biostrings\",\"GenomeInfoDb\",\"SingleCellExperiment\",\"SingleR\",\"NOISeq\",\"GenomicRanges\",\"BSgenome\")  BiocManager::install(setdiff(biocpkgs, rownames(installed.packages())), dependencies = TRUE) install.packages(\"plasmoRUtils\")  # Once installed load the library as library(plasmoRUtils)  ## To re-check if all the dependencies that are required by plasmoRUtils are installed install_dependencies()"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to plasmoRUtils","text":"Using plasmoRUtils, users can fetch data VEuPathDB 12 component sites databases (VEuPathDBs) transform formats compatible R packages straightforward manner. Data tables (preconfigured user-configured) can downloaded VEuPathDBs directly within R/RStudio, thanks variety R functions RESTful API provided VEuPathDBs. databases lack APIs, developed database-specific “searchX” functions (X represents database) utilize rvest package web crawling retrieve data, transformed tables can saved shared. Additionally, created function enable programmatic access MPMP database first time, allowing users download share data tables convenience. package also provides several data sets reanalyzed using latest annotations VEuPathDBs can used various functions. Databases covered includes: HitPredict ApicoTFDB Malaria.tools Malaria Parasite Metabolic Pathways (MPMP) database Malaria Important Interacting Proteins (MIIP) Phenoplasm PlasmoBase Uniprot Malaria Cell Atlas, etc. exhaustive list, see subsections .","code":"# Load package and some other useful packages by using suppressPackageStartupMessages(   suppressWarnings({     library(plasmoRUtils)     library(dplyr)     library(plyr)}))"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"accessing-databases-with-plasmorutils-search-functions","dir":"Articles","previous_headings":"","what":"Accessing databases with plasmoRUtils search functions","title":"Introduction to plasmoRUtils","text":"plasmoRUtils package several search function fetch information databases. functions tabulated :","code":""},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"searchapidotfdb","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchApidoTFdb()","title":"Introduction to plasmoRUtils","text":"function helps user fetch transcription factors particular apicomplexan interest ApicoTFDb(Sardar et al. 2019). ease usage organism names abbreviated follows Table : Using function relatively easy can achieved ","code":"## Searching all plasmodium TFs searchApicoTFdb(org=\"pf\") %>% head() #> # A tibble: 6 × 4 #>   `Gene ID`     `Protein Length` `Product Description`              `TF- Family` #>   <chr>         <chr>            <chr>                              <chr>        #> 1 PF3D7_1319600 1633             ACDC domain-containing protein, p… AP2          #> 2 PF3D7_0604100 1979             AP2 domain transcription factor    AP2          #> 3 PF3D7_1222400 2558             AP2 domain transcription factor    AP2          #> 4 PF3D7_1222600 2432             AP2 domain transcription factor A… AP2          #> 5 PF3D7_1408200 1702             AP2 domain transcription factor A… AP2          #> 6 PF3D7_1007700 1597             AP2 domain transcription factor A… AP2 ## Searching all cyclospora TFs searchApicoTFdb(org=\"tg49\") %>% head() #> # A tibble: 6 × 4 #>   `Gene ID`     `Product Description`              `Protein Length` `TF- Family` #>   <chr>         <chr>                              <chr>            <chr>        #> 1 TGME49_200385 Myb family DNA-binding domain-con… 2258             Myb/SANT     #> 2 TGME49_201220 zinc finger protein                603              BBOX         #> 3 TGME49_201790 FHA domain-containing protein      556              FHA          #> 4 TGME49_202690 DNA-directed RNA polymerase II RP… 250              General-TF   #> 5 TGME49_202840 FHA domain-containing protein      1044             FHA          #> 6 TGME49_202900 zinc finger (CCCH type) motif-con… 1298             Zn-Finger"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"searchgsc","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchGSC()","title":"Introduction to plasmoRUtils","text":"Sometimes, difficult keep track corpus working gene interest might want keep competing groups across globe. searchGSC() function can help collect necessary literature gene ID interest mentioned return results form data frame. Since Google Scholar searches restricted Article abstracts extends till supplementary section, function can helpful capture articles mentions gene ID interest otherwise missed normal Google search. Besides, since pre-print literature indexed Google Scholar, can also find papers competing groups yet peer-reviewed. Note: like warn users function experimental seen get IP blocked temporarily 24 hrs used 20 times. large array genes, encourage users use specialized APIs.","code":"## Searching all plasmodium TFs searchGSC(c(\"PF3D7_0420300\", \"PF3D7_0621000\")) #> # A tibble: 14 × 5 #>    GeneID        Title                                       Year  Url   Authors #>    <chr>         <chr>                                       <chr> <chr> <chr>   #>  1 PF3D7_0420300 Changes in genome organization of parasite… 2018  http… EM Bun… #>  2 PF3D7_0420300 Transcriptomics and proteomics reveal two … 2019  http… SE Lin… #>  3 PF3D7_0420300 The RNA structurome in the asexual blood s… 2021  http… DR Alv… #>  4 PF3D7_0420300 The Transcription Factor PfAP2-O Influence… 2021  http… EFG Cu… #>  5 PF3D7_0621000 The roles of plasmepsins IX and X in malar… 2021  http… AS Nas… #>  6 PF3D7_0420300 Investigation of Plasmodium falciparum mit… 2022  http… S Dass  #>  7 PF3D7_0420300 Plasmodium falciparum MORC protein modulat… 2023  http… MK Sin… #>  8 PF3D7_0621000 Coordination of apicoplast transcription i… 2023  http… Y Koba… #>  9 PF3D7_0621000 An Insight to Further Malaria Vaccine Deve… 2023  NA    A Berry #> 10 PF3D7_0420300 Systematic in vitro evolution in Plasmodiu… 2024  http… MR Lut… #> 11 PF3D7_0420300 A Plasmodium falciparum MORC protein compl… 2024  http… MK Sin… #> 12 PF3D7_0420300 Transcriptome analysis reveals a de novo D… 2025  http… A Okaf… #> 13 PF3D7_0420300 Genome-wide gene expression profiles throu… 2025  http… G Zang… #> 14 PF3D7_0621000 Advancing Functional Genomics in P. falcip… 2025  http… ST Win…"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"searchhp","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchHP()","title":"Introduction to plasmoRUtils","text":"function enables search HitPredict(López, Nakai, Patil 2015) database procure high-confidence Protein-Protein interactions(PPI) organism interest. requires gene ID taxon ID. HitPredict database provides PPI data form Uniprot IDs always ideal apicomplexan biologists. Therefore, provide functionality convert Uniprot IDs back gene IDs setting uniprotToGID=TRUE . Since apicomplexan HitPredict Plasmodium falciparum gene ID mapping conversion functionality limited Plasmodium. turned , using non-apicomplexan organism shown . Another scenario users might interested setting uniportToGID=FALSE might querying thousands IDs. Since ID conversion carried using biomaRt, might redundant convert Uniprot ID multiple times multiple interacting partners. convenience, therefore provide another function toGeneid() quickly converts Uniprot IDs back Ensembl IDs.","code":"## Single gene query searchHP(\"PF3D7_0418300\") %>% head() #>   Interactor Interaction       Name Experiments        Category Method.Score #> 1 A0A5K1K7X4       46953 A0A5K1K7X4           1 High-throughput         0.35 #> 2     C0H4E0       82953     C0H4E0           1 High-throughput         0.39 #> 3     C0H4U4       83025     C0H4U4           1 High-throughput         0.39 #> 4     C0H586       83100     C0H586           1 High-throughput         0.39 #> 5     C0H5G3       83162     C0H5G3           1 High-throughput         0.39 #> 6     Q8I398     1211124     Q8I398           1 High-throughput         0.49 #>   Annotation.Score Interaction.Score Confidence       QueryID ensembl_gene_id #> 1             0.16             0.238        Low PF3D7_0418300            <NA> #> 2             0.16             0.251        Low PF3D7_0418300   PF3D7_0515400 #> 3             0.16             0.251        Low PF3D7_0418300   PF3D7_0813300 #> 4             0.16             0.251        Low PF3D7_0418300   PF3D7_0933200 #> 5             0.16             0.251        Low PF3D7_0418300   PF3D7_1341300 #> 6             0.16             0.282       High PF3D7_0418300   PF3D7_0905100  ## To use it for other organism, turn off uniprotToGID and provide taxid of the organism test <- searchHP(\"BRCA1\",taxid = \"9606\" , uniprotToGID = FALSE)  ## Multiple gene query res <- lapply(c(\"PF3D7_0418300\",\"PF3D7_1118500\"), function(x){searchHP(x,uniprotToGID = FALSE)})%>% plyr::ldply()  res %>% tail() #>    Interaction Interactor       Name Experiments        Category Method.Score #> 15       83162     C0H5G3     C0H5G3           1 High-throughput         0.39 #> 16       46953 A0A5K1K7X4 A0A5K1K7X4           1 High-throughput         0.35 #> 17     1211135     Q9U0N1     Q9U0N1           1 High-throughput         0.35 #> 18     1212791     Q8IJG6     Q8IJG6           1 High-throughput         0.49 #> 19       87015     C6KTD2       SET1           1 High-throughput         0.39 #> 20     1211131     Q8I1Q4     Q8I1Q4           1 High-throughput         0.49 #>    Annotation.Score Interaction.Score Confidence       QueryID #> 15             0.16             0.251        Low PF3D7_0418300 #> 16             0.16             0.238        Low PF3D7_0418300 #> 17             0.16             0.238        Low PF3D7_0418300 #> 18             0.50             0.494       High PF3D7_1118500 #> 19             0.50             0.439       High PF3D7_1118500 #> 20             0.16             0.282       High PF3D7_1118500  ## You can now use toGeneid function which uses PlasmoDB release 68 annotation to ## map the uniprot IDs back to the gene IDs toGeneid(res$Interactor,from = \"uniprot\",\"ensembl\") %>% full_join(., res, by = c(\"UniProt ID(s)\" = \"Interactor\")) #> # A tibble: 20 × 13 #>    `Gene ID`     `Product Description`     `Gene Name or Symbol` `UniProt ID(s)` #>    <chr>         <chr>                     <chr>                 <chr>           #>  1 PF3D7_0113000 glutamic acid-rich prote… GARP                  Q9U0N1          #>  2 PF3D7_0418300 conserved Plasmodium pro… N/A                   Q8I1Q4          #>  3 PF3D7_0515400 conserved protein, unkno… N/A                   C0H4E0          #>  4 PF3D7_0526800 conserved Plasmodium pro… N/A                   Q8I3J7          #>  5 PF3D7_0532100 early transcribed membra… ETRAMP5               A0A5K1K7X4      #>  6 PF3D7_0629700 SET domain protein, puta… SET1                  C6KTD2          #>  7 PF3D7_0802000 glutamate dehydrogenase,… GDH3                  Q8IAM0          #>  8 PF3D7_0813300 NPL domain-containing pr… N/A                   C0H4U4          #>  9 PF3D7_0825500 protein KRI1, putative    KRI1                  Q8IB88          #> 10 PF3D7_0905100 nucleoporin NUP221, puta… NUP221                Q8I398          #> 11 PF3D7_0933200 calcyclin-binding protei… N/A                   C0H586          #> 12 PF3D7_1023900 chromodomain-helicase-DN… CHD1                  Q8IJG6          #> 13 PF3D7_1023900 chromodomain-helicase-DN… CHD1                  Q8IJG6          #> 14 PF3D7_1112100 protein kinase, putative  N/A                   Q8IIP2          #> 15 PF3D7_1118500 nucleolar protein 56, pu… NOP56                 Q8III3          #> 16 PF3D7_1228600 merozoite surface protei… MSP9                  Q8I5D2          #> 17 PF3D7_1302700 ATP-dependent RNA helica… N/A                   Q8IET8          #> 18 PF3D7_1309400 HORMA domain protein, pu… N/A                   Q8IEM0          #> 19 PF3D7_1341300 60S ribosomal protein L1… N/A                   C0H5G3          #> 20 PF3D7_1468100 MORC family protein       MORC                  Q8IKF6          #> # ℹ 9 more variables: Interaction <int>, Name <chr>, Experiments <int>, #> #   Category <chr>, Method.Score <dbl>, Annotation.Score <dbl>, #> #   Interaction.Score <dbl>, Confidence <chr>, QueryID <chr>"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"searchipdb","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchIpDb()","title":"Introduction to plasmoRUtils","text":"function enables search InParanoiDB 9 (Persson Sonnhammer 2023) database procure high-confidence orthologs organism interest. input required character vector gene IDs. might see Uniprot ID failing Q2KNU4 Q2KNU5 respective URLs. Uniprot IDs missing InParanoiDB 9 database.","code":"gids <- c(\"PF3D7_0807800\", \"PF3D7_1023900\") searchIpDb(gids) %>% head() #> success Q8IAR6  #> success Q8IJG6 #>   Group ID                 Species    Protein       Gene Name #> 1      826       Perkinsus marinus     C5LD32 Pmar_PMAR029539 #> 2      826       Perkinsus marinus     C5L7W9 Pmar_PMAR009653 #> 3      826   Plasmodium falciparum     Q8IAR6   PF3D7_0807800 #> 4     1814   Plasmodium falciparum     Q8IAR6   PF3D7_0807800 #> 5     1814        Plasmodium vivax     A5KAC7      PVX_088150 #> 6      706 Cyclospora cayetanensis A0A1D3D0U4       cyc_02495 #>   Bitscore info_outline Inparalog Score info_outline Seed Score info_outline #> 1                   126                        1.000                     1.0 #> 2                   126                        0.397                       - #> 3                   126                        1.000                     1.0 #> 4                   515                        1.000                       1 #> 5                   515                        1.000                       1 #> 6                   179                        1.000                       1 #>                                                Description       queryid #> 1   26S Proteasome Non-Atpase Regulatory Subunit, Putative PF3D7_0807800 #> 2   26S Proteasome Non-Atpase Regulatory Subunit, Putative PF3D7_0807800 #> 3        26S Proteasome Regulatory Subunit Rpn10, Putative PF3D7_0807800 #> 4        26S Proteasome Regulatory Subunit Rpn10, Putative PF3D7_0807800 #> 5 26S Proteasome Non-Atpase Regulatory Subunit 4, Putative PF3D7_0807800 #> 6               Ubiquitin Interaction Motif Family Protein PF3D7_0807800"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"searchkipho","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchKipho()","title":"Introduction to plasmoRUtils","text":"functions let fetch Malaria Parasite Kinome-Phosphatome Resource (KiPho) database (Pandey, Kumar, Gupta 2017) without leaving R. organism KiPho includes (see ): Beside organism, user needs specify type=\"kinase\" fetch Kinome \"type=phosphatase\" fetch Phosphatome.","code":"searchKipho(org=\"pf\",type = \"kinase\") #> # A tibble: 148 × 7 #>    `Gene ID`     `Previous ID(s)`      `Product Description`    `Protein Length` #>    <chr>         <chr>                 <chr>                               <int> #>  1 PF3D7_0102600 \"PFA0130c MAL1P1.17\"  serine/threonine protei…              630 #>  2 PF3D7_0103700 \"PFA0185w MAL1P1.23\"  L-seryl-tRNA(Sec) kinas…              535 #>  3 PF3D7_0107600 \"PFA0380w\\tMAL1P2.04\" serine/threonine protei…             1595 #>  4 PF3D7_0110600 \"PFA0515w\\tMAL1P2.32\" phosphatidylinositol-4-…             1710 #>  5 PF3D7_0110900 \"PFA0530c\\tMAL1P2.35\" adenylate kinase-like p…              186 #>  6 PF3D7_0111500 \"PFA0555c\\tMAL1P2.40\" UMP-CMP kinase, putative              371 #>  7 PF3D7_0203100 \"PFB0150c\\tPF02_0030\" protein kinase, putative             2485 #>  8 PF3D7_0211700 \"PFB0520w\\tPF02_0109\" tyrosine kinase-like pr…             1233 #>  9 PF3D7_0213400 \"PFB0605w\\tPF02_0125\" protein kinase 7 (PK7)                343 #> 10 PF3D7_0214600 \"PFB0665w\\tPF02_0137\" serine/threonine protei…             1714 #> # ℹ 138 more rows #> # ℹ 3 more variables: `Conserved Protein Domain Family(Accession No)` <chr>, #> #   `Conserved Protein Domain Family(Name)` <chr>, `Ortholog Group` <chr> searchKipho(org=\"pf\",type = \"phosphatase\") #> # A tibble: 70 × 7 #>    `Gene ID`     `Previous ID(s)`      `Product Description`    `Protein Length` #>    <chr>         <chr>                 <chr>                               <int> #>  1 PF3D7_0107200 \"PFA0350w\\tMAL1P1.64\" carbon catabolite repre…              337 #>  2 PF3D7_0107800 \"PFA0390w\"            double-strand break rep…             1233 #>  3 PF3D7_0303200 \"PFC0150w\"            HAD superfamily protein…             1162 #>  4 PF3D7_0305600 \"PFC0250c\"            AP endonuclease (DNA-[a…              617 #>  5 PF3D7_0309000 \"PFC0380w\"            dual specificity protei…              575 #>  6 PF3D7_0310300 \"PFC0430w\"            phosphoglycerate mutase…             1165 #>  7 PF3D7_0314400 \"PFC0595c\"            serine/threonine protei…              308 #>  8 PF3D7_0319200 \"PFC0850c\"            endonuclease/exonucleas…              906 #>  9 PF3D7_0322100 \"PFC0980c\"            RNA triphosphatase (Prt…              591 #> 10 PF3D7_0410300 \"PFD0505c\\tPFD0510c\"  protein phosphatase PPM…              906 #> # ℹ 60 more rows #> # ℹ 3 more variables: `Conserved Protein Domain Family(Accession_No)` <chr>, #> #   `Conserved Protein Domain Family(Name)` <chr>, `Ortholog Group` <chr>"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"searchmt","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchMT()","title":"Introduction to plasmoRUtils","text":"function enables find Condition Specific Tissue Specific expression gene interest two organisms: Plasmodium falciparum Plasmodium berghi. can also feed output searchMT() companion function quickly get sense stages genes interests highly expressed . Another convenience function malaria.tools database plotAllCondition() function. let create publication ready plots TPM normalized expression values across multiple stages parasite using bulk-rnaseq data malaria.tools. plots similar see database .  Users can also plot stage specific average TPMs well similar plots rendered malaria.tools using plotStageSpecific() function.","code":"geneID <- c(\"PBANKA_0100600\", \"PBANKA_0102900\", \"PF3D7_0102900\") res <- searchMT(geneID = geneID) res  # To get overview of stages your genes of interest are highly expressed in. Commented here as the html plot disrupts the HTML vignette rendering. # res %>% easyPie() # TPM plot (non-interactive) plotAllCondition(geneID = \"PBANKA_0100600\") plotAllCondition(geneID = \"PBANKA_0100600\",plotify = TRUE) ## interactive ## To get the data used for making above plot use returnData argument plotAllCondition(geneID = \"PBANKA_0100600\",returnData = TRUE) %>% head() #>                                     condition     mean     min     max   group #> 1                          Asexual: SRP099925 460.6603 396.042 551.808 Asexual #> 2              Asexual, PbSR-MG KO: SRP109709 403.1830 355.452 442.661 Asexual #> 3               10 hpi, ab libitum: SRP059210 224.5177 206.967 236.912      10 #> 4         10 hpi, diet restriction: SRP059210 228.0705 218.048 238.093      10 #> 5       10 hpi, ab libitum, kin KO: SRP059210 155.0550 155.055 155.055      10 #> 6 10 hpi, diet restriction, kin KO: SRP059210 130.9310 130.931 130.931      10 plotStageSpecific(geneID = \"PBANKA_0100600\",plotify = TRUE)"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"searchmidb","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchMidb()","title":"Introduction to plasmoRUtils","text":"function enables fetch minor-introns information MiDB database bulk. default, intron classes fetched (major-like, major_hybrid, minor-like, minor_hybrid, non-canonical). information minor introns visit MiDB database.","code":"## Let's see what organisms are present in MiDB data(\"midbSpecies\")  df <- searchMidb(\"Toxoplasma gondii ME49\") df %>% head() #> # A tibble: 6 × 43 #>   gene_symbol ensembl_gene_id transcript_key intron_name intron_start intron_end #>   <chr>       <chr>           <chr>          <chr>              <dbl>      <dbl> #> 1 NULL        TGME49_200010   TGME49_200010… Toxoplasma…      2247210    2247553 #> 2 NULL        TGME49_200290   TGME49_200290… Toxoplasma…      6776668    6776934 #> 3 NULL        TGME49_200295   TGME49_200295… Toxoplasma…      6783452    6783939 #> 4 NULL        TGME49_200295   TGME49_200295… Toxoplasma…      6782107    6782402 #> 5 NULL        TGME49_200300   TGME49_200300… Toxoplasma…      6786183    6786931 #> 6 NULL        TGME49_200320   TGME49_200320… Toxoplasma…      6796988    6797499 #> # ℹ 37 more variables: term_nt <chr>, `5ss_seq` <chr>, `3ss_seq` <chr>, #> #   U2_BPS <chr>, U12_BPS <chr>, `5ss_class` <dbl>, `3ss_class` <chr>, #> #   intron_class <chr>, flanking_aa <chr>, intron_aa_position <chr>, #> #   intron_phase <chr>, intron_rank <dbl>, major_5ss_score <dbl>, #> #   major_5ss_LOD <dbl>, major_5ss_LOD_stdev <dbl>, major_5ss_match <dbl>, #> #   major_5ss_match_stdev <dbl>, minor_5ss_score <dbl>, minor_5ss_LOD <dbl>, #> #   minor_5ss_LOD_stdev <dbl>, minor_5ss_match <dbl>, …"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"searchmiip","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchMiip()","title":"Introduction to plasmoRUtils","text":"function enables fetch Protein-protein interaction pairs Plasmodium falciparum respective stage (sexual asexual) interact MIIP database.","code":"searchMiip(c(\"PF3D7_0807800\",\"PF3D7_1023900\")) #> # A tibble: 4 × 5 #>   interactorA   descriptionA                      interactorB descriptionB stage #>   <chr>         <chr>                             <chr>       <chr>        <chr> #> 1 PF3D7_0807800 26S proteasome regulatory subuni… PF3D7_0710… conserved P… game… #> 2 PF3D7_1023900 chromodomain-helicase-DNA-bindin… PF3D7_1014… protein KIC8 game… #> 3 PF3D7_1023900 chromodomain-helicase-DNA-bindin… PF3D7_1138… protein KIC5 ring  #> 4 PF3D7_1335100 merozoite surface protein 7       PF3D7_1023… chromodomai… schi…"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"searchpm","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchPM()","title":"Introduction to plasmoRUtils","text":"Aside searchGSC can also use searchPM() fetch literature information gene IDs interest mentioned. however limit search title abstract keywords. background, makes use easyPubMed() functions get_pubmed_ids articles_to_list transforms output form table easy explore Gene IDs results available shown screen. However, query successful, function also prints exact query can used reproducibility purposes. behavior can turned lot gene IDs using verbose=FALSE.","code":"searchPM(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\")) #> PubMed Query used for PF3D7_0420300 was:  #>  \"Plasmodium falciparum\"[All Fields] AND \"PF3D7_0420300\"[Title/Abstract:~0] AND 2010/01/01:2025/12/31[Date - Publication] #>       pmid                       doi #> 1 39412522       10.7554/eLife.92201 #> 2 30526479 10.1186/s12864-018-5257-x #>                                                                                                                                      title #> 1 A  Plasmodium falciparum  MORC protein complex modulates epigenetic control of gene expression through interaction with heterochromatin. #> 2    Schizont transcriptome variation among clinical isolates and laboratory-adapted clones of the malaria parasite Plasmodium falciparum. #>   year month day       jabbrv      journal        GeneID #> 1 2024    10  16        Elife        eLife PF3D7_0420300 #> 2 2019    03  18 BMC Genomics BMC genomics PF3D7_0420300 \"Plasmodium falciparum\"[All Fields] AND \"PF3D7_0420300\"[Title/Abstract:~0] AND 2010/01/01:2025/12/31[Date - Publication]"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"searchphpl","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchPhPl()","title":"Introduction to plasmoRUtils","text":"convenience function allow users fetch Disruptability Mutant Phenotypes tables gene interest PhenoPlasm database. fetch=1 helps fetch Disruptability fetch=2 helps fetch Mutant Phenotype table. Oftentime, like get summary table like one plotted PhenoPlasm combines Disruptability Mutant Phenotype information. Rather using screen grab get snapshot table, one can now download table Advanced Search button submitting geneIDs interest can feed file easyPhplplottbl() function plasmoRUtils render table phenotype.txt files directly Windows users might face issues saving plots pdf directly case, tables can saved HTML files can converted SVG PDF formats using various online converters combine plots. Note: per Phenotype taxonomy Phenoplasm, database uses “D” Difference wild-type Egress defect confusing difficult resolve programmatically. example PF3D7_1337800 “D S D” “Gene Asexual”. requested database maintainer fix , please watch borderline cases like .","code":"searchPhPl(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\",\"PF3D7_0523800\"), org=\"pf\") %>% head() #>             Species Disruptability                          Reference #> 1 P. falciparum 3D7     Refractory USF piggyBac screen (Insert. mut.) #> 2 P. falciparum 3D7     Refractory USF piggyBac screen (Insert. mut.) #> 3 P. falciparum 3D7     Refractory       354041168 ko attempts failed #>                                 Submitter      QueryGID #> 1                     USF PiggyBac Screen PF3D7_0621000 #> 2                     USF PiggyBac Screen PF3D7_0523800 #> 3 Theo Sanderson, Francis Crick Institute PF3D7_0523800 searchPhPl(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\",\"PF3D7_0523800\"), org=\"pf\", fetch=2) %>% head() #> # A tibble: 1 × 6 #>   Species           Stage   Phenotype               Reference Submitter QueryGID #>   <chr>             <chr>   <chr>                   <chr>     <chr>     <chr>    #> 1 P. falciparum 3D7 Asexual Difference from wild-t… \"PMID 39… Paul Sig… PF3D7_0… # Read the file df <- read.csv(\"phenotype.txt\", skip = 2, sep = \"\\t\") %>% dplyr::select(-3, -4) %>% #remove the empty cols: GeneLocalisation and OrthologLocalisation dplyr::rename_with(~ gsub(\"Sprozoite\", \"Sporozoite\", .x)) #Correct the colnames  easyPhplplottbl(df)  ## Or you can pass the file path directly easyPhplplottbl(\"phenotype.txt\") #Load sample data (subset of genes from phenotype.txt file above) data(pf3d7PhplTable) easyPhplplottbl(pf3d7PhplTable)"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"searchtedconsensus","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchTedConsensus()","title":"Introduction to plasmoRUtils","text":"function helps users fetch domain information Encyclopedia Domains database given set uniprot IDs. Usually table contains numeric CATH labels difficult comprehend user click one one find domain name. enable conversion CATH labels description using returnCATHdesc=TRUE. try scrap labels given CATH label CATH database wherever possible. example , C0H4D0 CATH label 3.30.70.2380. superfamily doesn’t name. Besides, sometimes instead Superfamily CATH labels, TED might use CATH-Gene3D Hierarchy. description returned cases.","code":"searchTedConsensus(c(\"Q7K6A1\",\"Q8IAP8\",\"C0H4D0\",\"C6KT90\",\"Q8IBJ7\"), returnCATHdesc=FALSE) #>                        ted_id uniprot_acc                       md5_domain #> 1 AF-Q7K6A1-F1-model_v4_TED01      Q7K6A1 b99e920f0ded31aa96af0ef9be1338f4 #> 2 AF-C0H4D0-F1-model_v4_TED01      C0H4D0 cd912dcbbb5d070cbb254c0a88278fe4 #> 3 AF-C6KT90-F1-model_v4_TED02      C6KT90 70d20592d9f682bff23dc6188f318244 #> 4 AF-C6KT90-F1-model_v4_TED01      C6KT90 7cc174ebefe723733b6e63508fd23a9e #> 5 AF-Q8IBJ7-F1-model_v4_TED01      Q8IBJ7 71697d50571d5fe2331a13ff16503478 #>   consensus_level chopping nres_domain num_segments   plddt #> 1            high    6-376         371            1 97.1740 #> 2          medium   55-153          99            1 88.9028 #> 3          medium  322-382          61            1 45.3118 #> 4          medium  172-203          32            1 48.8553 #> 5          medium    54-88          35            1 87.3500 #>   num_helix_strand_turn num_helix num_strand num_helix_strand num_turn #> 1                    60        16          8               24       35 #> 2                    15         5          4                9        6 #> 3                     3         3          0                3        0 #> 4                     2         1          0                1        1 #> 5                     5         0          3                3        2 #>   proteome_id   cath_label cath_assignment_level cath_assignment_method #> 1       36329  3.40.800.20                     H               foldseek #> 2       36329 3.30.70.2380                     H               foldseek #> 3       36329     4.10.860                     T              foldclass #> 4       36329       1.20.5                     T              foldclass #> 5       36329            -                     -                      - #>   packing_density norm_rg tax_common_name                 tax_scientific_name #> 1          13.064   0.298                 Plasmodium falciparum (isolate 3D7) #> 2          12.537   0.306                 Plasmodium falciparum (isolate 3D7) #> 3           9.900   0.374                 Plasmodium falciparum (isolate 3D7) #> 4           8.900   0.403                 Plasmodium falciparum (isolate 3D7) #> 5           9.833   0.370                 Plasmodium falciparum (isolate 3D7) #>                                                                                                                                                       tax_lineage #> 1 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 2 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 3 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 4 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 5 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum  searchTedConsensus(c(\"Q7K6A1\",\"Q8IAP8\",\"C0H4D0\",\"C6KT90\",\"Q8IBJ7\"), returnCATHdesc=TRUE) #>                        ted_id uniprot_acc                       md5_domain #> 1 AF-Q7K6A1-F1-model_v4_TED01      Q7K6A1 b99e920f0ded31aa96af0ef9be1338f4 #> 2 AF-C0H4D0-F1-model_v4_TED01      C0H4D0 cd912dcbbb5d070cbb254c0a88278fe4 #> 3 AF-C6KT90-F1-model_v4_TED02      C6KT90 70d20592d9f682bff23dc6188f318244 #> 4 AF-C6KT90-F1-model_v4_TED01      C6KT90 7cc174ebefe723733b6e63508fd23a9e #> 5 AF-Q8IBJ7-F1-model_v4_TED01      Q8IBJ7 71697d50571d5fe2331a13ff16503478 #>   consensus_level chopping nres_domain num_segments   plddt #> 1            high    6-376         371            1 97.1740 #> 2          medium   55-153          99            1 88.9028 #> 3          medium  322-382          61            1 45.3118 #> 4          medium  172-203          32            1 48.8553 #> 5          medium    54-88          35            1 87.3500 #>   num_helix_strand_turn num_helix num_strand num_helix_strand num_turn #> 1                    60        16          8               24       35 #> 2                    15         5          4                9        6 #> 3                     3         3          0                3        0 #> 4                     2         1          0                1        1 #> 5                     5         0          3                3        2 #>   proteome_id   cath_label cath_assignment_level cath_assignment_method #> 1       36329  3.40.800.20                     H               foldseek #> 2       36329 3.30.70.2380                     H               foldseek #> 3       36329     4.10.860                     T              foldclass #> 4       36329       1.20.5                     T              foldclass #> 5       36329            -                     -                      - #>   packing_density norm_rg tax_common_name                 tax_scientific_name #> 1          13.064   0.298                 Plasmodium falciparum (isolate 3D7) #> 2          12.537   0.306                 Plasmodium falciparum (isolate 3D7) #> 3           9.900   0.374                 Plasmodium falciparum (isolate 3D7) #> 4           8.900   0.403                 Plasmodium falciparum (isolate 3D7) #> 5           9.833   0.370                 Plasmodium falciparum (isolate 3D7) #>                                                                                                                                                       tax_lineage #> 1 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 2 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 3 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 4 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 5 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #>              cath_label_desc #> 1 Histone deacetylase domain #> 2                            #> 3                            #> 4                            #> 5                       NULL"},{"path":"/articles/Introduction_to_plasmoRUtils.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Introduction to plasmoRUtils","text":"","code":"utils::sessionInfo() #> R version 4.4.1 (2024-06-14 ucrt) #> Platform: x86_64-w64-mingw32/x64 #> Running under: Windows 11 x64 (build 26100) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_India.utf8  LC_CTYPE=English_India.utf8    #> [3] LC_MONETARY=English_India.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=English_India.utf8     #>  #> time zone: Asia/Riyadh #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] plyr_1.8.9          dplyr_1.1.4         plasmoRUtils_1.0.0  #> [4] rlang_1.1.6         readr_2.1.5         janitor_2.2.1       #> [7] randomcoloR_1.1.0.1 BiocStyle_2.32.1    #>  #> loaded via a namespace (and not attached): #>   [1] IRanges_2.38.1              dichromat_2.0-0.1           #>   [3] vroom_1.6.5                 progress_1.2.3              #>   [5] vsn_3.72.0                  nnet_7.3-19                 #>   [7] Biostrings_2.72.1           vctrs_0.6.5                 #>   [9] digest_0.6.37               png_0.1-8                   #>  [11] proxy_0.4-27                MSnbase_2.30.1              #>  [13] echarts4r_0.4.5.9000        parallelly_1.44.0           #>  [15] MASS_7.3-61                 pkgdown_2.1.3               #>  [17] reshape2_1.4.4              httpuv_1.6.16               #>  [19] foreach_1.5.2               BiocGenerics_0.50.0         #>  [21] withr_3.0.2                 xfun_0.52                   #>  [23] ggpubr_0.6.0                survival_3.8-3              #>  [25] memoise_2.0.1               hexbin_1.28.5               #>  [27] ggsci_3.2.0                 mixtools_2.0.0.1            #>  [29] systemfonts_1.2.3           ragg_1.4.0                  #>  [31] gtools_3.9.5                easyPubMed_2.13             #>  [33] V8_6.0.3                    Formula_1.2-5               #>  [35] prettyunits_1.2.0           KEGGREST_1.44.1             #>  [37] promises_1.3.3              httr_1.4.7                  #>  [39] rstatix_0.7.2               restfulr_0.0.15             #>  [41] globals_0.18.0              ps_1.9.1                    #>  [43] rstudioapi_0.17.1           UCSC.utils_1.0.0            #>  [45] generics_0.1.4              processx_3.8.6              #>  [47] curl_6.2.3                  ncdf4_1.24                  #>  [49] S4Vectors_0.42.1            zlibbioc_1.50.0             #>  [51] ScaledMatrix_1.12.0         randomForest_4.7-1.2        #>  [53] bio3d_2.4-5                 GenomeInfoDbData_1.2.12     #>  [55] SparseArray_1.4.8           xtable_1.8-4                #>  [57] stringr_1.5.1               desc_1.4.3                  #>  [59] doParallel_1.0.17           evaluate_1.0.3              #>  [61] S4Arrays_1.4.1              BiocFileCache_2.12.0        #>  [63] preprocessCore_1.66.0       hms_1.1.3                   #>  [65] GenomicRanges_1.56.2        bookdown_0.43               #>  [67] irlba_2.3.5.1               colorspace_2.1-1            #>  [69] filelock_1.0.3              magrittr_2.0.3              #>  [71] snakecase_0.11.1            later_1.4.2                 #>  [73] viridis_0.6.5               lattice_0.22-6              #>  [75] MsCoreUtils_1.16.1          future.apply_1.11.3         #>  [77] SparseM_1.84-2              XML_3.99-0.18               #>  [79] scuttle_1.14.0              matrixStats_1.5.0           #>  [81] class_7.3-22                pillar_1.10.2               #>  [83] nlme_3.1-166                iterators_1.0.14            #>  [85] compiler_4.4.1              beachmat_2.20.0             #>  [87] stringi_1.8.7               gower_1.0.2                 #>  [89] SummarizedExperiment_1.34.0 dendextend_1.19.0           #>  [91] lubridate_1.9.4             GenomicAlignments_1.40.0    #>  [93] drawProteins_1.24.0         crayon_1.5.3                #>  [95] abind_1.4-8                 BiocIO_1.14.0               #>  [97] bit_4.6.0                   chromote_0.5.1              #>  [99] pcaMethods_1.96.0           codetools_0.2-20            #> [101] textshaping_1.0.1           recipes_1.3.1               #> [103] BiocSingular_1.20.0         MLInterfaces_1.84.0         #> [105] crosstalk_1.2.1             bslib_0.9.0                 #> [107] e1071_1.7-16                plotly_4.10.4               #> [109] LaplacesDemon_16.1.6        mime_0.13                   #> [111] MultiAssayExperiment_1.30.3 splines_4.4.1               #> [113] Rcpp_1.0.14                 dbplyr_2.5.0                #> [115] sparseMatrixStats_1.16.0    knitr_1.50                  #> [117] blob_1.2.4                  utf8_1.2.5                  #> [119] clue_0.3-66                 mzR_2.38.0                  #> [121] AnnotationFilter_1.28.0     fs_1.6.6                    #> [123] QFeatures_1.14.2            listenv_0.9.1               #> [125] mzID_1.42.0                 DelayedMatrixStats_1.26.0   #> [127] ggsignif_0.6.4              tibble_3.2.1                #> [129] Matrix_1.7-1                statmod_1.5.0               #> [131] tzdb_0.5.0                  lpSolve_5.6.23              #> [133] pkgconfig_2.0.3             tools_4.4.1                 #> [135] cachem_1.1.0                RSQLite_2.4.0               #> [137] viridisLite_0.4.2           rvest_1.0.4                 #> [139] DBI_1.2.3                   impute_1.78.0               #> [141] fastmap_1.2.0               rmarkdown_2.29              #> [143] scales_1.4.0                grid_4.4.1                  #> [145] gt_1.0.0                    Rsamtools_2.20.0            #> [147] broom_1.0.8                 sass_0.4.10                 #> [149] coda_0.19-4.1               FNN_1.1.4.1                 #> [151] BiocManager_1.30.25         graph_1.82.0                #> [153] carData_3.0-5               selectr_0.4-2               #> [155] SingleR_2.6.0               rpart_4.1.23                #> [157] farver_2.1.2                yaml_2.3.10                 #> [159] AnnotationForge_1.46.0      MatrixGenerics_1.16.0       #> [161] rtracklayer_1.64.0          cli_3.6.5                   #> [163] purrr_1.0.4                 stats4_4.4.1                #> [165] txdbmaker_1.0.1             lifecycle_1.0.4             #> [167] caret_7.0-1                 Biobase_2.64.0              #> [169] mvtnorm_1.3-3               lava_1.8.1                  #> [171] kernlab_0.9-33              backports_1.5.0             #> [173] BiocParallel_1.38.0         annotate_1.82.0             #> [175] timechange_0.3.0            gtable_0.3.6                #> [177] rjson_0.2.23                parallel_4.4.1              #> [179] pROC_1.18.5                 limma_3.60.6                #> [181] jsonlite_2.0.0              bitops_1.0-9                #> [183] ggplot2_3.5.2               bit64_4.6.0-1               #> [185] Rtsne_0.17                  pRoloc_1.44.1               #> [187] jquerylib_0.1.4             segmented_2.1-4             #> [189] timeDate_4041.110           lazyeval_0.2.2              #> [191] shiny_1.10.0                htmltools_0.5.8.1           #> [193] affy_1.82.0                 GO.db_3.19.1                #> [195] rappdirs_0.3.3              glue_1.8.0                  #> [197] httr2_1.1.2                 XVector_0.44.0              #> [199] RCurl_1.98-1.17             MALDIquant_1.22.3           #> [201] mclust_6.1.1                gridExtra_2.3               #> [203] igraph_2.1.4                R6_2.6.1                    #> [205] tidyr_1.3.1                 SingleCellExperiment_1.26.0 #> [207] labeling_0.4.3              GenomicFeatures_1.56.0      #> [209] cluster_2.1.8               GenomeInfoDb_1.40.1         #> [211] ipred_0.9-15                DelayedArray_0.30.1         #> [213] tidyselect_1.2.1            ProtGenerics_1.36.0         #> [215] sampling_2.10               xml2_1.3.8                  #> [217] car_3.1-3                   AnnotationDbi_1.66.0        #> [219] future_1.49.0               ModelMetrics_1.2.2.2        #> [221] rsvd_1.0.5                  affyio_1.74.0               #> [223] topGO_2.56.0                data.table_1.17.4           #> [225] websocket_1.4.4             mgsub_1.7.3                 #> [227] htmlwidgets_1.6.4           RColorBrewer_1.1-3          #> [229] biomaRt_2.60.1              hardhat_1.4.1               #> [231] prodlim_2025.04.28          PSMatch_1.8.0"},{"path":[]},{"path":"/articles/Miscellaneous_function.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Other useful functions","text":"search functions, plasmoRUtils package offers various functions routinely needed performing bioinformatics analysis. usage discussed .","code":"# Load package and some other useful packages by using suppressPackageStartupMessages(   suppressWarnings({     library(plasmoRUtils)     library(dplyr)     library(plyr)     library(tibble)}))"},{"path":"/articles/Miscellaneous_function.html","id":"making-orgdb-and-txdb-objects","dir":"Articles","previous_headings":"Introduction","what":"Making OrgDb and TxDb objects","title":"Other useful functions","text":"non-model organism, using R packages clusterProfiler enrichment analysis requires org.db packages. Unfortunately, requires ability understand use AnnotationDbi package. make development packages quickly, wrote wrapper function instantly creates TAR file can used shared user time. function create org.db tar file can installed loaded used clusterProfiler. Similarly, users want make TxDb object R use R packages gDNAx used access genomic DNA contamination, can easily using easyTxDbmaker() function.","code":"## List organism you are interested in making org.db package from VEuPathDB. ## Use the links from PlasmoDB directly or provide locally saved GFF and GAF files.  ## Get taxonomy ID using listVeupathdb(c(\"primary_key\",\"ncbi_tax_id\"))  easymakeOrgdb(   gff =     \"https://plasmodb.org/common/downloads/release-68/Pfalciparum3D7/gff/data/PlasmoDB-68_Pfalciparum3D7.gff\",   gaf =     \"https://plasmodb.org/common/downloads/release-68/Pfalciparum3D7/gaf/PlasmoDB-68_Pfalciparum3D7_Curated_GO.gaf.gz\",   out.dir = \".\",   taxid = 36329,   genus = \"Plasmodium\",   sp = \"falciparum3D7\",   version = 0.1,   verbose = FALSE,   maintainer = \"John doe <johndoe@gmail.com>\" ## Your name if you are maintaining it. )  ## Once the package is ready, one can use clusterProfiler as follows  library(clusterProfiler) library(org.Pfalciparum3D7.eg.db)   ego <- enrichGO(gene          = genes,                 universe      = bkg_genes,                 OrgDb         = org.Pfalciparum3D7.eg.db,                 keyType = \"GID\",                 ont           = \"BP\",                 minGSSize=3,                 pAdjustMethod = \"BH\",                 pvalueCutoff  = 0.05,                 qvalueCutoff  = 0.05,         readable      = FALSE) txdb<-easyTxDbmaker(  gff=\"https://toxodb.org/common/downloads/release-68/TgondiiME49/gff/data/ToxoDB-68_TgondiiME49.gff\",  fasta=\"https://toxodb.org/common/downloads/release-68/TgondiiME49/fasta/data/ToxoDB-68_TgondiiME49_Genome.fasta\",  abbr=\"TgondiiME49\",  taxid=508771,org = \"Toxoplasma gondii ME49\",  db = \"ToxoDB release 68\")"},{"path":"/articles/Miscellaneous_function.html","id":"other-easy-functions","dir":"Articles","previous_headings":"Introduction","what":"Other easy functions","title":"Other useful functions","text":"Users also provided easy functions wrapper functions around routinely used analyze bioinformatics data.","code":""},{"path":"/articles/Miscellaneous_function.html","id":"tpm-normalization-and-visualization","dir":"Articles","previous_headings":"Introduction > Other easy functions","what":"TPM normalization and visualization","title":"Other useful functions","text":"section see can calculate effective gene lengths GFF file followed TPM normalization visualize resulting normalized matrix. functions provided since RNASeq data present VEuPathDb TPM normalized therefore make easy plot database procured values alongside samples. function returns dataframe can fed easyTPM() function alongside count matrix. function also adds effective length column end people can find easy convert values raw counts. also helpful since exon-intron boundaries always evolving new data-sets become available.  can also plot normalized expression data line plot cluster genes similar pattern expression. demonstrate use subset genes (Subudhi et al. 2020) time series dataset. perform TPM normalization, followed log transformation eventually use Z-scores visualization.  easyExpPlot() can used plot expression values obtained kind applied normalization transformation.","code":"# To calculate the effective length of the genes you can use the following function baseurl <- \"https://plasmodb.org/common/downloads/release-68/\" getEffLen(paste0(baseurl, \"Pfalciparum3D7/gff/data/PlasmoDB-68_Pfalciparum3D7.gff\")) %>% head() #> # A tibble: 6 × 2 #>   GeneID        Length #>   <chr>          <dbl> #> 1 PF3D7_0100100   6492 #> 2 PF3D7_0100200    996 #> 3 PF3D7_0100300   3984 #> 4 PF3D7_0100400   1119 #> 5 PF3D7_0100500    112 #> 6 PF3D7_0100600   1080 library(ggplot2) ## Generating dummy effective length for quick demonstration gene_info <- data.frame(GeneID = c(\"PF3D7_0100100\", \"PF3D7_0100200\", \"PF3D7_0100300\"), Length = c(6492, 996, 3984))  ## Making a dummy count matrix count_matrix <- matrix(c(10, 20, 30, 40, 50, 60),                        nrow = 3, ncol = 2,                        dimnames = list(c(\"PF3D7_0100100\", \"PF3D7_0100200\", \"PF3D7_0100300\"), c(\"sample1\", \"sample2\"))                        )  ## TPM normalization test <- easyTPM(count_matrix, gene_info) %>% rownames_to_column(var = \"GeneID\")  ## TPM visualization as a bubble plot df <- reshape2::melt(test[,-ncol(test)],na.rm = T) easyExpPlot(df,x=\"variable\",y=\"GeneID\",value=\"value\", type = \"bubble\")+labs(x=\"Samples\",y=\"Gene IDs\") data(\"subudhi2020\") count_matrix <- subudhi2020@assays@data$counts baseurl <- \"https://plasmodb.org/common/downloads/release-68/\" gene_info <- getEffLen(paste0(baseurl,\"Pfalciparum3D7/gff/data/PlasmoDB-68_Pfalciparum3D7.gff\"))  normalised <- easyTPM(count_matrix, gene_info)   ## Since normalized matrix have effective gene length column at the end logTransformed = log2(normalised[,-ncol(normalised)] + 1)  ## Get z-scores z.mat <- t(scale(t(logTransformed), scale=TRUE, center=TRUE)) %>% as.data.frame() %>% rownames_to_column(var = \"GeneID\")  ## Subsetting few genes of interest gois <- c(\"PF3D7_1476300\",\"PF3D7_0220800\",\"PF3D7_0936200\",\"PF3D7_0402200\",\"PF3D7_1401600\",\"PF3D7_0831600\",\"PF3D7_0204100\",\"PF3D7_1458300\",\"PF3D7_0935800\",\"PF3D7_0929400\",\"PF3D7_1439000\",\"PF3D7_0905400\",\"PF3D7_1334600\",\"PF3D7_1121300\",\"PF3D7_0302500\",\"PF3D7_1232800\",\"PF3D7_0310400\",\"PF3D7_1001600\")  ## Transforming data frame for visualisation df <- z.mat %>%    subset(.,GeneID %in% gois) %>%    reshape2::melt(.,na.rm = T)  easyExpPlot(df,x=\"variable\",y=\"value\",value=\"GeneID\")+   labs(y=\"Z-scores\",x=\"Samples\")"},{"path":"/articles/Miscellaneous_function.html","id":"support-for-noiseq-readdata-function-for-non-model-organism","dir":"Articles","previous_headings":"Introduction > Other easy functions","what":"Support for NOISeq readData function for non-model organism","title":"Other useful functions","text":"using NOISeq QC, users often required provide various information alongside count matrices. information includes biotype, chromosome, gc content, length features etc. arguments listed optional required NOISeq package making QC plots. enable users get information reference FASTA file GFF file used user alignment, wrote easyNOISeqAnnot() function enable users quickly get information GTF/GFF file FASTA file return data frame. can provided URL locally stored files. can now pass data frame contents NOISeq::readData() function follows.","code":"gene_info <- easyNOISeqAnnot(  gff=\"https://toxodb.org/common/downloads/release-68/EpraecoxHoughton/gff/data/ToxoDB-68_EpraecoxHoughton.gff\",  fasta = \"https://toxodb.org/common/downloads/release-68/EpraecoxHoughton/fasta/data/ToxoDB-68_EpraecoxHoughton_Genome.fasta\")  gene_info %>% head() #>                 gene_id   gene_biotype        gc #> EPH_0000010 EPH_0000010 protein_coding 0.5329587 #> EPH_0000020 EPH_0000020 protein_coding 0.4712575 #> EPH_0000030 EPH_0000030 protein_coding 0.5618822 #> EPH_0000040 EPH_0000040 protein_coding 0.5624426 #> EPH_0000050 EPH_0000050 protein_coding 0.4910354 #> EPH_0000060 EPH_0000060 protein_coding 0.5811796 #>                                                                    desc length #> EPH_0000010 Helicase associated domain HA2 containing protein , related   6584 #> EPH_0000020                      DNA polymerase alpha subunit, putative   5010 #> EPH_0000030                                        hypothetical protein   2529 #> EPH_0000040                             hypothetical protein, conserved   6534 #> EPH_0000050                             hypothetical protein, conserved   4462 #> EPH_0000060                             hypothetical protein, conserved   1509 #>             starts  ends      chr #> EPH_0000010   2602  9185 HG688746 #> EPH_0000020  50573 55582 HG688746 #> EPH_0000030    101  2629 HG695046 #> EPH_0000040  19822 26355 HG697798 #> EPH_0000050  30217 34678 HG697798 #> EPH_0000060  36161 37669 HG697798 data_NOISEQ <- NOISeq::readData(data = counts,                         length=setNames(gene_info$length, gene_info$gene_id),                         gc=setNames(gene_info$gc, gene_info$gene_id),                         biotype=setNames(gene_info$gene_biotype, gene_info$gene_id),                         chromosome = gene_info[,c(\"chr\",\"starts\",\"ends\")],                         factors = meta)"},{"path":"/articles/Miscellaneous_function.html","id":"check-synchronization-of-bulk-rnaseq-samples-using-easylabeltransfer","dir":"Articles","previous_headings":"Introduction > Other easy functions","what":"Check synchronization of Bulk RNASeq samples using easyLabelTransfer()","title":"Other useful functions","text":"easyLabelTransfer wrapper function written around SingleR SingleR() function quickly use count matrices Bulk/ Single cell Reference data sets check synchronization (time point stage) Parasite Bulk RNASeq samples can used QC purposes. , demonstration purpose, use single cell RNASeq data Malaria Cell Atlas use (Subudhi et al. 2020) Bulk time-series dataset transfer labels see distribution cells across different time points. data sets provided package includes: Time course Microarray dataset (Painter et al. 2018): data(\"painter2018\") Time course Bulk RNASeq (Single-end) (Toenhake et al. 2018): data(\"toenhake2018\") Reanalyzed scRNAseq *T. gondii* data (Lou et al. 2024): data(\"gubbels2024\") Reanalyzed scRNAseq *T. gondii* data (Xue et al. 2020): data(\"boothroyd2020\") Next, Malaria cell atlas (MCA) database comprising single cell data sets can accessed using following functions. listMCA() function enables filter list scRNASeq data sets data download links available. User can use function view table metadata dataset download datasets recursively rather manually downloading single dataset time. easyMCA() enables users import count matrix metadata directly R environment directly. Written mainly pipeline development. Now, lets use function enlisted alongside easyLabelTransfer() shown . Note: output obtained easyLabelTransfer() function DFrame object can fed SingleR functions visual purposes.  can see cells time points underrepresented Malaria Cell Atlas.","code":"library(SingleR) set.seed(12458) ## Fetching the URL mcalist <- listMCA() data(\"subudhi2020\") ## reference dataset  ## Using this reference set url <- \"https://www.malariacellatlas.org/downloads/pf-ch10x-set4-biorxiv.zip\"  raw_counts <- easyMCA(url,type = \"raw\") rownames(raw_counts) <- gsub(\"-\",\"_\",rownames(raw_counts)) meta <- easyMCA(url,type=\"data\")  ## Retaining only Asexual stage cells and Lab isolates. meta <- subset(meta, meta$STAGE_LR %in% c(\"ring\",\"trophozoite\",\"schizont\") & DAY != \"Field\") raw_counts <- raw_counts[,rownames(meta)]  ## Filtering away field isolates and asexual stage cells  labels <- easyLabelTransfer(queryCounts = raw_counts,                             refCounts = subudhi2020@assays@data$counts, referenceMeta = subudhi2020@colData, labelCol = \"timetag\", isrefBulk = TRUE)  table(labels$pruned.labels) #>  #> 10hpi 12hpi 14hpi 16hpi 18hpi 20hpi 22hpi 24hpi 26hpi 28hpi  2hpi 30hpi 32hpi  #>   691   622   631   368   685   154  2146    58  3047    22  2498  3833    15  #> 34hpi 36hpi 38hpi 40hpi 42hpi 44hpi  4hpi  6hpi  8hpi  #>  2793     7   373  1973  1590  2546  2223   829  1388  plotScoreHeatmap(labels)"},{"path":"/articles/Miscellaneous_function.html","id":"go-enrichment-using-easytopgo","dir":"Articles","previous_headings":"Introduction > Other easy functions","what":"GO Enrichment using easytopGO()","title":"Other useful functions","text":"VEuPathDB constituent database allow users perform GO Enrichment analysis. However, option set background genes default genes used. ideal approach. Moreover, since Gene Ontologies curated using different pipelines different enrichment providers, results might differ just based source Ontologies. Similarly Ontology data might available databases BioMart like use custom GAF file Users parasite domain might wish use GAF files provided VEuPathDB constituent database specific genome assembly per hypothesis. enable users , GO enrichment analysis can performed easily quickly using easytopGO() wrapper function. function requires users provide named numeric vector, names Ensembl Gene IDs numeric vector adjusted p-values. Users can also supply genes used background using bkggset argument. Finally users can use gaf argument supply .gaf file obtained VEuPathDBs constituent database interest. well known organisms, Biomart Ontologies can also used. case user provide mart argument figure key emsembl gene IDs . However, many times parasite assemblies used reference Ensembl might match parasite assembly used VEuPathDB. cases might mismatches gene IDs (see one issue ). can also change category argument specify GO category want test enrichment . Since parasites, sub-cellular localization Molecular function information sparingly available, “BP” set default. Finally, can also use ORA results obtained VEuPathDBs input easytopGO().  easyGOPlot() adapted modified version provided Kevin Blighe Biostars. can use limit argument limit number terms plotted.","code":"# Making a numeric vector of padjusted values gois <- c(\"PF3D7_0102200\",\"PF3D7_0207400\",\"PF3D7_0207500\",\"PF3D7_0207600\",\"PF3D7_0207700\",\"PF3D7_0207800\",\"PF3D7_0207900\",\"PF3D7_0208000\",\"PF3D7_0404700\",\"PF3D7_0501500\",\"PF3D7_0502400\",\"PF3D7_0618000\",\"PF3D7_0731800\",\"PF3D7_0930300\",\"PF3D7_1116000\",\"PF3D7_1247800\",\"PF3D7_1334700\")   p_values <- c(1.767929e-49,3.886063e-148,6.459285e-269,0.000000e+00,6.842121e-132, 5.282318e-178,1.140221e-224,1.625665e-100,6.177129e-08,1.484155e-03,2.789648e-10,2.300720e-12,7.450697e-30,3.417972e-89,4.846689e-73,1.207966e-11,4.173777e-51) names(p_values) <- gois  ## Using all genes captured as a background  background.gset <- rownames(subudhi2020@assays@data$counts) baseurl <- \"https://plasmodb.org/common/downloads/Current_Release/\" url<-paste0(baseurl,\"Pfalciparum3D7/gaf/PlasmoDB-68_Pfalciparum3D7_GO.gaf.gz\")  ## Performing ORA gores<-easytopGO(geneID = p_values,useGAF = TRUE,useBiomart = FALSE,gaf=url, bkggset = background.gset, category = \"BP\", stats = \"ks\")  ## Plotting the results.  easyGOPlot(gores, title = \"GO Biological processes\", limit = 20, sortby = \"ks\")"},{"path":"/articles/Miscellaneous_function.html","id":"screening-the-signal-peptides-from-pdbs","dir":"Articles","previous_headings":"Introduction > Other easy functions","what":"Screening the Signal Peptides from PDBs","title":"Other useful functions","text":"also offer convenient function, easyAF2Signal(), diagnose potential false-positive signal peptides using SignalP predictions VEuPathDB database AlphaFold2 structures, based observational study conducted (Sanaboyana Elcock 2024). authors found true N-terminal signal peptides (~24-24 amino acids) typically disengaged protein body lack atomic contacts, AlphaFold2 attempts model similar way. easyAF2Signal() R equivalent slight modifications Fortran code provided authors, reports additional information, number residues remaining pLDDT filtering. modification , signal peptide residues low pLDDT scores filtered , residues remain calculate contacts protein body, resulting zero contacts. give false impression first 25 amino acids signal peptides, confirmed, zero-contact observed due residues remaining filtering, signal peptide disengaged protein body. example , see signal peptide low mean pLDDT score therefore residues left post filtering bad quality residues leading zero residue-residue counts res_res_conts. Thus can’t say sure PDB hand signal peptide .","code":"easyAF2Signal(\"https://alphafold.ebi.ac.uk/files/AF-Q9TY95-F1-model_v4.pdb\") #>                    Name length_signalpeptide length_protein #> 1 AF-Q9TY95-F1-model_v4                   25            997 #>   postbfacFiltered_signalP_res medianSignalP_bfac clevagesite_bfac #> 1                            0              35.36            32.71 #>   postbfacFiltered_rest_res medianRest_bfac res_res_conts atm_atm_conts #> 1                       308           81.67             0             0"},{"path":"/articles/Miscellaneous_function.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Other useful functions","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14 ucrt) #> Platform: x86_64-w64-mingw32/x64 #> Running under: Windows 11 x64 (build 26100) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_India.utf8  LC_CTYPE=English_India.utf8    #> [3] LC_MONETARY=English_India.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=English_India.utf8     #>  #> time zone: Asia/Riyadh #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] topGO_2.56.0                SparseM_1.84-2              #>  [3] GO.db_3.19.1                AnnotationDbi_1.66.0        #>  [5] graph_1.82.0                SingleR_2.6.0               #>  [7] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [9] GenomicRanges_1.56.2        GenomeInfoDb_1.40.1         #> [11] IRanges_2.38.1              S4Vectors_0.42.1            #> [13] BiocGenerics_0.50.0         MatrixGenerics_1.16.0       #> [15] matrixStats_1.5.0           ggplot2_3.5.2               #> [17] tibble_3.2.1                plyr_1.8.9                  #> [19] dplyr_1.1.4                 plasmoRUtils_1.0.0          #> [21] rlang_1.1.6                 readr_2.1.5                 #> [23] janitor_2.2.1               randomcoloR_1.1.0.1         #> [25] BiocStyle_2.32.1            #>  #> loaded via a namespace (and not attached): #>   [1] dichromat_2.0-0.1           vroom_1.6.5                 #>   [3] progress_1.2.3              vsn_3.72.0                  #>   [5] nnet_7.3-19                 Biostrings_2.72.1           #>   [7] vctrs_0.6.5                 digest_0.6.37               #>   [9] png_0.1-8                   proxy_0.4-27                #>  [11] MSnbase_2.30.1              echarts4r_0.4.5.9000        #>  [13] parallelly_1.44.0           MASS_7.3-61                 #>  [15] pkgdown_2.1.3               reshape2_1.4.4              #>  [17] httpuv_1.6.16               foreach_1.5.2               #>  [19] withr_3.0.2                 xfun_0.52                   #>  [21] ggpubr_0.6.0                survival_3.8-3              #>  [23] memoise_2.0.1               hexbin_1.28.5               #>  [25] ggsci_3.2.0                 mixtools_2.0.0.1            #>  [27] systemfonts_1.2.3           ragg_1.4.0                  #>  [29] gtools_3.9.5                easyPubMed_2.13             #>  [31] V8_6.0.3                    Formula_1.2-5               #>  [33] prettyunits_1.2.0           KEGGREST_1.44.1             #>  [35] promises_1.3.3              httr_1.4.7                  #>  [37] rstatix_0.7.2               restfulr_0.0.15             #>  [39] globals_0.18.0              ps_1.9.1                    #>  [41] rstudioapi_0.17.1           UCSC.utils_1.0.0            #>  [43] generics_0.1.4              processx_3.8.6              #>  [45] curl_6.2.3                  ncdf4_1.24                  #>  [47] zlibbioc_1.50.0             ScaledMatrix_1.12.0         #>  [49] randomForest_4.7-1.2        bio3d_2.4-5                 #>  [51] GenomeInfoDbData_1.2.12     SparseArray_1.4.8           #>  [53] xtable_1.8-4                stringr_1.5.1               #>  [55] desc_1.4.3                  doParallel_1.0.17           #>  [57] evaluate_1.0.3              S4Arrays_1.4.1              #>  [59] BiocFileCache_2.12.0        preprocessCore_1.66.0       #>  [61] hms_1.1.3                   bookdown_0.43               #>  [63] irlba_2.3.5.1               colorspace_2.1-1            #>  [65] filelock_1.0.3              magrittr_2.0.3              #>  [67] snakecase_0.11.1            later_1.4.2                 #>  [69] viridis_0.6.5               lattice_0.22-6              #>  [71] MsCoreUtils_1.16.1          future.apply_1.11.3         #>  [73] XML_3.99-0.18               scuttle_1.14.0              #>  [75] class_7.3-22                pillar_1.10.2               #>  [77] nlme_3.1-166                iterators_1.0.14            #>  [79] compiler_4.4.1              beachmat_2.20.0             #>  [81] stringi_1.8.7               gower_1.0.2                 #>  [83] dendextend_1.19.0           lubridate_1.9.4             #>  [85] GenomicAlignments_1.40.0    drawProteins_1.24.0         #>  [87] crayon_1.5.3                abind_1.4-8                 #>  [89] BiocIO_1.14.0               bit_4.6.0                   #>  [91] chromote_0.5.1              pcaMethods_1.96.0           #>  [93] codetools_0.2-20            textshaping_1.0.1           #>  [95] recipes_1.3.1               BiocSingular_1.20.0         #>  [97] MLInterfaces_1.84.0         bslib_0.9.0                 #>  [99] e1071_1.7-16                plotly_4.10.4               #> [101] LaplacesDemon_16.1.6        mime_0.13                   #> [103] MultiAssayExperiment_1.30.3 splines_4.4.1               #> [105] Rcpp_1.0.14                 dbplyr_2.5.0                #> [107] sparseMatrixStats_1.16.0    knitr_1.50                  #> [109] blob_1.2.4                  utf8_1.2.5                  #> [111] clue_0.3-66                 mzR_2.38.0                  #> [113] AnnotationFilter_1.28.0     fs_1.6.6                    #> [115] QFeatures_1.14.2            listenv_0.9.1               #> [117] mzID_1.42.0                 DelayedMatrixStats_1.26.0   #> [119] ggsignif_0.6.4              Matrix_1.7-1                #> [121] statmod_1.5.0               tzdb_0.5.0                  #> [123] lpSolve_5.6.23              pheatmap_1.0.12             #> [125] pkgconfig_2.0.3             tools_4.4.1                 #> [127] cachem_1.1.0                RSQLite_2.4.0               #> [129] viridisLite_0.4.2           rvest_1.0.4                 #> [131] DBI_1.2.3                   impute_1.78.0               #> [133] fastmap_1.2.0               rmarkdown_2.29              #> [135] scales_1.4.0                grid_4.4.1                  #> [137] gt_1.0.0                    Rsamtools_2.20.0            #> [139] broom_1.0.8                 sass_0.4.10                 #> [141] coda_0.19-4.1               FNN_1.1.4.1                 #> [143] BiocManager_1.30.25         carData_3.0-5               #> [145] rpart_4.1.23                farver_2.1.2                #> [147] yaml_2.3.10                 AnnotationForge_1.46.0      #> [149] rtracklayer_1.64.0          cli_3.6.5                   #> [151] purrr_1.0.4                 txdbmaker_1.0.1             #> [153] lifecycle_1.0.4             caret_7.0-1                 #> [155] mvtnorm_1.3-3               lava_1.8.1                  #> [157] kernlab_0.9-33              backports_1.5.0             #> [159] BiocParallel_1.38.0         annotate_1.82.0             #> [161] timechange_0.3.0            gtable_0.3.6                #> [163] rjson_0.2.23                parallel_4.4.1              #> [165] pROC_1.18.5                 limma_3.60.6                #> [167] jsonlite_2.0.0              bitops_1.0-9                #> [169] bit64_4.6.0-1               Rtsne_0.17                  #> [171] pRoloc_1.44.1               jquerylib_0.1.4             #> [173] segmented_2.1-4             timeDate_4041.110           #> [175] lazyeval_0.2.2              shiny_1.10.0                #> [177] htmltools_0.5.8.1           affy_1.82.0                 #> [179] rappdirs_0.3.3              glue_1.8.0                  #> [181] httr2_1.1.2                 XVector_0.44.0              #> [183] RCurl_1.98-1.17             MALDIquant_1.22.3           #> [185] mclust_6.1.1                BSgenome_1.72.0             #> [187] gridExtra_2.3               igraph_2.1.4                #> [189] R6_2.6.1                    tidyr_1.3.1                 #> [191] SingleCellExperiment_1.26.0 labeling_0.4.3              #> [193] GenomicFeatures_1.56.0      cluster_2.1.8               #> [195] ipred_0.9-15                DelayedArray_0.30.1         #> [197] tidyselect_1.2.1            ProtGenerics_1.36.0         #> [199] sampling_2.10               xml2_1.3.8                  #> [201] car_3.1-3                   future_1.49.0               #> [203] ModelMetrics_1.2.2.2        rsvd_1.0.5                  #> [205] affyio_1.74.0               data.table_1.17.4           #> [207] websocket_1.4.4             mgsub_1.7.3                 #> [209] htmlwidgets_1.6.4           RColorBrewer_1.1-3          #> [211] biomaRt_2.60.1              hardhat_1.4.1               #> [213] prodlim_2025.04.28          PSMatch_1.8.0"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rohit Satyam. Author, maintainer. Alberto Maillo. Author, contributor. David Gomez-Cabrero. Author. Arnab Pain. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Satyam R, Maillo , Gomez-Cabrero D, Pain (2025). plasmoRUtils: one-stop solution make plasmodium biology easy. R package version 1.0.0.","code":"@Manual{,   title = {plasmoRUtils: A one-stop solution to make plasmodium biology easy},   author = {Rohit Satyam and Alberto Maillo and David Gomez-Cabrero and Arnab Pain},   year = {2025},   note = {R package version 1.0.0}, }"},{"path":"/Contributing.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant, version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"/index.html","id":"plasmorutils-","dir":"","previous_headings":"","what":"A one-stop solution to make plasmodium biology easy","title":"A one-stop solution to make plasmodium biology easy","text":"plasmoRUtils enables users connect several Plasmodium apicomplexan databases via R interface provides simple functions carry bioinformatics tasks non-trival parasite informatic analysis. details, recommend read preprint.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A one-stop solution to make plasmodium biology easy","text":"downloading package, install following dependencies. can install development version plasmoRUtils using:","code":"cranpkgs <- c('BiocManager','randomcoloR', 'janitor', 'readr', 'rlang', 'dplyr', 'ggsci', 'rvest', 'easyPubMed', 'plyr', 'scales', 'ggplot2', 'glue', 'tidyr', 'tibble', 'data.table', 'plotly', 'purrr', 'stringr', 'S4Vectors', 'echarts4r', 'magrittr', 'bio3d', 'httr', 'jsonlite', 'ggpubr', 'gt', 'mgsub', 'reshape2','pathfindR')  install.packages(setdiff(cranpkgs, rownames(installed.packages())), dependencies = TRUE)  biocpkgs <- c(\"rmarkdown\",\"pRoloc\",\"knitr\",\"BiocStyle\",\"DESeq2\",\"styler\",\"utils\",\"IRanges\",\"BiocGenerics\",\"rtracklayer\",\"scuttle\",\"txdbmaker\",\"topGO\",\"drawProteins\",\"GenomicFeatures\",\"biomaRt\",\"AnnotationForge\",\"Biostrings\",\"GenomeInfoDb\",\"SingleCellExperiment\",\"SingleR\",\"NOISeq\",\"GenomicRanges\",\"BSgenome\")  BiocManager::install(setdiff(biocpkgs, rownames(installed.packages())), dependencies = TRUE) devtools::install_github(\"Rohit-Satyam/plasmoRUtils\") remotes::install_github('Rohit-Satyam/plasmoRUtils')"},{"path":"/index.html","id":"check-installation","dir":"","previous_headings":"","what":"Check installation","title":"A one-stop solution to make plasmodium biology easy","text":"dependencies installed, package can loaded follows:","code":"# Once installed load the library as library(plasmoRUtils)  ## To re-check if all the dependencies that are required by plasmoRUtils are installed install_dependencies()"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"A one-stop solution to make plasmodium biology easy","text":"documentation package available ","code":""},{"path":"/index.html","id":"to-do-list","dir":"","previous_headings":"","what":"To-do List","title":"A one-stop solution to make plasmodium biology easy","text":"Provide function access Plasmobase. Write wrapper function easypathFindR quickly perform Pathway enrichment analysis. Write function make String PPI quickly.","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"A one-stop solution to make plasmodium biology easy","text":"’re excited contribute package! ’d like help , try follow style conventions used current functions - makes sense, course. ideas suggestions, don’t hesitate reach —opening GitHub issue usually best way start conversation. Just heads : project Contributor Code Conduct, getting involved, ’re agreeing play rules. Thanks helping make project better!","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Rohit Satyam Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/dot-clickable.html","id":null,"dir":"Reference","previous_headings":"","what":"plasmoRUtils — .clickable","title":"plasmoRUtils — .clickable","text":"Hidden function fetch expandable tables MPMP database","code":""},{"path":"/reference/dot-clickable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plasmoRUtils — .clickable","text":"","code":".clickable(url)"},{"path":"/reference/dot-clickable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plasmoRUtils — .clickable","text":"url MPMP url.","code":""},{"path":"/reference/dot-fast_ifelse2.html","id":null,"dir":"Reference","previous_headings":"","what":"Fastest IfElse function: https://github.com/ICJIA/r-user-group/issues/11 — .fast_ifelse2","title":"Fastest IfElse function: https://github.com/ICJIA/r-user-group/issues/11 — .fast_ifelse2","text":"Fastest IfElse function: https://github.com/ICJIA/r-user-group/issues/11","code":""},{"path":"/reference/dot-fast_ifelse2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fastest IfElse function: https://github.com/ICJIA/r-user-group/issues/11 — .fast_ifelse2","text":"","code":".fast_ifelse2(test, yes, no)"},{"path":"/reference/dot-nonclickable.html","id":null,"dir":"Reference","previous_headings":"","what":"plasmoRUtils — .nonclickable","title":"plasmoRUtils — .nonclickable","text":"Hidden function download static tables MPMP database","code":""},{"path":"/reference/dot-nonclickable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plasmoRUtils — .nonclickable","text":"","code":".nonclickable(url)"},{"path":"/reference/dot-nonclickable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plasmoRUtils — .nonclickable","text":"url MPMP url.","code":""},{"path":"/reference/dot-usetopGO.html","id":null,"dir":"Reference","previous_headings":"","what":"plasmoRUtils — .usetopGO","title":"plasmoRUtils — .usetopGO","text":"Hidden function called easytopGO run topGO.","code":""},{"path":"/reference/dot-usetopGO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plasmoRUtils — .usetopGO","text":"","code":".usetopGO(   stats = stats,   category = category,   geneID = geneID,   gene_2_GO = gene_2_GO,   algo = algo,   fdr = fdr,   correction = correction )"},{"path":"/reference/easyAF2Signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Signal peptide fidelity — easyAF2Signal","title":"Check Signal peptide fidelity — easyAF2Signal","text":"convenience function compute atomic contacts predicted signal peptide rest protein AlphaFold2 structures. implements FORTRAN code Elcock-Lab/AlphaFold2-Signal, added features calculate median pLDDT count residues surpassing pLDDT threshold signal peptide. Unlike FORTRAN version, function highlights cases low-confidence signal peptide structures filter residues, suggesting may represent true outward-facing signal peptides.","code":""},{"path":"/reference/easyAF2Signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Signal peptide fidelity — easyAF2Signal","text":"","code":"easyAF2Signal(pdb, cut_dist = 4, nsignal = 25, bfac_thresh = 90, nskip = 1)"},{"path":"/reference/easyAF2Signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Signal peptide fidelity — easyAF2Signal","text":"pdb link PDB file path PDB file file locally present. cut_dist Distance cutoff defining atomic contacts (Default: 4 Angstroms). nsignal Number residues comprise N-terminal signal peptide. SignalP prediction available protein, predicted length used. (Default: 25). bfac_thresh pLDDT threshold including residues atomic contact calculation. nskip . residues immediately next cleavage site exclude atomic contact calculations.","code":""},{"path":"/reference/easyAF2Signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Signal peptide fidelity — easyAF2Signal","text":"data frame, containing statistics signal peptide rest protein. Zero atomic residue-residue contact indicative True positives non-zero values putative False Positives.","code":""},{"path":"/reference/easyAF2Signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Signal peptide fidelity — easyAF2Signal","text":"","code":"if (FALSE) { # \\dontrun{ df <- easyAF2Signal(\"https://alphafold.ebi.ac.uk/files/AF-Q9TY95-F1-model_v4.pdb\") } # }"},{"path":"/reference/easyExpPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Normalised expression quickly — easyExpPlot","title":"Plot Normalised expression quickly — easyExpPlot","text":"convenience function make line plots bubble plots showcase gene expression trends across time points sample groups","code":""},{"path":"/reference/easyExpPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Normalised expression quickly — easyExpPlot","text":"","code":"easyExpPlot(df, x, y, value, type = \"line\", scaleBubbles = c(2, 6))"},{"path":"/reference/easyExpPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Normalised expression quickly — easyExpPlot","text":"df 3 column data frame bee transformed using reshape2::melt function. x, y x y variables drawing. value Remaining column choosing x y. column numeric type=\"line\" character type=\"bubble\". type Type plot. Default (\"line\").","code":""},{"path":"/reference/easyExpPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Normalised expression quickly — easyExpPlot","text":"line plot bubble plot represents trends across different time points sample types.","code":""},{"path":"/reference/easyExpPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Normalised expression quickly — easyExpPlot","text":"","code":"if (FALSE) { # \\dontrun{   # Load sample data that contain Z-score transformed TPM values (randomly generated) for some genes   data(pf3d7TPMs)     df <- reshape2::melt(pf3d7TPMs,\"Probe\",na.rm = T)    easyExpPlot(df,x=\"variable\",y=\"Probe\",value=\"value\", type = \"bubble\")   easyExpPlot(df,x=\"variable\",y=\"value\",value=\"Probe\") } # }"},{"path":"/reference/easyGOPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick ORA result plotting — easyGOPlot","title":"Quick ORA result plotting — easyGOPlot","text":"convenience function quickly plot results easytopGO ORA results obtained VEupathDB component databases.","code":""},{"path":"/reference/easyGOPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick ORA result plotting — easyGOPlot","text":"","code":"easyGOPlot(   res,   title = \"GO Biological processes\",   limit = 20,   desc = \"Term\",   genecounts = \"Annotated\",   sortby = \"ks\" )"},{"path":"/reference/easyGOPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick ORA result plotting — easyGOPlot","text":"res Output easytopGO. title Title plot. limit terms plot. desc Column name containing GO description.using VEuPathDB compnent database, \"Name\" column. genecounts Column name containing number query genes associated GO description. Used bubble size. VEupathDB \"Result count\" column. sortby Name statistics column sort terms use plotting.","code":""},{"path":"/reference/easyGOPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick ORA result plotting — easyGOPlot","text":"publication ready ggplot2 object.","code":""},{"path":"/reference/easyGOPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick ORA result plotting — easyGOPlot","text":"","code":"if (FALSE) { # \\dontrun{ ## get enrichment results from easytopGO gores <- easytopGO(geneID = geneList, bkggset = background.gset, stats = \"ks\") baseurl <- \"https://plasmodb.org/common/downloads/Current_Release/\" url <- paste0(baseurl, \"Pfalciparum3D7/gaf/PlasmoDB-68_Pfalciparum3D7_GO.gaf.gz\") gores <- easytopGO(   geneID = geneList, useGAF = TRUE, useBiomart = FALSE, gaf = url,   bkggset = background.gset, category = \"BP\", stats = \"ks\" )  ## Then feed them to easyGOPlot plot <- easyGOPlot(gores, title = \"GO Enrichment Biological Processes\") } # }"},{"path":"/reference/easyLabelTransfer.html","id":null,"dir":"Reference","previous_headings":"","what":"Easy label transfer from reference data — easyLabelTransfer","title":"Easy label transfer from reference data — easyLabelTransfer","text":"function retrieves data malaria.tools generates dataframe containing Stage Parasite gene highly expressed.","code":""},{"path":"/reference/easyLabelTransfer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easy label transfer from reference data — easyLabelTransfer","text":"","code":"easyLabelTransfer(   queryCounts,   refCounts,   referenceMeta,   refNormalised = FALSE,   queryNormalised = FALSE,   labelCol,   isrefBulk = FALSE,   ... )"},{"path":"/reference/easyLabelTransfer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easy label transfer from reference data — easyLabelTransfer","text":"queryCounts object containing raw counts lognormalised counts query dataset. can form dcgMatrix. counts normalised, set queryNormalised=TRUE. refCounts description object containing raw counts lognormalised counts reference dataset. can form dcgMatrix. counts normalised, set refNormalised=TRUE. referenceMeta dataframe containing reference metadata. refNormalised Logical. Use TRUE, counts already normalised otherwise counts log-normalised using Scuttle's logNormCounts function. queryNormalised Logical. Use TRUE, counts already normalised otherwise counts log-normalised using Scuttle's logNormCounts function. labelCol Column metadata contains desired labels transferred query. isrefBulk Logical. Use TRUE, reference dataset Bulk-RNASeq. cases \"classic\" approach used shortlist DEGs. false, \"wilcox\" method used scRNAseq reference. ... Additional arguments can passed SingleR based user's needs de.n=30 aggr.ref=TRUE. Refer SingleR documentation details.","code":""},{"path":"/reference/easyLabelTransfer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easy label transfer from reference data — easyLabelTransfer","text":"DFrame object containing transferred labels can directly used functions SingleR plotScoreHeatmap().","code":""},{"path":"/reference/easyLabelTransfer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easy label transfer from reference data — easyLabelTransfer","text":"","code":"if (FALSE) { # \\dontrun{ ## Fetching the URL mcalist <- listMCA() data(\"subudhi2020\") ## reference dataset  ## Using this reference set url <- \"https://www.malariacellatlas.org/downloads/pf-ch10x-set4-biorxiv.zip\"  raw_counts <- easyMCA(url,type = \"raw\") rownames(raw_counts) <- gsub(\"-\",\"_\",rownames(raw_counts)) meta <- easyMCA(url,type=\"data\")  ## Retaining only Asexual stage cells and Lab isolates. meta <- subset(meta, meta$STAGE_LR %in% c(\"ring\",\"trophozoite\",\"schizont\") & DAY != \"Field\") raw_counts <- raw_counts[,rownames(meta)]  ## Filtering away field isolates and asexual stage cells labels <- easyLabelTransfer(queryCounts = raw_counts, refCounts = subudhi2020@assays@data$counts, referenceMeta = subudhi2020@colData, labelCol = \"timetag\", isrefBulk = TRUE) } # }"},{"path":"/reference/easymakeOrgdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Org.db package quickly — easymakeOrgdb","title":"Create Org.db package quickly — easymakeOrgdb","text":"convenience function make OrgDb packages quickly used GO enrichment packages ClusterProfiler.","code":""},{"path":"/reference/easymakeOrgdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Org.db package quickly — easymakeOrgdb","text":"","code":"easymakeOrgdb(   gff =     \"https://plasmodb.org/common/downloads/release-68/Pfalciparum3D7/gff/data/PlasmoDB-68_Pfalciparum3D7.gff\",   gaf =     \"https://plasmodb.org/common/downloads/release-68/Pfalciparum3D7/gaf/PlasmoDB-68_Pfalciparum3D7_Curated_GO.gaf.gz\",   out.dir = \".\",   taxid = 36329,   genus = \"Plasmodium\",   sp = \"falciparum3D7\",   version = 0.1,   verbose = FALSE,   maintainer = \"John doe <johndoe@gmail.com>\" )"},{"path":"/reference/easymakeOrgdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Org.db package quickly — easymakeOrgdb","text":"gff link GFF file VEuPathDB path GFF file file present locally. gaf Gene Ontology file obtained VEuPathDB. .dir Output directory package saved. taxid Taxonomy ID organism. can obtained https://www.ncbi.nlm.nih.gov/taxonomy. genus Genus organism. used construct name package. sp Species without strain information. version Version package choose maintain share package. verbose Display messages running makeOrgPackage function. maintainer Email Id package builder. Default \"John doe johndoe@gmail.com\"","code":""},{"path":"/reference/easymakeOrgdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Org.db package quickly — easymakeOrgdb","text":"tar.gz file can installed package can used GO enrichment tools ClusterProfiler.","code":""},{"path":"/reference/easymakeOrgdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Org.db package quickly — easymakeOrgdb","text":"","code":"if (FALSE) { # \\dontrun{  easymakeOrgdb(   gff=\"https://plasmodb.org/common/downloads/release-68/PbergheiANKA/gff/data/PlasmoDB-68_PbergheiANKA.gff\",   gaf=\"https://plasmodb.org/common/downloads/release-68/PbergheiANKA/gaf/PlasmoDB-68_PbergheiANKA_Curated_GO.gaf.gz\",   out.dir=\".\", taxid=5823,genus=\"Plasmodium\",   sp=\"bergheiANKA\",   version=0.1,   verbose = FALSE,   maintainer=\"John doe <johndoe@gmail.com>\")   } # }"},{"path":"/reference/easyMCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch data from Malaria Cell Atlas — easyMCA","title":"Fetch data from Malaria Cell Atlas — easyMCA","text":"function fetches loads metadata expression matrices desired data sets available Malaria Cell Atlas (MCA) Database.","code":""},{"path":"/reference/easyMCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch data from Malaria Cell Atlas — easyMCA","text":"","code":"easyMCA(url, type = \"data\")"},{"path":"/reference/easyMCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch data from Malaria Cell Atlas — easyMCA","text":"url url dataset listMCA function. type Type data fetched. Use \"exp\" fetch normalized scaled values, use \"raw\" get raw counts use \"data\" get metadata dataset.","code":""},{"path":"/reference/easyMCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch data from Malaria Cell Atlas — easyMCA","text":"df dataframe requested data type MCA.","code":""},{"path":"/reference/easyMCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch data from Malaria Cell Atlas — easyMCA","text":"","code":"if (FALSE) { # \\dontrun{   url <- \"https://www.malariacellatlas.org/downloads/pf-ch10x-set4-biorxiv.zip\"   # Use the function to read metadata, expression, or raw data   metadata <- easyMCA(url, type = \"data\")   expression <- easyMCA(url, type = \"exp\")   raw_counts <- easyMCA(url, type = \"raw\")    ## make Seurat Object easily now    testmca <- Seurat::CreateSeuratObject(counts = raw_counts, meta.data = metadata, project = \"MCA\") } # }"},{"path":"/reference/easyNOISeqAnnot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","title":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","text":"convenience function make data frame containing biological annotations required NOISeq run NOISeq::readData function using custom GTF/GFF file FASTA.","code":""},{"path":"/reference/easyNOISeqAnnot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","text":"","code":"easyNOISeqAnnot(   gff,   fasta,   name = \"Tgondii\",   select = c(\"protein_coding_gene\", \"ncRNA_gene\", \"pseudogene\"),   geneidcol = \"ID\",   genetype = \"ebi_biotype\" )"},{"path":"/reference/easyNOISeqAnnot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","text":"gff link GFF file VEuPathDB path GTF file produced using AGAT. fasta link path genome fasta file. name Name organism. select Type features selected. default select \"protein_coding_gene\",\"ncRNA_gene\"\"pseudogene\" cover genes VEuPathDB annotation files. using AGAT formatted GTF file, using \"gene\" sufficient AGAT put genes types gene tag. geneidcol Use tag refers gene IDs GTF/GFF file. genetype Use tag refers gene subtypes \"ebi_biotype\".","code":""},{"path":"/reference/easyNOISeqAnnot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","text":"dataframe containing annotations per gene GC content, gene description, gene-length, gene start, gene end coordinates chromosome information.","code":""},{"path":"/reference/easyNOISeqAnnot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","text":"","code":"if (FALSE) { # \\dontrun{  df <- easyNOISeqAnnot(  gff=\"https://toxodb.org/common/downloads/release-68/EpraecoxHoughton/gff/data/ToxoDB-68_EpraecoxHoughton.gff\",  fasta = \"https://toxodb.org/common/downloads/release-68/EpraecoxHoughton/fasta/data/ToxoDB-68_EpraecoxHoughton_Genome.fasta\")   } # }"},{"path":"/reference/easyPhplplottbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","title":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","text":"function generates Disruptability Mutant Phenotype tables R, mirroring style Phenoplasm visualizations.","code":""},{"path":"/reference/easyPhplplottbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","text":"","code":"easyPhplplottbl(file, skip = 2)"},{"path":"/reference/easyPhplplottbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","text":"file Path Phenotype.txt file obtained PhenoPlasm database data frame. skip Number lines skip file. Default 2.","code":""},{"path":"/reference/easyPhplplottbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","text":"gt table plot.","code":""},{"path":"/reference/easyPhplplottbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","text":"","code":"if (FALSE) { # \\dontrun{  ## Read the table generated from Phenoplasm advance search and pass the resulting data frame df <- read.csv(\"phenotype.txt\", skip = 2, sep = \"\\t\") %>% dplyr::select(-3, -4) %>% dplyr::rename_with(~ gsub(\"Sprozoite\", \"Sporozoite\", .x)) easyPhplplottbl(df)  ## Pass the file path directly easyPhplplottbl(\"phenotype.txt\")  ## Load example data frame data(pf3d7PhplTable)  easyPhplplottbl(pf3d7PhplTable) } # }"},{"path":"/reference/easyPie.html","id":null,"dir":"Reference","previous_headings":"","what":"Pie chart to summarize searchMT results — easyPie","title":"Pie chart to summarize searchMT results — easyPie","text":"function make donut chart represent distribution input gene IDs across different stages Malaria given result object plotTissueSpecific function.","code":""},{"path":"/reference/easyPie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pie chart to summarize searchMT results — easyPie","text":"","code":"easyPie(df, col = \"Tissue Specificity\")"},{"path":"/reference/easyPie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pie chart to summarize searchMT results — easyPie","text":"df dataframe obtained plotTissueSpecific(returnData=TRUE). col Column plot donut chart. Default: \"Tissue Specificity\"","code":""},{"path":"/reference/easyPie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pie chart to summarize searchMT results — easyPie","text":"plot (data thereof) domains present list gene IDs.","code":""},{"path":"/reference/easyPie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pie chart to summarize searchMT results — easyPie","text":"","code":"if (FALSE) { # \\dontrun{   geneID <- c(\"PBANKA_0100600\", \"PBANKA_0102900\", \"PF3D7_0102900\")   ## To get Plot similar to malaria.tools   res <- searchMT(geneID = geneID)   res %>% easyPie() } # }"},{"path":"/reference/easytopGO.html","id":null,"dir":"Reference","previous_headings":"","what":"Performing quick ORA analysis — easytopGO","title":"Performing quick ORA analysis — easytopGO","text":"convenience function quickly perform GO Term Enrichment analysis using TopGO.results can plotted using easyGOPlot","code":""},{"path":"/reference/easytopGO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performing quick ORA analysis — easytopGO","text":"","code":"easytopGO(   geneID,   bkggset = \"\",   gaf = \"\",   useBiomart = TRUE,   useGAF = FALSE,   mart = \"protists_mart\",   gset = \"pfalciparum_eg_gene\",   algo = \"weight01\",   stats = \"ks\",   category = \"BP\",   fdr = FALSE,   correction = \"BY\" )"},{"path":"/reference/easytopGO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performing quick ORA analysis — easytopGO","text":"geneID vector named p-values. names gene IDs. bkggset character vector gene IDs used background. gaf URL path .gaf file obtained PlasmoDB choose use biomaRt. using argument, set useBiomart=FALSE useGAF=TRUE. useBiomart Logical enable usage BiomaRt fetch GO terms. Default: TRUE. useGAF Logical enable usage custom .gaf file fetch GO terms. Default: FALSE mart Argument specify mart BiomaRt functions. Default: \"protists_mart\". gset Argument specify geneset used BiomaRt functions. Default: \"pfalciparum_eg_gene\" algo Argument specify algorithm used enrichment topGO. possible options use topGO::whichAlgorithms() stats Argument specify statistical test used enrichment topGO. possible values use topGO::whichTests(). Default: \"ks\". category Specify category -representation analysis \"BP\" Biological Process, \"MF\" Molecular Function \"CC\" Cellular Component Enrichment. fdr logical. Perform multiple testing correction testing. Default (FALSE) correction Method used calculate adjusted p-value. Possible values: \"\"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\",\"fdr\". Read section 6.2 topGO documentation performing correction. Correction using elim weight usually recommended.","code":""},{"path":"/reference/easytopGO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performing quick ORA analysis — easytopGO","text":"dataframe enriched terms GO description genes filteres uncorrected p-values.","code":""},{"path":"/reference/easytopGO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performing quick ORA analysis — easytopGO","text":"","code":"if (FALSE) { # \\dontrun{ ## making gene list from DESEq2 geneList <- subset(res, regulate==\"Up\") %>% .$padj names(geneList) <- subset(res, regulate==\"Up\") %>% .$Geneid  ## background genes will be the genes tested for differential expression background.gset <- res$Geneid baseurl <- \"https://plasmodb.org/common/downloads/Current_Release/\" url<-paste0(baseurl,\"Pfalciparum3D7/gaf/PlasmoDB-68_Pfalciparum3D7_GO.gaf.gz\") gores<-easytopGO(geneID = geneList,useGAF = TRUE,useBiomart = FALSE,gaf=url, bkggset = background.gset, category = \"BP\", stats = \"ks\") } # }"},{"path":"/reference/easyTPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate TPM values from count data — easyTPM","title":"Calculate TPM values from count data — easyTPM","text":"function provides ability compute quick TPM values.","code":""},{"path":"/reference/easyTPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate TPM values from count data — easyTPM","text":"","code":"easyTPM(counts, featureLength)"},{"path":"/reference/easyTPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate TPM values from count data — easyTPM","text":"counts Count matrix containing raw counts. featureLength Effective length genes generated getEfflen.","code":""},{"path":"/reference/easyTPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate TPM values from count data — easyTPM","text":"df numeric. function returns dataframe TPM normalized counts final column containing feature length.","code":""},{"path":"/reference/easyTPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate TPM values from count data — easyTPM","text":"","code":"if (FALSE) { # \\dontrun{ ## Effective length of the gene gene_info <- data.frame(GeneID = c(\"gene1\", \"gene2\", \"gene3\"), Length = c(1000, 1500, 2000)) count_matrix <- matrix(c(10, 20, 30, 40, 50, 60),   nrow = 3, ncol = 2,   dimnames = list(c(\"gene1\", \"gene2\", \"gene3\"), c(\"sample1\", \"sample2\")) ) test <- easyTPM(count_matrix, gene_info) } # }"},{"path":"/reference/easyTxDbmaker.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly make TxDb object — easyTxDbmaker","title":"Quickly make TxDb object — easyTxDbmaker","text":"convenience function make OrgDb packages quickly used GO enrichment packages ClusterProfiler.","code":""},{"path":"/reference/easyTxDbmaker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly make TxDb object — easyTxDbmaker","text":"","code":"easyTxDbmaker(   gff,   fasta,   abbr = \"TgondiiME49\",   org = \"Toxoplasma gondii\",   taxid = 508771,   db = \"ToxoDB release 68\" )"},{"path":"/reference/easyTxDbmaker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly make TxDb object — easyTxDbmaker","text":"gff link GFF file VEuPathDB path GFF file file present locally. fasta Genome FASTA file obtained VEuPathDB. abbr Abbreviation organism. org Name organism including genus species. taxid NCBI Taxonomy ID. can obtained https://www.ncbi.nlm.nih.gov/taxonomy. db Name database release information.","code":""},{"path":"/reference/easyTxDbmaker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly make TxDb object — easyTxDbmaker","text":"tar.gz file can installed package can used GO enrichment tools ClusterProfiler.","code":""},{"path":"/reference/easyTxDbmaker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly make TxDb object — easyTxDbmaker","text":"","code":"if (FALSE) { # \\dontrun{  txdb<-easyTxDbmaker(  gff=\"https://toxodb.org/common/downloads/release-68/TgondiiME49/gff/data/ToxoDB-68_TgondiiME49.gff\",  fasta=\"https://toxodb.org/common/downloads/release-68/TgondiiME49/fasta/data/ToxoDB-68_TgondiiME49_Genome.fasta\",  abbr=\"TgondiiME49\",  taxid=508771,org = \"Toxoplasma gondii ME49\",  db = \"ToxoDB release 68\")   } # }"},{"path":"/reference/getEffLen.html","id":null,"dir":"Reference","previous_headings":"","what":"Get effective gene lengths form TPM calculation — getEffLen","title":"Get effective gene lengths form TPM calculation — getEffLen","text":"function provides effective length (sum lengths exons) genes calculating TPM values.","code":""},{"path":"/reference/getEffLen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get effective gene lengths form TPM calculation — getEffLen","text":"","code":"getEffLen(gtf = NULL, format = \"gff3\")"},{"path":"/reference/getEffLen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get effective gene lengths form TPM calculation — getEffLen","text":"gtf Provide path URL GTF file. format Format feature file .e. \"gtf\" \"gff3\". Default \"gff3\".","code":""},{"path":"/reference/getEffLen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get effective gene lengths form TPM calculation — getEffLen","text":"df numeric. function returns data frame 2 columns: \"GeneID\", \"Length\".","code":""},{"path":"/reference/getEffLen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get effective gene lengths form TPM calculation — getEffLen","text":"","code":"if (FALSE) { # \\dontrun{ baseurl <- \"https://plasmodb.org/common/downloads/release-68/\" getEffLen(paste0(baseurl, \"Pfalciparum3D7/gff/data/PlasmoDB-68_Pfalciparum3D7.gff\"))  OR  getEffLen(\"/data/PlasmoDB-67_Pfalciparum3D7.gtf\") } # }"},{"path":"/reference/getMpmp.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly fetch data from MPMP database — getMpmp","title":"Quickly fetch data from MPMP database — getMpmp","text":"function provides ability fetch pathways data MPMP. data can modified used MPMP pathway enrichment analysis.","code":""},{"path":"/reference/getMpmp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly fetch data from MPMP database — getMpmp","text":"","code":"getMpmp(url)"},{"path":"/reference/getMpmp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly fetch data from MPMP database — getMpmp","text":"url URL pathway interest.","code":""},{"path":"/reference/getMpmp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly fetch data from MPMP database — getMpmp","text":"df function returns dataframe containing gene ID Annotations fetched MPMP database.","code":""},{"path":"/reference/getMpmp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly fetch data from MPMP database — getMpmp","text":"","code":"if (FALSE) { # \\dontrun{ df <- getMpmp(\"http://mpmp.huji.ac.il/maps/HNE_prot.html\") df <- getMpmp(\"http://mpmp.huji.ac.il/maps/14-3-3prot.html\") } # }"},{"path":"/reference/getPreconfiguredTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pre-configured tables — getPreconfiguredTable","title":"Get pre-configured tables — getPreconfiguredTable","text":"convenience function quickly fetch preconfigured table Signal Peptide ranges, Pathways, Pubmed entries related genes, Annotations etc database choice PlasmoDB, ToxoDB, PiroplasmaDB among VEuPathDB pathogen databases.","code":""},{"path":"/reference/getPreconfiguredTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pre-configured tables — getPreconfiguredTable","text":"","code":"getPreconfiguredTable(org, db = \"plasmodb\", customField = \"Y2hInteractions\")"},{"path":"/reference/getPreconfiguredTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pre-configured tables — getPreconfiguredTable","text":"org Full name organism interest specified VEuPathDB. find exact name organism, use listVeupathdb function. db Character Name database organism present. can one following: \"toxodb\",\"plasmodb\",\"hostdb\",\"amoebadb\",\"cryptodb\",\"fungidb\",\"giardiadb\",\"microsporidiadb\",\"piroplasmadb\",\"trichdb\",\"tritrypdb\". customField Preconfigured table wish fetch. Pass one value time following: \"GeneModelDump\",   \"GeneTranscripts\",   \"Alias\",   \"GeneLinkouts\",   \"GeneLocation\",   \"PubMed\",   \"OrthologsLite\",   \"LowComplexity\",   \"PdbSimilarities\",   \"3dPreds\",   \"AlphaFoldLinkouts\",   \"ProteinProperties\",   \"InterPro\",   \"SignalP\",   \"TMHMM\",   \"ECNumbers\",   \"ECNumbersInferred\",   \"protein_length\",   \"chromosome\",   \"location_text\",   \"sequence_id\",   \"gene_ortholog_number\",   \"gene_orthomcl_name\",   \"gene_paralog_number\",   \"MetabolicPathwaysMPMP\",   \"MetabolicPathways\",   \"CompoundsMetabolicPathways\",   \"Y2hInteractions\",   \"MassSpecDownload\",   \"MassSpecMod\",   \"Epitopes\" etc.","code":""},{"path":"/reference/getPreconfiguredTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get pre-configured tables — getPreconfiguredTable","text":"data frame.","code":""},{"path":"/reference/getPreconfiguredTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get pre-configured tables — getPreconfiguredTable","text":"","code":"if (FALSE) { # \\dontrun{ df <- getPreconfiguredTable(org = \"Plasmodium falciparum 3D7\",      db = \"plasmodb\",customField = \"Y2hInteractions\") } # }"},{"path":"/reference/getTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tables with custom fields — getTable","title":"Get tables with custom fields — getTable","text":"convenience function quickly fetch table Gene IDs, Protein IDs, Gene Symbols, Annotations many columns database choice PlasmoDB, ToxoDB, PiroplasmaDB among VEuPathDB pathogen databases.","code":""},{"path":"/reference/getTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tables with custom fields — getTable","text":"","code":"getTable(org, db = \"toxodb\", customFields = NULL)"},{"path":"/reference/getTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tables with custom fields — getTable","text":"org Full name organism interest specified VEuPathDB. find exact name organism, use listVeupathdb function. db Character Name database organism present. can one following: \"toxodb\",\"plasmodb\",\"hostdb\",\"amoebadb\",\"cryptodb\",\"fungidb\",\"giardiadb\",\"microsporidiadb\",\"piroplasmadb\",\"trichdb\",\"tritrypdb\". customFields vector custom fields desired fetched. \"primary_key\" mandatory field. fields can supplied can chosen (limited ): \"organism\",   \"gene_location_text\",   \"gene_product\",   \"gene_type\",  \"exon_count\",   \"gene_exon_count\",   \"gene_transcript_count\",   \"three_prime_utr_length\",   \"five_prime_utr_length\",   \"strand\",   \"is_pseudo\",   \"transcript_length\",   \"is_deprecated\",   \"gene_name\",   \"gene_source_id\",   \"transcript_product\",   \"protein_length\",   \"chromosome\",   \"location_text\",   \"sequence_id\",   \"gene_ortholog_number\",   \"gene_orthomcl_name\",   \"gene_paralog_number\",   \"cds_length\",   \"molecular_weight\",   \"isoelectric_point\",   \"tm_count\",   \"signalp_peptide\",   \"predicted_go_id_component\",   \"predicted_go_component\",   \"predicted_go_id_function\",   \"predicted_go_function\",   \"predicted_go_id_process\",   \"predicted_go_process\",   \"annotated_go_id_component\",   \"annotated_go_component\",   \"annotated_go_id_function\",   \"annotated_go_function\",   \"annotated_go_id_process\",   \"annotated_go_process\",   \"ec_numbers\",   \"ec_numbers_derived\"","code":""},{"path":"/reference/getTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tables with custom fields — getTable","text":"data frame, containing \"Gene ID\", \"Product Description\", \"Gene Strand\", \"Gene Name Symbol\", \"Previous ID(s)\", \"Entrez Gene ID\", \"UniProt ID(s)\", \"Protein Length\", \"TM Domains\" \"SignalP Peptide\" genes present organism interest.","code":""},{"path":"/reference/getTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tables with custom fields — getTable","text":"","code":"if (FALSE) { # \\dontrun{ df <- getTable(org=\"Plasmodium falciparum 3D7\", db=\"plasmodb\") } # }"},{"path":"/reference/install_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Install package dependencies — install_dependencies","title":"Install package dependencies — install_dependencies","text":"Installs missing dependencies CRAN Bioconductor","code":""},{"path":"/reference/install_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install package dependencies — install_dependencies","text":"","code":"install_dependencies()"},{"path":"/reference/listMCA.html","id":null,"dir":"Reference","previous_headings":"","what":"List data sets in MCA — listMCA","title":"List data sets in MCA — listMCA","text":"function lists datasets available Malaria Cell Atlas Database.","code":""},{"path":"/reference/listMCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List data sets in MCA — listMCA","text":"","code":"listMCA()"},{"path":"/reference/listMCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List data sets in MCA — listMCA","text":"df dataframe listing datasets available MCA URls can used easyMCA function.","code":""},{"path":"/reference/listMCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List data sets in MCA — listMCA","text":"","code":"if (FALSE) { # \\dontrun{   df <- listMCA() } # }"},{"path":"/reference/listVeupathdb.html","id":null,"dir":"Reference","previous_headings":"","what":"List genomes and metadata in VEuPathDB — listVeupathdb","title":"List genomes and metadata in VEuPathDB — listVeupathdb","text":"convenience function quickly fetch table genomes associated metadata VEupathDB.","code":""},{"path":"/reference/listVeupathdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List genomes and metadata in VEuPathDB — listVeupathdb","text":"","code":"listVeupathdb(customFields = NULL)"},{"path":"/reference/listVeupathdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List genomes and metadata in VEuPathDB — listVeupathdb","text":"customFields vector custom fields desired fetched. \"primary_key\" mandatory field. fields can supplied can chosen (limited ): \"annotation_source\", \"annotation_version\", \"arraygenecount\", \"chipchipgenecount\", \"chromosomeCount\", \"codinggenecount\", \"communitycount\", \"contigCount\", \"ecnumbercount\", \"estcount\", \"genecount\", \"genecount_number\", \"genome_source\", \"genome_version\", \"gocount\", \"is_in_apollo\", \"is_reference_strain\", \"megabps\", \"ncbi_tax_id\", \"ncbi_taxon_url\", \"organism\", \"organism_full\", \"orthologcount\", \"othergenecount\", \"popsetcount\", \"project_id\", \"proteomicscount\", \"pseudogenecount\", \"rnaseqcount\", \"rtpcrcount\", \"snpcount\", \"species\", \"species_ncbi_tax_id\", \"species_ncbi_taxon_url\", \"supercontigCount\", \"tfbscount\", \"URLcdsFasta\", \"URLGenomeFasta\", \"URLgff\", \"URLproteinFasta\", \"URLtranscriptFasta\". fields, refer VEuPathDB Documentation","code":""},{"path":"/reference/listVeupathdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List genomes and metadata in VEuPathDB — listVeupathdb","text":"data frame containing information genomes present VEuPathDB attributes.","code":""},{"path":"/reference/listVeupathdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List genomes and metadata in VEuPathDB — listVeupathdb","text":"","code":"if (FALSE) { # \\dontrun{ df <- listVeupathdb() df <- listVeupathdb(customFields=c(\"species\", \"project_id\")) } # }"},{"path":"/reference/pdb2uniprot.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","title":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","text":"convenience function quickly convert PDB IDs Uniprot IDs. protein multimeric, corresponding Uniprot IDs returned . function uses PDBe API.","code":""},{"path":"/reference/pdb2uniprot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","text":"","code":"pdb2uniprot(pdbid)"},{"path":"/reference/pdb2uniprot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","text":"pdbid single PDB Id.","code":""},{"path":"/reference/pdb2uniprot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","text":"data frame, Uniprot IDs, Chain IDs start end coordinates chains.","code":""},{"path":"/reference/pdb2uniprot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","text":"","code":"if (FALSE) { # \\dontrun{ df <- pdb2uniprot(\"9FIA\") } # }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plotAllCondition.html","id":null,"dir":"Reference","previous_headings":"","what":"Making plots similar to malaria.tools — plotAllCondition","title":"Making plots similar to malaria.tools — plotAllCondition","text":"function retrieves data malaria.tools generates expression value plots (TPM) similar produced website. Use function create publication-ready plots.","code":""},{"path":"/reference/plotAllCondition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Making plots similar to malaria.tools — plotAllCondition","text":"","code":"plotAllCondition(geneID, returnData = FALSE, plotify = FALSE)"},{"path":"/reference/plotAllCondition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Making plots similar to malaria.tools — plotAllCondition","text":"geneID Single Gene ID Plasmodium falciparum Plasmodium berghi. returnData Logical. Use true return dataframe used making plots. plotify make plots interactive using plotly.","code":""},{"path":"/reference/plotAllCondition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Making plots similar to malaria.tools — plotAllCondition","text":"plot (data theirof) TPM values across multiple stages parasite.","code":""},{"path":"/reference/plotAllCondition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Making plots similar to malaria.tools — plotAllCondition","text":"","code":"if (FALSE) { # \\dontrun{   #'   ## To get Plot similar to malaria.tools   res <- plotAllCondition(geneID = \"PBANKA_0100600\") } # }"},{"path":"/reference/plotDomain.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting domains on protein body — plotDomain","title":"Plotting domains on protein body — plotDomain","text":"function retrieves data malaria.tools generates dataframe containing Stage Parasite gene highly expressed.","code":""},{"path":"/reference/plotDomain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting domains on protein body — plotDomain","text":"","code":"plotDomain(   geneID,   mart = \"protists_mart\",   gset = \"pfalciparum_eg_gene\",   input = \"ensembl_gene_id\",   fetchid = \"uniprotsptrembl\",   returnData = FALSE )"},{"path":"/reference/plotDomain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting domains on protein body — plotDomain","text":"geneID character vector Gene IDs Plasmodium falciparum Plasmodium berghi.Remove version gene ids. mart Name Ensembl Biomart. Default: \"protists_mart\" gset Gene-set organism. changed dealing Plasmodium species. Default: \"pfalciparum_eg_gene\" input Input id type. gene IDs PlasmoDB \"ensembl_gene_id\". fetchid Desired output ids returnData return converted gene ids domain information fetched uniprot.","code":""},{"path":"/reference/plotDomain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting domains on protein body — plotDomain","text":"plot (data thereof) domains present list gene IDs.","code":""},{"path":"/reference/plotDomain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting domains on protein body — plotDomain","text":"","code":"if (FALSE) { # \\dontrun{   ## Search proper mart   ## View(listDatasets(biomaRt::useEnsemblGenomes(biomart = \"protists_mart\")))   ## To get domain information from uniprot and prepare publication ready figures   plot <- plotDomain(geneID = c(\"PF3D7_0518900\", \"PF3D7_0602800\", \"PF3D7_0624600\"))    ## Currently pberghei doesn't work, see issue: https://github.com/grimbough/biomaRt/issues/110   plot <- plotDomain(geneID = c(\"PBANKA_0100600\", \"PBANKA_0102900\"), gset = \"pberghei_eg_gene\")    ## Change plot domain colors, if desired. Say you have 15 domains in all 3 proteins combined   palette <- randomcoloR::distinctColorPalette(15)   plot + scale_fill_manual(values = palette) } # }"},{"path":"/reference/plotStageSpecific.html","id":null,"dir":"Reference","previous_headings":"","what":"Making plots similar to malaria.tools — plotStageSpecific","title":"Making plots similar to malaria.tools — plotStageSpecific","text":"function retrieves data malaria.tools generates expression value plots (TPM) similar produced website. Use function create publication-ready plots.","code":""},{"path":"/reference/plotStageSpecific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Making plots similar to malaria.tools — plotStageSpecific","text":"","code":"plotStageSpecific(geneID, returnData = FALSE, plotify = FALSE)"},{"path":"/reference/plotStageSpecific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Making plots similar to malaria.tools — plotStageSpecific","text":"geneID Gene ID Plasmodium falciparum Plasmodium berghi. returnData Logical. Use true return dataframe used making plots. plotify make plots interactive using plotly.","code":""},{"path":"/reference/plotStageSpecific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Making plots similar to malaria.tools — plotStageSpecific","text":"plot (data theirof) TPM values across multiple stages parasite.","code":""},{"path":"/reference/plotStageSpecific.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Making plots similar to malaria.tools — plotStageSpecific","text":"","code":"if (FALSE) { # \\dontrun{   geneID <- c(\"PBANKA_0100600\", \"PBANKA_0102900\", \"PF3D7_0102900\")   ## To get Plot similar to malaria.tools   res <- plotTissueSpecific(geneID = \"PBANKA_0100600\") } # }"},{"path":"/reference/plotTissueSpecific.html","id":null,"dir":"Reference","previous_headings":"","what":"Making plots similar to malaria.tools — plotTissueSpecific","title":"Making plots similar to malaria.tools — plotTissueSpecific","text":"function retrieves data malaria.tools generates expression value plots (TPM) similar produced website. Use function create publication-ready plots.","code":""},{"path":"/reference/plotTissueSpecific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Making plots similar to malaria.tools — plotTissueSpecific","text":"","code":"plotTissueSpecific(geneID, returnData = FALSE, plotify = FALSE)"},{"path":"/reference/plotTissueSpecific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Making plots similar to malaria.tools — plotTissueSpecific","text":"geneID Gene ID Plasmodium falciparum Plasmodium berghi. returnData Logical. Use true return dataframe used making plots. plotify make plots interactive using plotly.","code":""},{"path":"/reference/plotTissueSpecific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Making plots similar to malaria.tools — plotTissueSpecific","text":"plot (data theirof) TPM values across multiple stages parasite.","code":""},{"path":"/reference/plotTissueSpecific.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Making plots similar to malaria.tools — plotTissueSpecific","text":"","code":"if (FALSE) { # \\dontrun{   geneID <- c(\"PBANKA_0100600\", \"PBANKA_0102900\", \"PF3D7_0102900\")   ## To get Plot similar to malaria.tools   res <- plotTissueSpecific(geneID = \"PBANKA_0100600\") } # }"},{"path":"/reference/quickTPM.html","id":null,"dir":"Reference","previous_headings":"","what":"plasmoRUtils — quickTPM","title":"plasmoRUtils — quickTPM","text":"function provides ability compute quick TPM values.","code":""},{"path":"/reference/quickTPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plasmoRUtils — quickTPM","text":"","code":"quickTPM(counts, featureLength)"},{"path":"/reference/quickTPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plasmoRUtils — quickTPM","text":"counts Count matrix containing raw counts. featureLength Effective length genes generated getEfflen.","code":""},{"path":"/reference/quickTPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plasmoRUtils — quickTPM","text":"df numeric. function returns dataframe TPM normalized counts final clumn containing feature length.","code":""},{"path":"/reference/quickTPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plasmoRUtils — quickTPM","text":"","code":"if (FALSE) { # \\dontrun{ gene_info <- data.frame(GeneID = c(\"gene1\", \"gene2\", \"gene3\"), Length = c(1000, 1500, 2000)) count_matrix <- matrix(c(10, 20, 30, 40, 50, 60),   nrow = 3, ncol = 2,   dimnames = list(c(\"gene1\", \"gene2\", \"gene3\"), c(\"sample1\", \"sample2\")) ) test <- quickTPM(count_matrix, gene_info) } # }"},{"path":"/reference/searchApicoTFdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch data from ApicoTFdb — searchApicoTFdb","title":"Fetch data from ApicoTFdb — searchApicoTFdb","text":"function provides ability query gene IDs ApicoTFDb.","code":""},{"path":"/reference/searchApicoTFdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch data from ApicoTFdb — searchApicoTFdb","text":"","code":"searchApicoTFdb(org = \"pf\")"},{"path":"/reference/searchApicoTFdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch data from ApicoTFdb — searchApicoTFdb","text":"org Abbreviation organism interest. Plasmodium Species: pb: Plasmodium berghii pv: Plasmodium vivax pf: Plasmodium falciparum pk: Plasmodium knowlesi py: Plasmodium yoelii pc: Plasmodium chabaudi Apicomplexan Species tg49: Toxoplasma Gondii ME49 tg89: Toxoplasma Gondii P89 cp: Cryptosporidium parvum em: Eimeria maxima bb: Babesia bovis et: Eimeria tenella nu: Neurospora caninum cy: Cyclospora cayetanensis","code":""},{"path":"/reference/searchApicoTFdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch data from ApicoTFdb — searchApicoTFdb","text":"df function returns dataframe transcription regulators organism interest ApicoTFDb.","code":""},{"path":"/reference/searchApicoTFdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch data from ApicoTFdb — searchApicoTFdb","text":"","code":"if (FALSE) { # \\dontrun{ test <- searchApicoTFdb(org=\"pf\") } # }"},{"path":"/reference/searchGSC.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch articles for given gene IDs from Google Scholar — searchGSC","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"function searches Google Scholar corpus articles contains Gene ID interest.","code":""},{"path":"/reference/searchGSC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"","code":"searchGSC(geneID)"},{"path":"/reference/searchGSC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"geneID Character vector Gene IDs. want use gene symbols, use organism name alongside avoid articles might similar abbreviated word. eg. use \"AP2-P Plasmodium\".","code":""},{"path":"/reference/searchGSC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"data frame, containing 5 columns: GeneID, Title article, Year Publication, Url Authors.","code":""},{"path":"/reference/searchGSC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"Warning: Scraping Google Scholar Terms Service. advise users use function querying IDs (20) per day. Proceeding function may result IP blocked temporarily.","code":""},{"path":"/reference/searchGSC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"","code":"if (FALSE) { # \\dontrun{ test <- searchGSC(c(\"PF3D7_0420300\", \"PF3D7_0621000\")) test <- searchGSC(geneID = c(\"AP2-P AND Plasmodium\",\"AP2-I\")) } # }"},{"path":"/reference/searchHP.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","title":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","text":"function searches Hitpredict database retrieve Experimental Protein-Protein Interaction data.","code":""},{"path":"/reference/searchHP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","text":"","code":"searchHP(geneID, taxid = \"36329\", uniprotToGID = TRUE)"},{"path":"/reference/searchHP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","text":"geneID Single gene ID. taxid Taxon ID organism interest. Default: 36329. uniprotToGID convert Uniprot ID gene ID. Set TRUE Plasmodium geneIDs .","code":""},{"path":"/reference/searchHP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","text":"data frame, containing 11 columns: \"Interaction\", \"Interactor\", \"Name\", \"Experiments\", \"Category\", \"Method.Score\", \"Annotation.Score\", \"Interaction.Score\", \"Confidence\", \"QueryID\", \"ensembl_gene_id\".","code":""},{"path":"/reference/searchHP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","text":"","code":"if (FALSE) { # \\dontrun{ test <- searchHP(\"PF3D7_0418300\")  ## To use it for other organism, turn off uniprotToGID and provide taxid of the organism test <- searchHP(\"BRCA1\",taxid = \"9606\" , uniprotToGID = FALSE) } # }"},{"path":"/reference/searchIpDb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch orthologs from InParanoiDb — searchIpDb","title":"Fetch orthologs from InParanoiDb — searchIpDb","text":"function retrieves Plasmodium gene orthologs InParanoiDB 9 database across life forms","code":""},{"path":"/reference/searchIpDb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch orthologs from InParanoiDb — searchIpDb","text":"","code":"searchIpDb(geneID, ...)"},{"path":"/reference/searchIpDb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch orthologs from InParanoiDb — searchIpDb","text":"geneID Gene ID Plasmodium falciparum. ... Additional arguments can passed toGeneid function.","code":""},{"path":"/reference/searchIpDb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch orthologs from InParanoiDb — searchIpDb","text":"","code":"if (FALSE) { # \\dontrun{ ids <- c(\"PF3D7_0807800\", \"PF3D7_1023900\") df <- searchIpDb(ids) } # }"},{"path":"/reference/searchKipho.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","title":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","text":"function provides ability query gene IDs KiPho Database.","code":""},{"path":"/reference/searchKipho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","text":"","code":"searchKipho(org = \"pf\", type = \"kinase\")"},{"path":"/reference/searchKipho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","text":"org Abbreviation organism interest. Plasmodium Species: pb: Plasmodium berghii pv: Plasmodium vivax pf: Plasmodium falciparum pc: Plasmodium chabaudi type Type protein class .e. \"kinase\" \"phosphatase\". Default: \"kinase\"","code":""},{"path":"/reference/searchKipho.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","text":"df function returns dataframe kinases/phosphatases Plasmodium species.","code":""},{"path":"/reference/searchKipho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","text":"","code":"if (FALSE) { # \\dontrun{ test <- searchKipho(org=\"pf\") } # }"},{"path":"/reference/searchMidb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Minor intron tables from MiDB — searchMidb","title":"Fetch Minor intron tables from MiDB — searchMidb","text":"function provides ability fetch intron class data 265 species MiDB database. information refer MiDB database","code":""},{"path":"/reference/searchMidb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Minor intron tables from MiDB — searchMidb","text":"","code":"searchMidb(org, type = \"intron\")"},{"path":"/reference/searchMidb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Minor intron tables from MiDB — searchMidb","text":"org Name Organism. Can obtained loading midbSpecies data package type Type data fetched. Default: \"intron\"","code":""},{"path":"/reference/searchMidb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Minor intron tables from MiDB — searchMidb","text":"df function returns dataframe intron classification Plasmodium species.","code":""},{"path":"/reference/searchMidb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Minor intron tables from MiDB — searchMidb","text":"","code":"if (FALSE) { # \\dontrun{ load(\"data/midbSpecies.rda\") ## Fetching intron data from MiDB for P. falciparum df <- searchMidb(midbSpecies$`Available Species`[196]) } # }"},{"path":"/reference/searchMiip.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Protein-Protein interactions from MIIP database — searchMiip","title":"Fetch Protein-Protein interactions from MIIP database — searchMiip","text":"function retrieves Protein-protein interaction data MIIP database.","code":""},{"path":"/reference/searchMiip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Protein-Protein interactions from MIIP database — searchMiip","text":"","code":"searchMiip(geneID)"},{"path":"/reference/searchMiip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Protein-Protein interactions from MIIP database — searchMiip","text":"geneID character vector Gene IDs Plasmodium falciparum Plasmodium berghi.Remove version gene ids.","code":""},{"path":"/reference/searchMiip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Protein-Protein interactions from MIIP database — searchMiip","text":"dataframe Protein protein interaction provided MIIP database.","code":""},{"path":"/reference/searchMiip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Protein-Protein interactions from MIIP database — searchMiip","text":"","code":"if (FALSE) { # \\dontrun{  df <- searchMiip(c(\"PF3D7_0807800\",\"PF3D7_1023900\")) } # }"},{"path":"/reference/searchMT.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch data tables from malaria.tools database — searchMT","title":"Fetch data tables from malaria.tools database — searchMT","text":"function retrieves data malaria.tools generates dataframe containing Stage Parasite gene highly expressed.","code":""},{"path":"/reference/searchMT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch data tables from malaria.tools database — searchMT","text":"","code":"searchMT(geneID)"},{"path":"/reference/searchMT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch data tables from malaria.tools database — searchMT","text":"geneID character vector Gene IDs Plasmodium falciparum Plasmodium berghi.","code":""},{"path":"/reference/searchMT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch data tables from malaria.tools database — searchMT","text":"plot (data thereof) TPM values across multiple stages parasite.","code":""},{"path":"/reference/searchMT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch data tables from malaria.tools database — searchMT","text":"","code":"if (FALSE) { # \\dontrun{   geneID <- c(\"PBANKA_0100600\", \"PBANKA_0102900\", \"PF3D7_0102900\")   ## To get condition specificity and tissue specificity data   res <- searchMT(geneID = geneID) } # }"},{"path":"/reference/searchPhPl.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch data tables from PhenoPlasm database — searchPhPl","title":"Fetch data tables from PhenoPlasm database — searchPhPl","text":"function searches Phenotypes gene IDs Phenoplasm database enables users fetch sub-tables Disruptability Mutant phenotypes.","code":""},{"path":"/reference/searchPhPl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch data tables from PhenoPlasm database — searchPhPl","text":"","code":"searchPhPl(geneID = \"\", org = \"pf\", fetch = 1)"},{"path":"/reference/searchPhPl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch data tables from PhenoPlasm database — searchPhPl","text":"geneID Character vector Gene IDs. org Abbreviation organism. Default \"pf\" fetch Numeric. Use 1 fetch \"Disruptability\" table 2 fetch \"Mutant phenotypes\" table. Plasmodium Species: pb: Plasmodium berghii pk: Plasmodium knowlesi pf: Plasmodium falciparum pc: Plasmodium chabaudi py: Plasmodium yoelii","code":""},{"path":"/reference/searchPhPl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch data tables from PhenoPlasm database — searchPhPl","text":"data frame.","code":""},{"path":"/reference/searchPhPl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch data tables from PhenoPlasm database — searchPhPl","text":"","code":"if (FALSE) { # \\dontrun{ ## get phenotype for few genes in plasmodium falciparum df <- searchPhPl(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\",\"PF3D7_0523800\"), org=\"pf\") df <- searchPhPl(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\",\"PF3D7_0523800\"), org=\"pf\", fetch=2)  } # }"},{"path":"/reference/searchPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch articles from PubMed database — searchPM","title":"Fetch articles from PubMed database — searchPM","text":"function searches PubMed corpus articles contains Gene ID interest.","code":""},{"path":"/reference/searchPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch articles from PubMed database — searchPM","text":"","code":"searchPM(   geneID,   org = \"Plasmodium falciparum\",   query = NULL,   from = 2010,   to = 2025,   verbose = TRUE )"},{"path":"/reference/searchPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch articles from PubMed database — searchPM","text":"geneID Character vector Gene IDs. org Scientific name organism. Default \"Plasmodium falciparum\" query String user defined custom queries. wish pass combination od terms use argument. define start year querying articles. define end year querying articles. verbose Disable turn messages printed function.","code":""},{"path":"/reference/searchPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch articles from PubMed database — searchPM","text":"data frame, containing 9 columns: \"pmid\"    \"doi\"     \"title\"   \"year\"    \"month\"   \"day\"     \"jabbrv\"  \"journal\" \"GeneID\" .","code":""},{"path":"/reference/searchPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch articles from PubMed database — searchPM","text":"","code":"if (FALSE) { # \\dontrun{ test <- searchPM(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\")) } # }"},{"path":"/reference/searchTedConsensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch protein domains from TED database — searchTedConsensus","title":"Fetch protein domains from TED database — searchTedConsensus","text":"convenience function quickly access Encyclopedia Domains (TED) database fetch domain boundary information given Uniprot IDs. information column names users requested refer TED database https://ted.cathdb.info/.","code":""},{"path":"/reference/searchTedConsensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch protein domains from TED database — searchTedConsensus","text":"","code":"searchTedConsensus(uniprotid = \"\", returnCATHdesc = TRUE)"},{"path":"/reference/searchTedConsensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch protein domains from TED database — searchTedConsensus","text":"uniprotid character vector uniprot IDs. returnCATHdesc Logical. Set get description CATH ID CATH database.","code":""},{"path":"/reference/searchTedConsensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch protein domains from TED database — searchTedConsensus","text":"data frame, domain boundaries information provided TED. details visit TED database.","code":""},{"path":"/reference/searchTedConsensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch protein domains from TED database — searchTedConsensus","text":"","code":"if (FALSE) { # \\dontrun{ df <- searchTedConsensus( c(\"Q7K6A1\",\"Q8IAP8\",\"C0H4D0\",\"C6KT90\",\"Q8IBJ7\"), returnCATHdesc=FALSE) } # }"},{"path":"/reference/toGeneid.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Other IDs to Ensembl gene IDs — toGeneid","title":"Convert Other IDs to Ensembl gene IDs — toGeneid","text":"convenience function quickly convert Uniprot Entrez Ids Ensembl gene IDs,  using VEuPathDB specialized databases.also provides description gene symbol input Ids.","code":""},{"path":"/reference/toGeneid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Other IDs to Ensembl gene IDs — toGeneid","text":"","code":"toGeneid(   inputid,   from = \"\",   to = \"\",   org = \"Plasmodium falciparum 3D7\",   db = \"plasmodb\",   ... )"},{"path":"/reference/toGeneid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Other IDs to Ensembl gene IDs — toGeneid","text":"inputid character vector IDs. Can Ensembl, Uniprot, Entrez old Pf ids. describe type Input ID. Possible values: \"old\", \"uniprot\". \"entrez\", \"ensembl\" describle type output ID desired. Possible values: \"emsembl\". org Organism IDs belongs .Possible values: toxodb, plasmodb, hostdb, amoebadb, cryptodb, fungidb, giardiadb, microsporidiadb, piroplasmadb, trichdb, tritrypdb. db Database organism present. ... Additional arguments can passed getTable function.","code":""},{"path":"/reference/toGeneid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Other IDs to Ensembl gene IDs — toGeneid","text":"data frame, containing Gene IDs, gene description gene Symbols .","code":""},{"path":"/reference/toGeneid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Other IDs to Ensembl gene IDs — toGeneid","text":"","code":"if (FALSE) { # \\dontrun{ df <- toGeneid( c(\"PF3D7_0420300\", \"PF3D7_0621000\"),       from=\"ensembl\") } # }"},{"path":"/reference/toPfid.html","id":null,"dir":"Reference","previous_headings":"","what":"plasmoRUtils — toPfid","title":"plasmoRUtils — toPfid","text":"convenience function quickly convert Old Pf IDs, Uniprot Entrez Ids Ensembl IDs using PlasmoDB Release 68 Annotation data.also provides description gene symbol input Ids.","code":""},{"path":"/reference/toPfid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plasmoRUtils — toPfid","text":"","code":"toPfid(inputid, from = \"\", to = \"\")"},{"path":"/reference/toPfid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plasmoRUtils — toPfid","text":"inputid character vector IDs. Can Ensembl, Uniprot, Entrez old Pf ids. describe type Input ID. Possible values: \"old\", \"uniprot\". \"entrez\", \"ensembl\" describle type output ID desired. Possible values: \"emsembl\".","code":""},{"path":"/reference/toPfid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plasmoRUtils — toPfid","text":"data frame, containing PFIDs, gene description gene Symbols.","code":""},{"path":"/reference/toPfid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plasmoRUtils — toPfid","text":"","code":"if (FALSE) { # \\dontrun{ df <- toPfid(c(\"PF3D7_0420300\", \"PF3D7_0621000\"), from=\"ensembl\") } # }"},{"path":[]},{"path":"/news/index.html","id":"changes-in-version-development-version","dir":"Changelog","previous_headings":"","what":"Changes in version 1.0.0","title":"plasmoRUtils (development version)","text":"First stable release.","code":""},{"path":"/news/index.html","id":"changes-in-version-development-version-1","dir":"Changelog","previous_headings":"","what":"Changes in version 0.99.1","title":"plasmoRUtils (development version)","text":"Vignettes created.","code":""},{"path":"/news/index.html","id":"changes-in-version-development-version-2","dir":"Changelog","previous_headings":"","what":"Changes in version 0.99.0","title":"plasmoRUtils (development version)","text":"First version created.","code":""}]
