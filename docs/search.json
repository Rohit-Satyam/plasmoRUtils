[{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Gene_ID_Conversion.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Accessing component databases of VEuPathDB","text":"plasmoRUtils package streamlines access VEuPathDB’s family 12 specialized databases ToxoDB, PlasmoDB, PiroplasmaDB (Amos et al. 2022). provides direct data retrieval capabilities VEuPathDB’s RESTful API, enabling seamless integration biological data R workflows. package supports downloading standard customized data tables, making particularly valuable researchers needing combine data multiple sources downstream analysis.","code":"# Load package and some other useful packages by using suppressPackageStartupMessages(   suppressWarnings({     library(plasmoRUtils)     library(dplyr)     library(plyr)}))"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Gene_ID_Conversion.html","id":"gene-id-conversion","dir":"Articles","previous_headings":"","what":"Gene ID Conversion","title":"Accessing component databases of VEuPathDB","text":"common challenge bioinformatics involves mapping different identifier systems across databases. apicomplexan research, might include converting UniProt IDs, legacy gene identifiers, current Ensembl gene IDs. toGeneid() function addresses need retrieving --date annotations VEuPathDB databases, supporting bidirectional conversion various ID types flexible parameter specification.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Gene_ID_Conversion.html","id":"retrieving-gene-annotations-and-alternative-ids","dir":"Articles","previous_headings":"Gene ID Conversion","what":"Retrieving Gene Annotations and Alternative IDs","title":"Accessing component databases of VEuPathDB","text":"toGeneid() function enables annotation retrieval provided Ensembl gene IDs. default, returns essential information including gene names, symbols, outdated gene IDs, protein Uniprot IDs. function’s versatility extends supporting custom field requests customFields parameter, available options documented getTable() help section. Note: Successful ID conversion requires precise organism nomenclature matching VEuPathDB’s conventions. example, Toxoplasma gondii ME49 must include proper spacing special characters. Invalid query Toxoplasma gondiiME49 short forms TgME49. functionality proves particularly valuable enhancing differential expression analysis results comprehensive annotations, enabling complete workflow automation without leaving command-line interfaces HPC systems.","code":"## Get annotations for list of geneIDs for PF3D7 toGeneid(c(\"PF3D7_0420300\", \"PF3D7_0621000\"), from=\"ensembl\") #> # A tibble: 2 × 10 #>   `Gene ID`     `Product Description`        `Gene Strand` `Gene Name or Symbol` #>   <chr>         <chr>                        <chr>         <chr>                 #> 1 PF3D7_0420300 AP2 domain transcription fa… forward       ApiAP2                #> 2 PF3D7_0621000 RNA polymerase subunit sigm… forward       ApSigma               #> # ℹ 6 more variables: `Previous ID(s)` <chr>, `Entrez Gene ID` <chr>, #> #   `UniProt ID(s)` <chr>, `Protein Length` <chr>, `# TM Domains` <chr>, #> #   `SignalP Peptide` <chr> ## Get annotations for list of geneIDs for organisms other than PF3D7 toGeneid(inputid = c(\"TGME49_304740\",\"TGME49_208030\"),from=\"ensembl\",org=\"Toxoplasma gondii ME49\", db=\"toxodb\") #> # A tibble: 2 × 10 #>   `Gene ID`     `Product Description`        `Gene Strand` `Gene Name or Symbol` #>   <chr>         <chr>                        <chr>         <chr>                 #> 1 TGME49_208030 microneme protein MIC4       forward       MIC4                  #> 2 TGME49_304740 rhoptry kinase family prote… reverse       ROP35                 #> # ℹ 6 more variables: `Previous ID(s)` <chr>, `Entrez Gene ID` <chr>, #> #   `UniProt ID(s)` <chr>, `Protein Length` <chr>, `# TM Domains` <chr>, #> #   `SignalP Peptide` <chr>  ## Convert uniprot IDs back to gene IDs. It will also provide Product description and Gene Symbol  toGeneid(inputid = c(\"Q8I1N6\",\"C6KT48\"),from=\"uniprot\",to=\"ensembl\" ) #> # A tibble: 2 × 2 #>   `Gene ID`     `UniProt ID(s)` #>   <chr>         <chr>           #> 1 PF3D7_0420300 Q8I1N6          #> 2 PF3D7_0621000 C6KT48   ## Using customFields to get only columns of interest toGeneid(inputid = c(\"TGME49_304740\",\"TGME49_208030\"),          from=\"ensembl\",org=\"Toxoplasma gondii ME49\",          db=\"toxodb\",          customFields=c(\"primary_key\",\"predicted_go_component\",\"annotated_go_function\")) #> # A tibble: 2 × 3 #>   `Gene ID`     `Computed GO Components` `Curated GO Functions` #>   <chr>         <chr>                    <chr>                  #> 1 TGME49_208030 extracellular region     N/A                    #> 2 TGME49_304740 N/A                      N/A"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Gene_ID_Conversion.html","id":"accessing-preconfigured-data-tables-from-veupathdbs-component-sites","dir":"Articles","previous_headings":"Gene ID Conversion","what":"Accessing Preconfigured Data Tables from VEuPathDB’s component sites","title":"Accessing component databases of VEuPathDB","text":"Since VEuPathDB API documentation specifically encourages use specific organism database quoted , developed getTable() function fetch fields interests database separately. 12 component sites one portal: VEuPathDB.org. component sites : AmoebaDB, CryptoDB, FungiDB, GiardiaDB, HostDB, MicrosporidiaDB, PiroplasmaDB, PlasmoDB, ToxoDB, TrichDB, TriTrypDB VectorBase. record types (dataset organism), running search, portal reaches component sites get search results. means faster use component site directly can. frequently required fields provided help section getTable(). information fields can supplied getTable(), use following steps: Go database interest (Say “PlasmoDB”) Click Annotation, curation identifiers tab left select List IDs Scroll click Build Web Services URL Search >> hyperlink. section Choose Columns: choose fields interest. fields included help section getTable(). However, fields specific particular database dataset related fields (starts “pan_”) excluded. select fields, updated POST section webpage query builder. constituent databases VEuPathDB also provide preconfigured tables can fetched via getTable() function. enable users fetch tables, wrote another function called getPreconfiguredTable() usage shown . Please note MPMP pathway version provided PlasmoDB outdated (03-2019). pathways revised removed entirety. wish access latest MPMP version, can use data(\"mpmp.28Aug2024\") analysis scraped us. wish use geneset MPMP pathway enrichment analysis using pathfindR, can using data(\"pathfindrMPMP\"). Similarly, predictions like TMHMM SignalP InterPro updated given recent funding crunch therefore used caution. discuss separate tutorial. Note: urge users cite original articles related datasets alongside plasmoRUtils.","code":"## To fetch table for all the genes present in an organism  getTable(org=\"Plasmodium falciparum 3D7\", db=\"plasmodb\") %>% head() #> # A tibble: 6 × 10 #>   `Gene ID`     `Product Description`        `Gene Strand` `Gene Name or Symbol` #>   <chr>         <chr>                        <chr>         <chr>                 #> 1 PF3D7_0100100 erythrocyte membrane protei… forward       VAR                   #> 2 PF3D7_0100200 rifin                        reverse       RIF                   #> 3 PF3D7_0100300 erythrocyte membrane protei… reverse       VAR                   #> 4 PF3D7_0100400 rifin                        forward       RIF                   #> 5 PF3D7_0100500 erythrocyte membrane protei… reverse       N/A                   #> 6 PF3D7_0100600 rifin                        reverse       RIF                   #> # ℹ 6 more variables: `Previous ID(s)` <chr>, `Entrez Gene ID` <chr>, #> #   `UniProt ID(s)` <chr>, `Protein Length` <chr>, `# TM Domains` <chr>, #> #   `SignalP Peptide` <chr>  ## User can also provide custom fields. For example we wish to download the P. falciparum 3D7 Proteome and phosphoproteome data during intraerythrocytic development (Quantitative) (Pease et al.)  getTable(org=\"Plasmodium falciparum 3D7\", db=\"plasmodb\", customFields = c(\"primary_key\",\"pan_6365\",\"pan_6366\",\"pan_6367\")) %>% head() #> # A tibble: 6 × 4 #>   `Gene ID` Ring Ave (Global pro…¹ Troph Ave (Global pr…² Schizont Ave (Global…³ #>   <chr>     <chr>                  <chr>                  <chr>                  #> 1 PF3D7_01… N/A                    N/A                    N/A                    #> 2 PF3D7_01… N/A                    N/A                    N/A                    #> 3 PF3D7_01… N/A                    N/A                    N/A                    #> 4 PF3D7_01… N/A                    N/A                    N/A                    #> 5 PF3D7_01… N/A                    N/A                    N/A                    #> 6 PF3D7_01… N/A                    N/A                    N/A                    #> # ℹ abbreviated names: ¹​`Ring Ave (Global proteome and phosphoproteome)`, #> #   ²​`Troph Ave (Global proteome and phosphoproteome)`, #> #   ³​`Schizont Ave (Global proteome and phosphoproteome)` ## Fetch pathway table for all the genes from MPMP database  getPreconfiguredTable(org = \"Plasmodium falciparum 3D7\",db = \"plasmodb\",customField = \"MetabolicPathwaysMPMP\") %>% head() #> # A tibble: 6 × 4 #>   `Gene ID`     pathway_id          Pathway                             Activity #>   <chr>         <chr>               <chr>                               <chr>    #> 1 PF3D7_0100100 struc_telom         Structure of telomere and sub-telo… erythro… #> 2 PF3D7_0100100 PfEMP1              PfEMP1 domain architectures         erythro… #> 3 PF3D7_0100100 PQS                 P. falciparum genes harboring G-qu… erythro… #> 4 PF3D7_0100100 cytoadherencescheme Interactions between modified host… erythro… #> 5 PF3D7_0100100 gene_lumef          Gene expression affected by lumefa… erythro… #> 6 PF3D7_0100100 virulence           Candidate genes related to virulen… erythro…"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Gene_ID_Conversion.html","id":"fetching-genome-metadata-and-strain-names","dir":"Articles","previous_headings":"Gene ID Conversion","what":"Fetching genome metadata and strain names","title":"Accessing component databases of VEuPathDB","text":"examples, saw importance passing exact name org argument toGeneid() function properly. helper function provided achieve called listVeupathdb(). default, 11 columns returned including organism name, respective database present “VEuPathDB Project” column additional information. However, can limit search columns interests shown . stated VEuPathDB: best use VEuPathDB portal get table organisms sites, organism: component site, urls access fasta gff files. Since function also provide URLs FASTA GFF files, can use find URLs files interested import R directly without leaving console.","code":"listVeupathdb() %>% head() #> # A tibble: 6 × 11 #>   Organism                 Species Genome Fasta Downloa…¹ CDS Fasta Download L…² #>   <chr>                    <chr>   <chr>                  <chr>                  #> 1 Edhazardia aedis USNM 4… Edhaza… http://MicrosporidiaD… http://MicrosporidiaD… #> 2 Kluyveromyces marxianus… Kluyve… http://FungiDB.org/co… http://FungiDB.org/co… #> 3 Aspergillus luchuensis … Asperg… http://FungiDB.org/co… http://FungiDB.org/co… #> 4 Epichloe glyceriae E277  Epichl… http://FungiDB.org/co… http://FungiDB.org/co… #> 5 Aspergillus versicolor … Asperg… http://FungiDB.org/co… http://FungiDB.org/co… #> 6 Aspergillus sydowii CBS… Asperg… http://FungiDB.org/co… http://FungiDB.org/co… #> # ℹ abbreviated names: ¹​`Genome Fasta Download Link`, #> #   ²​`CDS Fasta Download Link` #> # ℹ 7 more variables: `Transcript Fasta Download Link` <chr>, #> #   `Protein Fasta Download Link` <chr>, `VEuPathDB Project` <chr>, #> #   Genes <chr>, `GFF Download Link` <chr>, `Genome Source` <chr>, #> #   `Structural Annotation Source` <chr> listVeupathdb(customFields=c(\"species\", \"project_id\")) %>% head() #> # A tibble: 6 × 2 #>   Species                  `VEuPathDB Project` #>   <chr>                    <chr>               #> 1 Entamoeba nuttalli       AmoebaDB            #> 2 Acanthamoeba castellanii AmoebaDB            #> 3 Mastigamoeba balamuthi   AmoebaDB            #> 4 Acanthamoeba sp.         AmoebaDB            #> 5 Acanthamoeba sp.         AmoebaDB            #> 6 Acanthamoeba sp.         AmoebaDB listVeupathdb() %>%    subset(.,Organism ==\"Edhazardia aedis USNM 41457\") %>%    select(`GFF Download Link`) %>% as.character() %>%    rtracklayer::import.gff3() %>% head() #> GRanges object with 6 ranges and 12 metadata columns: #>            seqnames    ranges strand |    source                type     score #>               <Rle> <IRanges>  <Rle> |  <factor>            <factor> <numeric> #>   [1] AFBI030000... 5287-6076      + | VEuPathDB protein_coding_gene        NA #>   [2] AFBI030000... 5287-6076      + | VEuPathDB mRNA                       NA #>   [3] AFBI030000... 5287-6076      + | VEuPathDB exon                       NA #>   [4] AFBI030000... 5447-6043      + | VEuPathDB CDS                        NA #>   [5] AFBI030000... 5287-5446      + | VEuPathDB five_prime_UTR             NA #>   [6] AFBI030000... 6044-6076      + | VEuPathDB three_prime_UTR            NA #>           phase            ID   description   ebi_biotype          Parent #>       <integer>   <character>   <character>   <character> <CharacterList> #>   [1]      <NA>    EDEG_00001 hypothetic... protein_co...                 #>   [2]      <NA> EDEG_00001... hypothetic...          <NA>      EDEG_00001 #>   [3]      <NA> exon_EDEG_...          <NA>          <NA>   EDEG_00001... #>   [4]         0 EDEG_00001...          <NA>          <NA>   EDEG_00001... #>   [5]      <NA> utr_EDEG_0...          <NA>          <NA>   EDEG_00001... #>   [6]      <NA> utr_EDEG_0...          <NA>          <NA>   EDEG_00001... #>       gene_ebi_biotype     gene_id protein_source_id            Note #>            <character> <character>       <character> <CharacterList> #>   [1]             <NA>        <NA>              <NA>                 #>   [2]    protein_co...        <NA>              <NA>                 #>   [3]             <NA>  EDEG_00001              <NA>                 #>   [4]             <NA>  EDEG_00001     EDEG_00001...                 #>   [5]             <NA>        <NA>              <NA>                 #>   [6]             <NA>        <NA>              <NA>                 #>   ------- #>   seqinfo: 342 sequences from an unspecified genome; no seqlengths"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Gene_ID_Conversion.html","id":"mapping-pdb-ids-to-gene-ids","dir":"Articles","previous_headings":"Gene ID Conversion","what":"Mapping PDB IDs to Gene IDs","title":"Accessing component databases of VEuPathDB","text":"currently facility VEuPathDB convert PDB IDs respective gene IDs. PDB ID corresponds multimer complex multiple PDB ids, becomes arduous map Gene IDs manually. provide solution issue, can first convert PDB chains Uniprot IDs using pdb2uniprot() function can use toGeneid() function obtain gene IDs.","code":"pdbids <- c(\"7D2W\",\"4U5A\",\"6E10\") df <- lapply(pdbids, pdb2uniprot) %>% plyr::ldply()  geneids <- toGeneid(inputid = unique(df$attribute),from = \"uniprot\",to = \"ensembl\")  ## Combining the geneIDs with df S4Vectors::merge(df,geneids,all=TRUE, by.x=\"attribute\", by.y=\"UniProt ID(s)\") %>% head() #>    attribute entity_id chain_id struct_asym_id unp_start unp_end #> 1 A0A143ZZR8         1        A              A        27     206 #> 2 A0A143ZZR8         1        B              B        27     206 #> 3     Q75UY1         1        C              C        42     241 #> 4     Q75UY1         1        D              D        42     241 #> 5     Q75UY1         1        A              A        42     241 #> 6     Q75UY1         1        B              B        42     241 #>   start.residue_number start.author_residue_number start.author_insertion_code #> 1                    3                          NA                             #> 2                    3                          NA                             #> 3                    2                          NA                             #> 4                    2                          NA                             #> 5                    2                          NA                             #> 6                    2                          NA                             #>   end.residue_number end.author_residue_number end.author_insertion_code query #> 1                182                       181                            7D2W #> 2                182                       181                            7D2W #> 3                201                        NA                            4U5A #> 4                201                        NA                            4U5A #> 5                201                        NA                            4U5A #> 6                201                        NA                            4U5A #>         Gene ID #> 1 PF3D7_1372300 #> 2 PF3D7_1372300 #> 3          <NA> #> 4          <NA> #> 5          <NA> #> 6          <NA>"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Gene_ID_Conversion.html","id":"session","dir":"Articles","previous_headings":"","what":"Session","title":"Accessing component databases of VEuPathDB","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14 ucrt) #> Platform: x86_64-w64-mingw32/x64 #> Running under: Windows 11 x64 (build 26100) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_India.utf8  LC_CTYPE=English_India.utf8    #> [3] LC_MONETARY=English_India.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=English_India.utf8     #>  #> time zone: Asia/Riyadh #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] plyr_1.8.9         dplyr_1.1.4        plasmoRUtils_1.1.0 rlang_1.1.6        #> [5] readr_2.1.5        janitor_2.2.1      BiocStyle_2.32.1   #>  #> loaded via a namespace (and not attached): #>   [1] segmented_2.1-4             fs_1.6.6                    #>   [3] ProtGenerics_1.36.0         matrixStats_1.5.0           #>   [5] bitops_1.0-9                lubridate_1.9.4             #>   [7] pRoloc_1.44.1               httr_1.4.7                  #>   [9] RColorBrewer_1.1-3          doParallel_1.0.17           #>  [11] ggsci_3.2.0                 tools_4.4.1                 #>  [13] MSnbase_2.30.1              backports_1.5.0             #>  [15] utf8_1.2.6                  R6_2.6.1                    #>  [17] lazyeval_0.2.2              withr_3.0.2                 #>  [19] prettyunits_1.2.0           gridExtra_2.3               #>  [21] preprocessCore_1.66.0       cli_3.6.5                   #>  [23] Biobase_2.64.0              textshaping_1.0.1           #>  [25] gt_1.0.0                    sass_0.4.10                 #>  [27] topGO_2.56.0                mvtnorm_1.3-3               #>  [29] randomForest_4.7-1.2        proxy_0.4-27                #>  [31] pkgdown_2.1.3               Rsamtools_2.20.0            #>  [33] systemfonts_1.2.3           txdbmaker_1.0.1             #>  [35] AnnotationForge_1.46.0      dichromat_2.0-0.1           #>  [37] parallelly_1.45.1           limma_3.60.6                #>  [39] rstudioapi_0.17.1           impute_1.78.0               #>  [41] RSQLite_2.4.1               FNN_1.1.4.1                 #>  [43] generics_0.1.4              BiocIO_1.14.0               #>  [45] vroom_1.6.5                 gtools_3.9.5                #>  [47] car_3.1-3                   dendextend_1.19.1           #>  [49] GO.db_3.19.1                Matrix_1.7-1                #>  [51] MALDIquant_1.22.3           drawProteins_1.24.0         #>  [53] S4Vectors_0.42.1            abind_1.4-8                 #>  [55] lifecycle_1.0.4             yaml_2.3.10                 #>  [57] snakecase_0.11.1            carData_3.0-5               #>  [59] SummarizedExperiment_1.34.0 recipes_1.3.1               #>  [61] SparseArray_1.4.8           BiocFileCache_2.12.0        #>  [63] grid_4.4.1                  blob_1.2.4                  #>  [65] promises_1.3.3              crayon_1.5.3                #>  [67] PSMatch_1.8.0               lattice_0.22-6              #>  [69] beachmat_2.20.0             annotate_1.82.0             #>  [71] GenomicFeatures_1.56.0      chromote_0.5.1              #>  [73] mzR_2.38.0                  KEGGREST_1.44.1             #>  [75] pillar_1.11.0               knitr_1.50                  #>  [77] GenomicRanges_1.56.2        rjson_0.2.23                #>  [79] lpSolve_5.6.23              future.apply_1.20.0         #>  [81] codetools_0.2-20            mgsub_1.7.3                 #>  [83] glue_1.8.0                  pcaMethods_1.96.0           #>  [85] data.table_1.17.8           MultiAssayExperiment_1.30.3 #>  [87] vctrs_0.6.5                 png_0.1-8                   #>  [89] gtable_0.3.6                kernlab_0.9-33              #>  [91] cachem_1.1.0                gower_1.0.2                 #>  [93] xfun_0.52                   prodlim_2025.04.28          #>  [95] S4Arrays_1.4.1              polyglotr_1.7.0             #>  [97] coda_0.19-4.1               survival_3.8-3              #>  [99] ncdf4_1.24                  timeDate_4041.110           #> [101] SingleCellExperiment_1.26.0 iterators_1.0.14            #> [103] hardhat_1.4.1               lava_1.8.1                  #> [105] statmod_1.5.0               MLInterfaces_1.84.0         #> [107] ipred_0.9-15                nlme_3.1-166                #> [109] bit64_4.6.0-1               progress_1.2.3              #> [111] filelock_1.0.3              LaplacesDemon_16.1.6        #> [113] GenomeInfoDb_1.40.1         bslib_0.9.0                 #> [115] affyio_1.74.0               irlba_2.3.5.1               #> [117] rpart_4.1.23                colorspace_2.1-1            #> [119] BiocGenerics_0.50.0         DBI_1.2.3                   #> [121] nnet_7.3-19                 tidyselect_1.2.1            #> [123] processx_3.8.6              bit_4.6.0                   #> [125] compiler_4.4.1              curl_6.4.0                  #> [127] rvest_1.0.4                 httr2_1.2.0                 #> [129] graph_1.82.0                SparseM_1.84-2              #> [131] xml2_1.3.8                  desc_1.4.3                  #> [133] DelayedArray_0.30.1         plotly_4.11.0               #> [135] bookdown_0.43               rtracklayer_1.64.0          #> [137] scales_1.4.0                hexbin_1.28.5               #> [139] affy_1.82.0                 rappdirs_0.3.3              #> [141] stringr_1.5.1               digest_0.6.37               #> [143] mixtools_2.0.0.1            rmarkdown_2.29              #> [145] XVector_0.44.0              htmltools_0.5.8.1           #> [147] pkgconfig_2.0.3             SingleR_2.6.0               #> [149] sparseMatrixStats_1.16.0    MatrixGenerics_1.16.0       #> [151] dbplyr_2.5.0                fastmap_1.2.0               #> [153] htmlwidgets_1.6.4           UCSC.utils_1.0.0            #> [155] DelayedMatrixStats_1.26.0   farver_2.1.2                #> [157] jquerylib_0.1.4             jsonlite_2.0.0              #> [159] mclust_6.1.1                BiocParallel_1.38.0         #> [161] mzID_1.42.0                 ModelMetrics_1.2.2.2        #> [163] BiocSingular_1.20.0         RCurl_1.98-1.17             #> [165] magrittr_2.0.3              scuttle_1.14.0              #> [167] Formula_1.2-5               GenomeInfoDbData_1.2.12     #> [169] Rcpp_1.1.0                  viridis_0.6.5               #> [171] MsCoreUtils_1.16.1          vsn_3.72.0                  #> [173] pROC_1.18.5                 stringi_1.8.7               #> [175] zlibbioc_1.50.0             MASS_7.3-61                 #> [177] listenv_0.9.1               parallel_4.4.1              #> [179] Biostrings_2.72.1           splines_4.4.1               #> [181] hms_1.1.3                   ps_1.9.1                    #> [183] igraph_2.1.4                ggpubr_0.6.1                #> [185] QFeatures_1.14.2            ggsignif_0.6.4              #> [187] reshape2_1.4.4              biomaRt_2.60.1              #> [189] stats4_4.4.1                ScaledMatrix_1.12.0         #> [191] XML_3.99-0.18               evaluate_1.0.4              #> [193] BiocManager_1.30.26         tzdb_0.5.0                  #> [195] foreach_1.5.2               tidyr_1.3.1                 #> [197] purrr_1.1.0                 future_1.67.0               #> [199] clue_0.3-66                 bio3d_2.4-5                 #> [201] ggplot2_3.5.2               rsvd_1.0.5                  #> [203] xtable_1.8-4                broom_1.0.8                 #> [205] restfulr_0.0.16             AnnotationFilter_1.28.0     #> [207] easyPubMed_2.13             e1071_1.7-16                #> [209] rstatix_0.7.2               later_1.4.2                 #> [211] class_7.3-22                viridisLite_0.4.2           #> [213] ragg_1.4.0                  tibble_3.3.0                #> [215] websocket_1.4.4             memoise_2.0.1               #> [217] AnnotationDbi_1.66.0        GenomicAlignments_1.40.0    #> [219] IRanges_2.38.1              cluster_2.1.8               #> [221] globals_0.18.0              timechange_0.3.0            #> [223] caret_7.0-1                 sampling_2.11"},{"path":[]},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to plasmoRUtils","text":"downloading package, install following dependencies. plasmoRUtils package available CRAN can installed follows:","code":"## Easiest way to install package and it's dependencies  pak::pkg_install(\"Rohit-Satyam/plasmoRUtils\", dependencies = TRUE)  cranpkgs <- c('BiocManager','randomcoloR', 'janitor', 'readr', 'rlang', 'dplyr', 'ggsci', 'rvest', 'easyPubMed', 'plyr', 'scales', 'ggplot2', 'glue', 'tidyr', 'tibble', 'data.table', 'plotly', 'purrr', 'stringr', 'S4Vectors', 'echarts4r', 'magrittr', 'bio3d', 'httr', 'jsonlite', 'ggpubr', 'gt', 'mgsub', 'reshape2','pathfindR')  install.packages(setdiff(cranpkgs, rownames(installed.packages())), dependencies = TRUE)  biocpkgs <- c(\"rmarkdown\",\"pRoloc\",\"knitr\",\"BiocStyle\",\"DESeq2\",\"styler\",\"utils\",\"IRanges\",\"BiocGenerics\",\"rtracklayer\",\"scuttle\",\"txdbmaker\",\"topGO\",\"drawProteins\",\"GenomicFeatures\",\"biomaRt\",\"AnnotationForge\",\"Biostrings\",\"GenomeInfoDb\",\"SingleCellExperiment\",\"SingleR\",\"NOISeq\",\"GenomicRanges\",\"BSgenome\")  BiocManager::install(setdiff(biocpkgs, rownames(installed.packages())), dependencies = TRUE) install.packages(\"plasmoRUtils\")  # Once installed load the library as library(plasmoRUtils)  ## To re-check if all the dependencies that are required by plasmoRUtils are installed install_dependencies()"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to plasmoRUtils","text":"Using plasmoRUtils, users can fetch data VEuPathDB 12 component sites databases (VEuPathDBs) transform formats compatible R packages straightforward manner. Data tables (preconfigured user-configured) can downloaded VEuPathDBs directly within R/RStudio, thanks variety R functions RESTful API provided VEuPathDBs. databases lack APIs, developed database-specific “searchX” functions (X represents database) utilize rvest package web crawling retrieve data, transformed tables can saved shared. Additionally, created function enable programmatic access MPMP database first time, allowing users download share data tables convenience. package also provides several data sets reanalyzed using latest annotations VEuPathDBs can used various functions. Databases covered includes: HitPredict ApicoTFDB Malaria.tools Malaria Parasite Metabolic Pathways (MPMP) database Malaria Important Interacting Proteins (MIIP) Phenoplasm Uniprot Malaria Cell Atlas, etc. exhaustive list, see subsections .","code":"# Load package and some other useful packages by using suppressPackageStartupMessages(   suppressWarnings({     library(plasmoRUtils)     library(dplyr)     library(plyr)}))"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"accessing-databases-with-plasmorutils-search-functions","dir":"Articles","previous_headings":"","what":"Accessing databases with plasmoRUtils search functions","title":"Introduction to plasmoRUtils","text":"plasmoRUtils package several search function fetch information databases. functions tabulated :","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"searchapidotfdb","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchApidoTFdb()","title":"Introduction to plasmoRUtils","text":"function helps user fetch transcription factors particular apicomplexan interest ApicoTFDb(Sardar et al. 2019). ease usage organism names abbreviated follows Table : Using function relatively easy can achieved ","code":"## Searching all plasmodium TFs searchApicoTFdb(org=\"pf\") %>% head() #> # A tibble: 6 × 4 #>   `Gene ID`     `Protein Length` `Product Description`              `TF- Family` #>   <chr>         <chr>            <chr>                              <chr>        #> 1 PF3D7_1319600 1633             ACDC domain-containing protein, p… AP2          #> 2 PF3D7_0604100 1979             AP2 domain transcription factor    AP2          #> 3 PF3D7_1222400 2558             AP2 domain transcription factor    AP2          #> 4 PF3D7_1222600 2432             AP2 domain transcription factor A… AP2          #> 5 PF3D7_1408200 1702             AP2 domain transcription factor A… AP2          #> 6 PF3D7_1007700 1597             AP2 domain transcription factor A… AP2 ## Searching all cyclospora TFs searchApicoTFdb(org=\"tg49\") %>% head() #> # A tibble: 6 × 4 #>   `Gene ID`     `Product Description`              `Protein Length` `TF- Family` #>   <chr>         <chr>                              <chr>            <chr>        #> 1 TGME49_200385 Myb family DNA-binding domain-con… 2258             Myb/SANT     #> 2 TGME49_201220 zinc finger protein                603              BBOX         #> 3 TGME49_201790 FHA domain-containing protein      556              FHA          #> 4 TGME49_202690 DNA-directed RNA polymerase II RP… 250              General-TF   #> 5 TGME49_202840 FHA domain-containing protein      1044             FHA          #> 6 TGME49_202900 zinc finger (CCCH type) motif-con… 1298             Zn-Finger  ## Fetch all Experimentally validated TRs searchApicoTFdb(fetch = \"exptfs\") %>% head() #> # A tibble: 6 × 7 #>   Gene_ID        Source Author   Year  Product         Pubmed Orthologous_Groups #>   <chr>          <chr>  <chr>    <chr> <chr>           <chr>  <chr>              #> 1 cgd2_3490      PBM    DeSilva  2008  AP2/ERF domain… 18541… OG5_147419         #> 2 NCLIV_058430   PBM    Campbell 2010  unspecified pr… 21060… OG5_241106         #> 3 NCLIV_059950   PBM    Campbell 2010  unspecified pr… 21060… OG5_241143         #> 4 PBANKA_0102900 PBM    DeSilva  2008  AP2 domain tra… 18541… OG5_150514         #> 5 PBANKA_0214400 PBM    Campbell 2010  AP2 domain tra… 21060… OG5_157023         #> 6 PBANKA_0905900 PBM    Campbell 2010  AP2 domain tra… 21060… OG5_154773"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"searchgsc","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchGSC()","title":"Introduction to plasmoRUtils","text":"Sometimes, difficult keep track corpus working gene interest might want keep competing groups across globe. searchGSC() function can help collect necessary literature gene ID interest mentioned return results form data frame. Since Google Scholar searches restricted Article abstracts extends till supplementary section, function can helpful capture articles mentions gene ID interest otherwise missed normal Google search. Besides, since pre-print literature indexed Google Scholar, can also find papers competing groups yet peer-reviewed. Note: like warn users function experimental seen get IP blocked temporarily 24 hrs used 20 times. large array genes, encourage users use specialized APIs.","code":"## Fetch all the papers between year 2018 and 2021 searchGSC(   geneIDs=c(\"PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 OR PFD0985w\",\"PF3D7_0621000\",             \"PF3D7_0420300OR\"),   translate = \"en\",  ## to translate the non-english titles   year_start = 2018,    year_end   = 2021, max_pages = 2) #> # A tibble: 21 × 6 #>    Query                                   Title Url   Authors  Year translation #>    <chr>                                   <chr> <chr> <chr>   <int> <chr>       #>  1 PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 … The … http… EFG Cu…  2021 The Transc… #>  2 PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 … A si… http… E Real…  2021 A single-c… #>  3 PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 … The … http… DR Alv…  2021 The RNA st… #>  4 PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 … Full… http… M Yang…  2021 Full-Lengt… #>  5 PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 … Dete… http… A Bios…  2020 Detection … #>  6 PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 … An A… http… E Cubi…  2020 An ApiAP2 … #>  7 PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 … Refi… http… L Chap…  2020 Refining t… #>  8 PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 … Tran… http… SE Lin…  2019 Transcript… #>  9 PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 … Exte… http… SE Lin…  2019 Extensive … #> 10 PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 … ApiA… http… MD Jen…  2019 ApiAP2 tra… #> # ℹ 11 more rows"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"searchhp","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchHP()","title":"Introduction to plasmoRUtils","text":"function enables search HitPredict(López, Nakai, Patil 2015) database procure high-confidence Protein-Protein interactions(PPI) organism interest. requires gene ID taxon ID. HitPredict database provides PPI data form Uniprot IDs always ideal apicomplexan biologists. Therefore, provide functionality convert Uniprot IDs back gene IDs setting uniprotToGID=TRUE . Since apicomplexan HitPredict Plasmodium falciparum gene ID mapping conversion functionality limited Plasmodium. turned , using non-apicomplexan organism shown . Another scenario users might interested setting uniportToGID=FALSE might querying thousands IDs. Since ID conversion carried using biomaRt, might redundant convert Uniprot ID multiple times multiple interacting partners. convenience, therefore provide another function toGeneid() quickly converts Uniprot IDs back Ensembl IDs.","code":"## Single gene query searchHP(\"PF3D7_0418300\") %>% head() #>   Interactor Interaction       Name Experiments        Category Method.Score #> 1 A0A5K1K7X4       47066 A0A5K1K7X4           1 High-throughput         0.35 #> 2     C0H4E0       86712     C0H4E0           1 High-throughput         0.39 #> 3     C0H4U4       86784     C0H4U4           1 High-throughput         0.39 #> 4     C0H586       86859     C0H586           1 High-throughput         0.39 #> 5     C0H5G3       86921     C0H5G3           1 High-throughput         0.39 #> 6     Q8I398     1301310     Q8I398           1 High-throughput         0.49 #>   Annotation.Score Interaction.Score Confidence       QueryID       Gene ID #> 1             0.16             0.238        Low PF3D7_0418300 PF3D7_0532100 #> 2             0.16             0.251        Low PF3D7_0418300 PF3D7_0515400 #> 3             0.16             0.251        Low PF3D7_0418300 PF3D7_0813300 #> 4             0.16             0.251        Low PF3D7_0418300 PF3D7_0933200 #> 5             0.16             0.251        Low PF3D7_0418300 PF3D7_1341300 #> 6             0.16             0.282       High PF3D7_0418300 PF3D7_0905100  ## To use it for other organism, turn off uniprotToGID and provide taxid of the organism test <- searchHP(\"BRCA1\",taxid = \"3702\" , uniprotToGID = FALSE)  ## Multiple gene query res <- lapply(c(\"PF3D7_0418300\",\"PF3D7_1118500\"), function(x){searchHP(x,uniprotToGID = FALSE)})%>% plyr::ldply()  res %>% tail() #>    Interaction Interactor       Name Experiments        Category Method.Score #> 15       86921     C0H5G3     C0H5G3           1 High-throughput         0.39 #> 16       47066 A0A5K1K7X4 A0A5K1K7X4           1 High-throughput         0.35 #> 17     1301321     Q9U0N1     Q9U0N1           1 High-throughput         0.35 #> 18     1303056     Q8IJG6     Q8IJG6           1 High-throughput         0.49 #> 19       91252     C6KTD2       SET1           1 High-throughput         0.39 #> 20     1301317     Q8I1Q4     Q8I1Q4           1 High-throughput         0.49 #>    Annotation.Score Interaction.Score Confidence       QueryID #> 15             0.16             0.251        Low PF3D7_0418300 #> 16             0.16             0.238        Low PF3D7_0418300 #> 17             0.16             0.238        Low PF3D7_0418300 #> 18             0.50             0.494       High PF3D7_1118500 #> 19             0.50             0.439       High PF3D7_1118500 #> 20             0.16             0.282       High PF3D7_1118500  ## You can now use toGeneid function which uses PlasmoDB release 68 annotation to ## map the uniprot IDs back to the gene IDs toGeneid(res$Interactor,from = \"uniprot\",\"ensembl\") %>% full_join(., res, by = c(\"UniProt ID(s)\" = \"Interactor\")) #> # A tibble: 20 × 11 #>    `Gene ID` `UniProt ID(s)` Interaction Name  Experiments Category Method.Score #>    <chr>     <chr>                 <int> <chr>       <int> <chr>           <dbl> #>  1 PF3D7_01… Q9U0N1              1301321 Q9U0…           1 High-th…         0.35 #>  2 PF3D7_04… Q8I1Q4              1301317 Q8I1…           1 High-th…         0.49 #>  3 PF3D7_05… C0H4E0                86712 C0H4…           1 High-th…         0.39 #>  4 PF3D7_05… Q8I3J7              1301311 Q8I3…           1 High-th…         0.49 #>  5 PF3D7_05… A0A5K1K7X4            47066 A0A5…           1 High-th…         0.35 #>  6 PF3D7_06… C6KTD2                91252 SET1            1 High-th…         0.39 #>  7 PF3D7_08… Q8IAM0              1301313 Q8IA…           1 High-th…         0.49 #>  8 PF3D7_08… C0H4U4                86784 C0H4…           1 High-th…         0.39 #>  9 PF3D7_08… Q8IB88              1301314 Q8IB…           1 High-th…         0.49 #> 10 PF3D7_09… Q8I398              1301310 Q8I3…           1 High-th…         0.49 #> 11 PF3D7_09… C0H586                86859 C0H5…           1 High-th…         0.39 #> 12 PF3D7_10… Q8IJG6              1301319 Q8IJ…           1 High-th…         0.49 #> 13 PF3D7_10… Q8IJG6              1303056 Q8IJ…           1 High-th…         0.49 #> 14 PF3D7_11… Q8IIP2              1301318 Q8II…           1 High-th…         0.49 #> 15 PF3D7_11… Q8III3              1301317 Q8II…           1 High-th…         0.49 #> 16 PF3D7_12… Q8I5D2              1301312 MSP9            1 High-th…         0.49 #> 17 PF3D7_13… Q8IET8              1301316 Q8IE…           1 High-th…         0.49 #> 18 PF3D7_13… Q8IEM0              1301315 Q8IE…           1 High-th…         0.49 #> 19 PF3D7_13… C0H5G3                86921 C0H5…           1 High-th…         0.39 #> 20 PF3D7_14… Q8IKF6              1301320 Q8IK…           1 High-th…         0.49 #> # ℹ 4 more variables: Annotation.Score <dbl>, Interaction.Score <dbl>, #> #   Confidence <chr>, QueryID <chr>"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"searchipdb","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchIpDb()","title":"Introduction to plasmoRUtils","text":"function enables search InParanoiDB 9 (Persson Sonnhammer 2023) database procure high-confidence orthologs organism interest. input required character vector gene IDs Uniprot IDs. case gene IDs, ids converted Uniprot IDs first comply InParanoiDB API query format. provide gene ID Uniprot ID conversion organisms covered VEuPathDB searchIpDb() function use toGeneid() function fetch Uniprot IDs. Users can separately convert gene IDs uniprot IDs well using R packages biomaRt R package. might see Uniprot ID failing Q2KNU4 Q2KNU5 respective URLs. Uniprot IDs missing InParanoiDB 9 database either either old discontinued missing database. converting gene IDs Uniprot IDs, function try querying Uniprot IDs provided VEuPathDB.","code":"## Using Gene IDs searchIpDb( c(\"PF3D7_0807800\", \"PF3D7_1023900\")) %>% head() #> success Q8IAR6 #> success Q8IJG6 #> # A tibble: 6 × 10 #>   `#Unique_group_id` Species       TaxID Protein Gene_name Score Inparalog_score #>                <dbl> <chr>         <dbl> <chr>   <chr>     <dbl>           <dbl> #> 1           67442957 Perkinsus m… 423536 C5LD32  Pmar_PMA…   126           1     #> 2           67442957 Perkinsus m… 423536 C5L7W9  Pmar_PMA…   126           0.397 #> 3           67442957 Plasmodium …  36329 Q8IAR6  PF3D7_08…   126           1     #> 4           71821781 Plasmodium … 126793 A5KAC7  PVX_0881…   515           1     #> 5           71821781 Plasmodium …  36329 Q8IAR6  PF3D7_08…   515           1     #> 6          135850834 Plasmodium …  36329 Q8IAR6  PF3D7_08…   179           1     #> # ℹ 3 more variables: Seed_score <dbl>, Description <chr>, queryid <chr>  ## Using uniprot IDs searchIpDb( c(\"C5LD32\", \"A5KAC7\"),idtype = \"uniprot\") %>% head() #> success C5LD32 #> success A5KAC7 #> # A tibble: 6 × 10 #>   `#Unique_group_id` Species       TaxID Protein Gene_name Score Inparalog_score #>                <dbl> <chr>         <dbl> <chr>   <chr>     <dbl>           <dbl> #> 1            1360218 Perkinsus m… 4.24e5 C5LD32  Pmar_PMA…   171           1     #> 2            1360218 Perkinsus m… 4.24e5 C5L7W9  Pmar_PMA…   171           0.354 #> 3            1360218 Dentipellis… 1.88e6 A0A5B1… DENSPDRA…   171           1     #> 4            2468578 Oryzias lat… 8.09e3 H2M0M9  LOC10117…   158           1     #> 5            2468578 Perkinsus m… 4.24e5 C5LD32  Pmar_PMA…   158           1     #> 6            2468578 Oryzias lat… 8.09e3 H2L3R1  LOC10115…   158           0.759 #> # ℹ 3 more variables: Seed_score <dbl>, Description <chr>, queryid <chr>"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"searchkipho","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchKipho()","title":"Introduction to plasmoRUtils","text":"functions let fetch Malaria Parasite Kinome-Phosphatome Resource (KiPho) database (Pandey, Kumar, Gupta 2017) without leaving R. organism KiPho includes (see ): Beside organism, user needs specify type=\"kinase\" fetch Kinome \"type=phosphatase\" fetch Phosphatome.","code":"searchKipho(org=\"pf\",type = \"kinase\") #> # A tibble: 148 × 7 #>    `Gene ID`     `Previous ID(s)`   `Product Description`       `Protein Length` #>    <chr>         <chr>              <chr>                                  <int> #>  1 PF3D7_0102600 PFA0130c;MAL1P1.17 serine/threonine protein k…              630 #>  2 PF3D7_0103700 PFA0185w;MAL1P1.23 L-seryl-tRNA(Sec) kinase, …              535 #>  3 PF3D7_0107600 PFA0380w;MAL1P2.04 serine/threonine protein k…             1595 #>  4 PF3D7_0110600 PFA0515w;MAL1P2.32 phosphatidylinositol-4-pho…             1710 #>  5 PF3D7_0110900 PFA0530c;MAL1P2.35 adenylate kinase-like prot…              186 #>  6 PF3D7_0111500 PFA0555c;MAL1P2.40 UMP-CMP kinase, putative                 371 #>  7 PF3D7_0203100 PFB0150c;PF02_0030 protein kinase, putative                2485 #>  8 PF3D7_0211700 PFB0520w;PF02_0109 tyrosine kinase-like prote…             1233 #>  9 PF3D7_0213400 PFB0605w;PF02_0125 protein kinase 7 (PK7)                   343 #> 10 PF3D7_0214600 PFB0665w;PF02_0137 serine/threonine protein k…             1714 #> # ℹ 138 more rows #> # ℹ 3 more variables: `Conserved Protein Domain Family(Accession No)` <chr>, #> #   `Conserved Protein Domain Family(Name)` <chr>, `Ortholog Group` <chr> searchKipho(org=\"pf\",type = \"phosphatase\") #> # A tibble: 70 × 7 #>    `Gene ID`     `Previous ID(s)`   `Product Description`       `Protein Length` #>    <chr>         <chr>              <chr>                                  <int> #>  1 PF3D7_0107200 PFA0350w;MAL1P1.64 carbon catabolite represso…              337 #>  2 PF3D7_0107800 PFA0390w           double-strand break repair…             1233 #>  3 PF3D7_0303200 PFC0150w           HAD superfamily protein pu…             1162 #>  4 PF3D7_0305600 PFC0250c           AP endonuclease (DNA-[apur…              617 #>  5 PF3D7_0309000 PFC0380w           dual specificity protein p…              575 #>  6 PF3D7_0310300 PFC0430w           phosphoglycerate mutase pu…             1165 #>  7 PF3D7_0314400 PFC0595c           serine/threonine protein p…              308 #>  8 PF3D7_0319200 PFC0850c           endonuclease/exonuclease/p…              906 #>  9 PF3D7_0322100 PFC0980c           RNA triphosphatase (Prt1)                591 #> 10 PF3D7_0410300 PFD0505c;PFD0510c  protein phosphatase PPM1 p…              906 #> # ℹ 60 more rows #> # ℹ 3 more variables: `Conserved Protein Domain Family(Accession_No)` <chr>, #> #   `Conserved Protein Domain Family(Name)` <chr>, `Ortholog Group` <chr>"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"searchmidb","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchMidb()","title":"Introduction to plasmoRUtils","text":"function enables fetch minor-introns information MiDB database bulk. default, intron classes fetched (major-like, major_hybrid, minor-like, minor_hybrid, non-canonical). information minor introns visit MiDB database.","code":"## Let's see what organisms are present in MiDB data(\"midbSpecies\")  df <- searchMidb(\"Toxoplasma gondii ME49\") df %>% head()"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"searchmiip","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchMiip()","title":"Introduction to plasmoRUtils","text":"function enables fetch Protein-protein interaction pairs Plasmodium falciparum respective stage (sexual asexual) interact MIIP database.","code":"searchMiip(c(\"PF3D7_0807800\",\"PF3D7_1023900\")) #> # A tibble: 4 × 5 #>   interactorA   descriptionA                      interactorB descriptionB stage #>   <chr>         <chr>                             <chr>       <chr>        <chr> #> 1 PF3D7_0807800 26S proteasome regulatory subuni… PF3D7_0710… conserved P… game… #> 2 PF3D7_1023900 chromodomain-helicase-DNA-bindin… PF3D7_1014… protein KIC8 game… #> 3 PF3D7_1023900 chromodomain-helicase-DNA-bindin… PF3D7_1138… protein KIC5 ring  #> 4 PF3D7_1335100 merozoite surface protein 7       PF3D7_1023… chromodomai… schi…"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"searchpm","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchPM()","title":"Introduction to plasmoRUtils","text":"Aside searchGSC can also use searchPM() fetch literature information gene IDs interest mentioned. however limit search title abstract keywords. background, makes use easyPubMed() functions get_pubmed_ids articles_to_list transforms output form table easy explore Gene IDs results available shown screen. However, query successful, function also prints exact query can used reproducibility purposes. behavior can turned lot gene IDs using verbose=FALSE.","code":"searchPM(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\")) #> PubMed Query used for PF3D7_0420300 was:  #>  \"Plasmodium falciparum\"[All Fields] AND \"PF3D7_0420300\"[Title/Abstract:~0] AND 2010/01/01:2025/12/31[Date - Publication] #>       pmid                       doi #> 1 39412522       10.7554/eLife.92201 #> 2 30526479 10.1186/s12864-018-5257-x #>                                                                                                                                      title #> 1 A  Plasmodium falciparum  MORC protein complex modulates epigenetic control of gene expression through interaction with heterochromatin. #> 2    Schizont transcriptome variation among clinical isolates and laboratory-adapted clones of the malaria parasite Plasmodium falciparum. #>   year month day       jabbrv      journal        GeneID #> 1 2024    10  16        Elife        eLife PF3D7_0420300 #> 2 2019    03  18 BMC Genomics BMC genomics PF3D7_0420300 \"Plasmodium falciparum\"[All Fields] AND \"PF3D7_0420300\"[Title/Abstract:~0] AND 2010/01/01:2025/12/31[Date - Publication]"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"searchphpl","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchPhPl()","title":"Introduction to plasmoRUtils","text":"convenience function allow users fetch Disruptability Mutant Phenotypes tables gene interest PhenoPlasm database. fetch=1 helps fetch Disruptability fetch=2 helps fetch Mutant Phenotype table. Oftentimes, like get summary table like one plotted PhenoPlasm combines Disruptability Mutant Phenotype information. Rather using screen grab get snapshot table, one can now download table Advanced Search button submitting geneIDs interest can feed file easyPhplplottbl() function plasmoRUtils render table phenotype.txt files directly Windows users might face issues saving plots pdf directly case, tables can saved HTML files can converted SVG PDF formats using various online converters combine plots. Note: per Phenotype taxonomy Phenoplasm, database uses “D” Difference wild-type Egress defect confusing difficult resolve programmatically. example PF3D7_1337800 “D S D” “Gene Asexual”. requested database maintainer fix , please watch borderline cases like .","code":"searchPhPl(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\",\"PF3D7_0523800\"), org=\"pf\",fetch = 1) %>% head() #>             Species Disruptability                          Reference #> 1 P. falciparum 3D7     Refractory USF piggyBac screen (Insert. mut.) #> 2 P. falciparum 3D7     Refractory USF piggyBac screen (Insert. mut.) #> 3 P. falciparum 3D7     Refractory       354041168 ko attempts failed #>                                 Submitter      QueryGID #> 1                     USF PiggyBac Screen PF3D7_0621000 #> 2                     USF PiggyBac Screen PF3D7_0523800 #> 3 Theo Sanderson, Francis Crick Institute PF3D7_0523800 searchPhPl(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\",\"PF3D7_0523800\"), org=\"pf\", fetch=2) %>% head() #> # A tibble: 1 × 6 #>   Species           Stage   Phenotype               Reference Submitter QueryGID #>   <chr>             <chr>   <chr>                   <chr>     <chr>     <chr>    #> 1 P. falciparum 3D7 Asexual Difference from wild-t… \"PMID 39… Paul Sig… PF3D7_0… # Read the file df <- read.csv(\"phenotype.txt\", skip = 2, sep = \"\\t\") %>% dplyr::select(-3, -4) %>% #remove the empty cols: GeneLocalisation and OrthologLocalisation dplyr::rename_with(~ gsub(\"Sprozoite\", \"Sporozoite\", .x)) #Correct the colnames  easyPhplplottbl(df)  ## Or you can pass the file path directly easyPhplplottbl(\"phenotype.txt\") #Load sample data (subset of genes from phenotype.txt file above) data(pf3d7PhplTable) easyPhplplottbl(pf3d7PhplTable)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"searchtedconsensus","dir":"Articles","previous_headings":"Accessing databases with plasmoRUtils search functions","what":"searchTedConsensus()","title":"Introduction to plasmoRUtils","text":"function helps users fetch domain information Encyclopedia Domains database given set uniprot IDs. Usually table contains numeric CATH labels difficult comprehend user click one one find domain name. enable conversion CATH labels description using returnCATHdesc=TRUE. try scrap labels given CATH label CATH database wherever possible. example , C0H4D0 CATH label 3.30.70.2380. superfamily doesn’t name. Besides, sometimes instead Superfamily CATH labels, TED might use CATH-Gene3D Hierarchy. description returned cases.","code":"searchTedConsensus(c(\"Q7K6A1\",\"Q8IAP8\",\"C0H4D0\",\"C6KT90\",\"Q8IBJ7\"), returnCATHdesc=FALSE) #>                        ted_id uniprot_acc                       md5_domain #> 1 AF-Q7K6A1-F1-model_v4_TED01      Q7K6A1 b99e920f0ded31aa96af0ef9be1338f4 #> 2 AF-C0H4D0-F1-model_v4_TED01      C0H4D0 cd912dcbbb5d070cbb254c0a88278fe4 #> 3 AF-C6KT90-F1-model_v4_TED02      C6KT90 70d20592d9f682bff23dc6188f318244 #> 4 AF-C6KT90-F1-model_v4_TED01      C6KT90 7cc174ebefe723733b6e63508fd23a9e #> 5 AF-Q8IBJ7-F1-model_v4_TED01      Q8IBJ7 71697d50571d5fe2331a13ff16503478 #>   consensus_level chopping nres_domain num_segments   plddt #> 1            high    6-376         371            1 97.1740 #> 2          medium   55-153          99            1 88.9028 #> 3          medium  322-382          61            1 45.3118 #> 4          medium  172-203          32            1 48.8553 #> 5          medium    54-88          35            1 87.3500 #>   num_helix_strand_turn num_helix num_strand num_helix_strand num_turn #> 1                    60        16          8               24       35 #> 2                    15         5          4                9        6 #> 3                     3         3          0                3        0 #> 4                     2         1          0                1        1 #> 5                     5         0          3                3        2 #>   proteome_id   cath_label cath_assignment_level cath_assignment_method #> 1       36329  3.40.800.20                     H               foldseek #> 2       36329 3.30.70.2380                     H               foldseek #> 3       36329     4.10.860                     T              foldclass #> 4       36329       1.20.5                     T              foldclass #> 5       36329            -                     -                      - #>   packing_density norm_rg tax_common_name                 tax_scientific_name #> 1          13.064   0.298                 Plasmodium falciparum (isolate 3D7) #> 2          12.537   0.306                 Plasmodium falciparum (isolate 3D7) #> 3           9.900   0.374                 Plasmodium falciparum (isolate 3D7) #> 4           8.900   0.403                 Plasmodium falciparum (isolate 3D7) #> 5           9.833   0.370                 Plasmodium falciparum (isolate 3D7) #>                                                                                                                                                       tax_lineage #> 1 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 2 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 3 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 4 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 5 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum  searchTedConsensus(c(\"Q7K6A1\",\"Q8IAP8\",\"C0H4D0\",\"C6KT90\",\"Q8IBJ7\"), returnCATHdesc=TRUE) #>                        ted_id uniprot_acc                       md5_domain #> 1 AF-Q7K6A1-F1-model_v4_TED01      Q7K6A1 b99e920f0ded31aa96af0ef9be1338f4 #> 2 AF-C0H4D0-F1-model_v4_TED01      C0H4D0 cd912dcbbb5d070cbb254c0a88278fe4 #> 3 AF-C6KT90-F1-model_v4_TED02      C6KT90 70d20592d9f682bff23dc6188f318244 #> 4 AF-C6KT90-F1-model_v4_TED01      C6KT90 7cc174ebefe723733b6e63508fd23a9e #> 5 AF-Q8IBJ7-F1-model_v4_TED01      Q8IBJ7 71697d50571d5fe2331a13ff16503478 #>   consensus_level chopping nres_domain num_segments   plddt #> 1            high    6-376         371            1 97.1740 #> 2          medium   55-153          99            1 88.9028 #> 3          medium  322-382          61            1 45.3118 #> 4          medium  172-203          32            1 48.8553 #> 5          medium    54-88          35            1 87.3500 #>   num_helix_strand_turn num_helix num_strand num_helix_strand num_turn #> 1                    60        16          8               24       35 #> 2                    15         5          4                9        6 #> 3                     3         3          0                3        0 #> 4                     2         1          0                1        1 #> 5                     5         0          3                3        2 #>   proteome_id   cath_label cath_assignment_level cath_assignment_method #> 1       36329  3.40.800.20                     H               foldseek #> 2       36329 3.30.70.2380                     H               foldseek #> 3       36329     4.10.860                     T              foldclass #> 4       36329       1.20.5                     T              foldclass #> 5       36329            -                     -                      - #>   packing_density norm_rg tax_common_name                 tax_scientific_name #> 1          13.064   0.298                 Plasmodium falciparum (isolate 3D7) #> 2          12.537   0.306                 Plasmodium falciparum (isolate 3D7) #> 3           9.900   0.374                 Plasmodium falciparum (isolate 3D7) #> 4           8.900   0.403                 Plasmodium falciparum (isolate 3D7) #> 5           9.833   0.370                 Plasmodium falciparum (isolate 3D7) #>                                                                                                                                                       tax_lineage #> 1 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 2 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 3 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 4 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #> 5 cellular organisms, Eukaryota, Sar, Alveolata, Apicomplexa, Aconoidasida, Haemosporida, Plasmodiidae, Plasmodium, Plasmodium (Laverania), Plasmodium falciparum #>              cath_label_desc #> 1 Histone deacetylase domain #> 2                            #> 3                            #> 4                            #> 5                       NULL"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"accessing-malaria-tools-database-","dir":"Articles","previous_headings":"","what":"Accessing malaria.tools database.","title":"Introduction to plasmoRUtils","text":"visualization functions developed produce similar visualizations similar rendered malaria.tools database publication ready. User can plot Condition Specific Stage Specific expression gene interest two organisms: Plasmodium falciparum Plasmodium berghi. plotAllCondition(): function lets create publication ready plots TPM normalized expression values across multiple stages parasite using bulk-RNAseq data malaria.tools.  Users can also plot stage specific average TPMs well similar plots rendered malaria.tools using plotStageSpecific() function. Note: searchMT() function available previous version depreciated due repeated failure given database latency. easyPie therefore also removed","code":"# TPM plot (non-interactive) plotAllCondition(geneID = \"PBANKA_0100600\") plotAllCondition(geneID = \"PBANKA_0100600\",plotify = TRUE) ## interactive ## To get the data used for making above plot use returnData argument plotAllCondition(geneID = \"PBANKA_0100600\",returnData = TRUE) %>% head() #>                                     condition     mean     min     max   group #> 1                          Asexual: SRP099925 460.6603 396.042 551.808 Asexual #> 2              Asexual, PbSR-MG KO: SRP109709 403.1830 355.452 442.661 Asexual #> 3               10 hpi, ab libitum: SRP059210 224.5177 206.967 236.912      10 #> 4         10 hpi, diet restriction: SRP059210 228.0705 218.048 238.093      10 #> 5       10 hpi, ab libitum, kin KO: SRP059210 155.0550 155.055 155.055      10 #> 6 10 hpi, diet restriction, kin KO: SRP059210 130.9310 130.931 130.931      10 plotStageSpecific(geneID = \"PBANKA_0100600\",plotify = TRUE)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Introduction_to_plasmoRUtils.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Introduction to plasmoRUtils","text":"","code":"utils::sessionInfo() #> R version 4.4.1 (2024-06-14 ucrt) #> Platform: x86_64-w64-mingw32/x64 #> Running under: Windows 11 x64 (build 26100) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_India.utf8  LC_CTYPE=English_India.utf8    #> [3] LC_MONETARY=English_India.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=English_India.utf8     #>  #> time zone: Asia/Riyadh #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] polyglotr_1.7.0    rvest_1.0.4        plyr_1.8.9         dplyr_1.1.4        #> [5] plasmoRUtils_1.1.0 rlang_1.1.6        readr_2.1.5        janitor_2.2.1      #> [9] BiocStyle_2.32.1   #>  #> loaded via a namespace (and not attached): #>   [1] IRanges_2.38.1              dichromat_2.0-0.1           #>   [3] vroom_1.6.5                 progress_1.2.3              #>   [5] vsn_3.72.0                  nnet_7.3-19                 #>   [7] Biostrings_2.72.1           vctrs_0.6.5                 #>   [9] digest_0.6.37               png_0.1-8                   #>  [11] proxy_0.4-27                MSnbase_2.30.1              #>  [13] parallelly_1.45.1           MASS_7.3-61                 #>  [15] pkgdown_2.1.3               reshape2_1.4.4              #>  [17] foreach_1.5.2               BiocGenerics_0.50.0         #>  [19] withr_3.0.2                 xfun_0.52                   #>  [21] ggpubr_0.6.1                survival_3.8-3              #>  [23] memoise_2.0.1               hexbin_1.28.5               #>  [25] ggsci_3.2.0                 mixtools_2.0.0.1            #>  [27] systemfonts_1.2.3           ragg_1.4.0                  #>  [29] gtools_3.9.5                easyPubMed_2.13             #>  [31] Formula_1.2-5               prettyunits_1.2.0           #>  [33] KEGGREST_1.44.1             promises_1.3.3              #>  [35] httr_1.4.7                  rstatix_0.7.2               #>  [37] restfulr_0.0.16             globals_0.18.0              #>  [39] ps_1.9.1                    rstudioapi_0.17.1           #>  [41] UCSC.utils_1.0.0            generics_0.1.4              #>  [43] processx_3.8.6              curl_6.4.0                  #>  [45] ncdf4_1.24                  S4Vectors_0.42.1            #>  [47] zlibbioc_1.50.0             ScaledMatrix_1.12.0         #>  [49] randomForest_4.7-1.2        bio3d_2.4-5                 #>  [51] GenomeInfoDbData_1.2.12     SparseArray_1.4.8           #>  [53] xtable_1.8-4                stringr_1.5.1               #>  [55] desc_1.4.3                  doParallel_1.0.17           #>  [57] evaluate_1.0.4              S4Arrays_1.4.1              #>  [59] BiocFileCache_2.12.0        preprocessCore_1.66.0       #>  [61] hms_1.1.3                   GenomicRanges_1.56.2        #>  [63] bookdown_0.43               irlba_2.3.5.1               #>  [65] colorspace_2.1-1            filelock_1.0.3              #>  [67] magrittr_2.0.3              snakecase_0.11.1            #>  [69] later_1.4.2                 viridis_0.6.5               #>  [71] lattice_0.22-6              MsCoreUtils_1.16.1          #>  [73] future.apply_1.20.0         SparseM_1.84-2              #>  [75] XML_3.99-0.18               scuttle_1.14.0              #>  [77] triebeard_0.4.1             matrixStats_1.5.0           #>  [79] class_7.3-22                pillar_1.11.0               #>  [81] nlme_3.1-166                iterators_1.0.14            #>  [83] compiler_4.4.1              beachmat_2.20.0             #>  [85] stringi_1.8.7               gower_1.0.2                 #>  [87] SummarizedExperiment_1.34.0 dendextend_1.19.1           #>  [89] lubridate_1.9.4             GenomicAlignments_1.40.0    #>  [91] drawProteins_1.24.0         crayon_1.5.3                #>  [93] abind_1.4-8                 BiocIO_1.14.0               #>  [95] bit_4.6.0                   chromote_0.5.1              #>  [97] pcaMethods_1.96.0           codetools_0.2-20            #>  [99] textshaping_1.0.1           recipes_1.3.1               #> [101] BiocSingular_1.20.0         MLInterfaces_1.84.0         #> [103] crosstalk_1.2.1             bslib_0.9.0                 #> [105] e1071_1.7-16                plotly_4.11.0               #> [107] LaplacesDemon_16.1.6        MultiAssayExperiment_1.30.3 #> [109] splines_4.4.1               Rcpp_1.1.0                  #> [111] dbplyr_2.5.0                sparseMatrixStats_1.16.0    #> [113] knitr_1.50                  blob_1.2.4                  #> [115] utf8_1.2.6                  clue_0.3-66                 #> [117] mzR_2.38.0                  AnnotationFilter_1.28.0     #> [119] fs_1.6.6                    QFeatures_1.14.2            #> [121] listenv_0.9.1               mzID_1.42.0                 #> [123] DelayedMatrixStats_1.26.0   ggsignif_0.6.4              #> [125] tibble_3.3.0                Matrix_1.7-1                #> [127] statmod_1.5.0               tzdb_0.5.0                  #> [129] lpSolve_5.6.23              pkgconfig_2.0.3             #> [131] tools_4.4.1                 cachem_1.1.0                #> [133] RSQLite_2.4.1               viridisLite_0.4.2           #> [135] DBI_1.2.3                   impute_1.78.0               #> [137] fastmap_1.2.0               rmarkdown_2.29              #> [139] scales_1.4.0                grid_4.4.1                  #> [141] gt_1.0.0                    Rsamtools_2.20.0            #> [143] broom_1.0.8                 sass_0.4.10                 #> [145] coda_0.19-4.1               FNN_1.1.4.1                 #> [147] BiocManager_1.30.26         graph_1.82.0                #> [149] carData_3.0-5               selectr_0.4-2               #> [151] SingleR_2.6.0               rpart_4.1.23                #> [153] farver_2.1.2                yaml_2.3.10                 #> [155] AnnotationForge_1.46.0      MatrixGenerics_1.16.0       #> [157] rtracklayer_1.64.0          cli_3.6.5                   #> [159] purrr_1.1.0                 stats4_4.4.1                #> [161] txdbmaker_1.0.1             lifecycle_1.0.4             #> [163] caret_7.0-1                 Biobase_2.64.0              #> [165] mvtnorm_1.3-3               lava_1.8.1                  #> [167] kernlab_0.9-33              backports_1.5.0             #> [169] BiocParallel_1.38.0         annotate_1.82.0             #> [171] timechange_0.3.0            gtable_0.3.6                #> [173] rjson_0.2.23                parallel_4.4.1              #> [175] pROC_1.18.5                 limma_3.60.6                #> [177] jsonlite_2.0.0              bitops_1.0-9                #> [179] ggplot2_3.5.2               bit64_4.6.0-1               #> [181] pRoloc_1.44.1               urltools_1.7.3.1            #> [183] jquerylib_0.1.4             segmented_2.1-4             #> [185] timeDate_4041.110           lazyeval_0.2.2              #> [187] htmltools_0.5.8.1           affy_1.82.0                 #> [189] GO.db_3.19.1                rappdirs_0.3.3              #> [191] glue_1.8.0                  httr2_1.2.0                 #> [193] XVector_0.44.0              RCurl_1.98-1.17             #> [195] MALDIquant_1.22.3           mclust_6.1.1                #> [197] gridExtra_2.3               igraph_2.1.4                #> [199] R6_2.6.1                    tidyr_1.3.1                 #> [201] SingleCellExperiment_1.26.0 labeling_0.4.3              #> [203] GenomicFeatures_1.56.0      cluster_2.1.8               #> [205] GenomeInfoDb_1.40.1         ipred_0.9-15                #> [207] DelayedArray_0.30.1         tidyselect_1.2.1            #> [209] ProtGenerics_1.36.0         sampling_2.11               #> [211] xml2_1.3.8                  car_3.1-3                   #> [213] AnnotationDbi_1.66.0        future_1.67.0               #> [215] ModelMetrics_1.2.2.2        rsvd_1.0.5                  #> [217] affyio_1.74.0               topGO_2.56.0                #> [219] data.table_1.17.8           websocket_1.4.4             #> [221] mgsub_1.7.3                 htmlwidgets_1.6.4           #> [223] RColorBrewer_1.1-3          biomaRt_2.60.1              #> [225] hardhat_1.4.1               prodlim_2025.04.28          #> [227] PSMatch_1.8.0"},{"path":[]},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Miscellaneous_function.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Other useful functions","text":"search functions, plasmoRUtils package offers various functions routinely needed performing bioinformatics analysis. usage discussed .","code":"# Load package and some other useful packages by using suppressPackageStartupMessages(   suppressWarnings({     library(plasmoRUtils)     library(dplyr)     library(plyr)     library(tibble)}))"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Miscellaneous_function.html","id":"making-orgdb-and-txdb-objects","dir":"Articles","previous_headings":"Introduction","what":"Making OrgDb and TxDb objects","title":"Other useful functions","text":"non-model organism, using R packages clusterProfiler enrichment analysis requires org.db packages. Unfortunately, requires ability understand use AnnotationDbi package. make development packages quickly, wrote wrapper function instantly creates TAR file can used shared user time. function create org.db tar file can installed loaded used clusterProfiler. Similarly, users want make TxDb object R use R packages gDNAx used access genomic DNA contamination, can easily using easyTxDbmaker() function.","code":"## List organism you are interested in making org.db package from VEuPathDB. ## Use the links from PlasmoDB directly or provide locally saved GFF and GAF files.  ## Get taxonomy ID using listVeupathdb(c(\"primary_key\",\"ncbi_tax_id\"))  easymakeOrgdb(   gff =     \"https://plasmodb.org/common/downloads/release-68/Pfalciparum3D7/gff/data/PlasmoDB-68_Pfalciparum3D7.gff\",   gaf =     \"https://plasmodb.org/common/downloads/release-68/Pfalciparum3D7/gaf/PlasmoDB-68_Pfalciparum3D7_Curated_GO.gaf.gz\",   out.dir = \".\",   taxid = 36329,   genus = \"Plasmodium\",   sp = \"falciparum3D7\",   version = 0.1,   verbose = FALSE,   maintainer = \"John doe <johndoe@gmail.com>\" ## Your name if you are maintaining it. )  ## Once the package is ready, one can use clusterProfiler as follows  library(clusterProfiler) library(org.Pfalciparum3D7.eg.db)   ego <- enrichGO(gene          = genes,                 universe      = bkg_genes,                 OrgDb         = org.Pfalciparum3D7.eg.db,                 keyType = \"GID\",                 ont           = \"BP\",                 minGSSize=3,                 pAdjustMethod = \"BH\",                 pvalueCutoff  = 0.05,                 qvalueCutoff  = 0.05,         readable      = FALSE) txdb<-easyTxDbmaker(  gff=\"https://toxodb.org/common/downloads/release-68/TgondiiME49/gff/data/ToxoDB-68_TgondiiME49.gff\",  fasta=\"https://toxodb.org/common/downloads/release-68/TgondiiME49/fasta/data/ToxoDB-68_TgondiiME49_Genome.fasta\",  abbr=\"TgondiiME49\",  taxid=508771,org = \"Toxoplasma gondii ME49\",  db = \"ToxoDB release 68\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Miscellaneous_function.html","id":"other-easy-functions","dir":"Articles","previous_headings":"Introduction","what":"Other easy functions","title":"Other useful functions","text":"Users also provided easy functions wrapper functions around routinely used analyze bioinformatics data.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Miscellaneous_function.html","id":"tpm-normalization-and-visualization","dir":"Articles","previous_headings":"Introduction > Other easy functions","what":"TPM normalization and visualization","title":"Other useful functions","text":"section see can calculate effective gene lengths GFF file followed TPM normalization visualize resulting normalized matrix. functions provided since RNASeq data present VEuPathDb TPM normalized therefore make easy plot database procured values alongside samples. function returns dataframe can fed easyTPM() function alongside count matrix. function also adds effective length column end people can find easy convert values raw counts. also helpful since exon-intron boundaries always evolving new data-sets become available.  can also plot normalized expression data line plot cluster genes similar pattern expression. demonstrate use subset genes (Subudhi et al. 2020) time series dataset. perform TPM normalization, followed log transformation eventually use Z-scores visualization.  easyExpPlot() can used plot expression values obtained kind applied normalization transformation.","code":"# To calculate the effective length of the genes you can use the following function baseurl <- \"https://plasmodb.org/common/downloads/release-68/\" getEffLen(paste0(baseurl, \"Pfalciparum3D7/gff/data/PlasmoDB-68_Pfalciparum3D7.gff\")) %>% head() #> # A tibble: 6 × 2 #>   GeneID        Length #>   <chr>          <dbl> #> 1 PF3D7_0100100   6492 #> 2 PF3D7_0100200    996 #> 3 PF3D7_0100300   3984 #> 4 PF3D7_0100400   1119 #> 5 PF3D7_0100500    112 #> 6 PF3D7_0100600   1080 library(ggplot2) ## Generating dummy effective length for quick demonstration gene_info <- data.frame(GeneID = c(\"PF3D7_0100100\", \"PF3D7_0100200\", \"PF3D7_0100300\"), Length = c(6492, 996, 3984))  ## Making a dummy count matrix count_matrix <- matrix(c(10, 20, 30, 40, 50, 60),                        nrow = 3, ncol = 2,                        dimnames = list(c(\"PF3D7_0100100\", \"PF3D7_0100200\", \"PF3D7_0100300\"), c(\"sample1\", \"sample2\"))                        )  ## TPM normalization test <- easyTPM(count_matrix, gene_info) %>% rownames_to_column(var = \"GeneID\")  ## TPM visualization as a bubble plot df <- reshape2::melt(test[,-ncol(test)],na.rm = T) easyExpPlot(df,x=\"variable\",y=\"GeneID\",value=\"value\", type = \"bubble\")+labs(x=\"Samples\",y=\"Gene IDs\") data(\"subudhi2020\") count_matrix <- subudhi2020@assays@data$counts baseurl <- \"https://plasmodb.org/common/downloads/release-68/\" gene_info <- getEffLen(paste0(baseurl,\"Pfalciparum3D7/gff/data/PlasmoDB-68_Pfalciparum3D7.gff\"))  normalised <- easyTPM(count_matrix, gene_info)   ## Since normalized matrix have effective gene length column at the end logTransformed = log2(normalised[,-ncol(normalised)] + 1)  ## Get z-scores z.mat <- t(scale(t(logTransformed), scale=TRUE, center=TRUE)) %>% as.data.frame() %>% rownames_to_column(var = \"GeneID\")  ## Subsetting few genes of interest gois <- c(\"PF3D7_1476300\",\"PF3D7_0220800\",\"PF3D7_0936200\",\"PF3D7_0402200\",\"PF3D7_1401600\",\"PF3D7_0831600\",\"PF3D7_0204100\",\"PF3D7_1458300\",\"PF3D7_0935800\",\"PF3D7_0929400\",\"PF3D7_1439000\",\"PF3D7_0905400\",\"PF3D7_1334600\",\"PF3D7_1121300\",\"PF3D7_0302500\",\"PF3D7_1232800\",\"PF3D7_0310400\",\"PF3D7_1001600\")  ## Transforming data frame for visualisation df <- z.mat %>%    subset(.,GeneID %in% gois) %>%    reshape2::melt(.,na.rm = T)  easyExpPlot(df,x=\"variable\",y=\"value\",value=\"GeneID\")+   labs(y=\"Z-scores\",x=\"Samples\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Miscellaneous_function.html","id":"support-for-noiseq-readdata-function-for-non-model-organism","dir":"Articles","previous_headings":"Introduction > Other easy functions","what":"Support for NOISeq readData function for non-model organism","title":"Other useful functions","text":"using NOISeq QC, users often required provide various information alongside count matrices. information includes biotype, chromosome, gc content, length features etc. arguments listed optional required NOISeq package making QC plots. enable users get information reference FASTA file GFF file used user alignment, wrote easyNOISeqAnnot() function enable users quickly get information GTF/GFF file FASTA file return data frame. can provided URL locally stored files. can now pass data frame contents NOISeq::readData() function follows.","code":"gene_info <- easyNOISeqAnnot(  gff=\"https://toxodb.org/common/downloads/release-68/EpraecoxHoughton/gff/data/ToxoDB-68_EpraecoxHoughton.gff\",  fasta = \"https://toxodb.org/common/downloads/release-68/EpraecoxHoughton/fasta/data/ToxoDB-68_EpraecoxHoughton_Genome.fasta\")  gene_info %>% head() #>                 gene_id   gene_biotype        gc #> EPH_0000010 EPH_0000010 protein_coding 0.5329587 #> EPH_0000020 EPH_0000020 protein_coding 0.4712575 #> EPH_0000030 EPH_0000030 protein_coding 0.5618822 #> EPH_0000040 EPH_0000040 protein_coding 0.5624426 #> EPH_0000050 EPH_0000050 protein_coding 0.4910354 #> EPH_0000060 EPH_0000060 protein_coding 0.5811796 #>                                                                    desc length #> EPH_0000010 Helicase associated domain HA2 containing protein , related   6584 #> EPH_0000020                      DNA polymerase alpha subunit, putative   5010 #> EPH_0000030                                        hypothetical protein   2529 #> EPH_0000040                             hypothetical protein, conserved   6534 #> EPH_0000050                             hypothetical protein, conserved   4462 #> EPH_0000060                             hypothetical protein, conserved   1509 #>             starts  ends      chr #> EPH_0000010   2602  9185 HG688746 #> EPH_0000020  50573 55582 HG688746 #> EPH_0000030    101  2629 HG695046 #> EPH_0000040  19822 26355 HG697798 #> EPH_0000050  30217 34678 HG697798 #> EPH_0000060  36161 37669 HG697798 data_NOISEQ <- NOISeq::readData(data = counts,                         length=setNames(gene_info$length, gene_info$gene_id),                         gc=setNames(gene_info$gc, gene_info$gene_id),                         biotype=setNames(gene_info$gene_biotype, gene_info$gene_id),                         chromosome = gene_info[,c(\"chr\",\"starts\",\"ends\")],                         factors = meta)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Miscellaneous_function.html","id":"check-synchronization-of-bulk-rnaseq-samples-using-easylabeltransfer","dir":"Articles","previous_headings":"Introduction > Other easy functions","what":"Check synchronization of Bulk RNASeq samples using easyLabelTransfer()","title":"Other useful functions","text":"easyLabelTransfer() wrapper function written around SingleR SingleR() function quickly use count matrices Bulk/ Single cell Reference data sets check synchronization (time point stage) Parasite Bulk RNASeq samples can used QC purposes. , demonstration purpose, use single cell RNASeq data Malaria Cell Atlas use (Subudhi et al. 2020) Bulk time-series dataset transfer labels see distribution cells across different time points. data sets provided package includes: Time course Microarray dataset (Painter et al. 2018): data(\"painter2018\") Time course Bulk RNASeq (Single-end) (Toenhake et al. 2018): data(\"toenhake2018\") Time course Bulk RNASeq (Paired-end) (Kucharski et al. 2020): data(\"kucharski2020\") Reanalyzed scRNAseq T. gondii ME49 data (Lou et al. 2024): data(\"gubbels2024\") Reanalyzed scRNAseq T. gondii ME49 data (Xue et al. 2020): data(\"boothroyd2020\") Reanalyzed Bulk RNASeq (Paired-end) (Wichers et al. 2019): data(\"wichers2019\") Reanalyzed scRNAseq *T. gondii* data (Lou et al. 2024): data(\"gubbels2024\") Reanalyzed scRNAseq *T. gondii* data (Xue et al. 2020): data(\"boothroyd2020\") Reanalyzed Bulk RNASeq (Paired -End) (Wichers et al. 2019): data(\"wichers2019\") Next, Malaria cell atlas (MCA) database comprising single cell data sets can accessed using following functions. listMCA() function enables filter list scRNASeq data sets data download links available. User can use function view table metadata dataset download datasets recursively rather manually downloading single dataset time. easyMCA() enables users import count matrix metadata directly R environment directly. Written mainly pipeline development. Now, lets use function enlisted alongside easyLabelTransfer() shown . Note: output obtained easyLabelTransfer() function DFrame object can fed SingleR functions visual purposes.   can see cells time points underrepresented Malaria Cell Atlas.","code":"library(SingleR) set.seed(12458) ## Fetching the URL mcalist <- listMCA() data(\"subudhi2020\") ## reference dataset subudhi2020 <- subudhi2020[,1:42] ## Skipping samples after 43 Hpi since they highly correlate with 43hpi itself.  ## Using this reference set url <- \"https://www.malariacellatlas.org/downloads/pf-ch10x-set4-biorxiv.zip\"  raw_counts <- easyMCA(url,type = \"raw\") rownames(raw_counts) <- gsub(\"-\",\"_\",rownames(raw_counts)) meta <- easyMCA(url,type=\"data\")  ## Retaining only Asexual stage cells and Lab isolates. meta <- subset(meta, meta$STAGE_LR %in% c(\"ring\",\"trophozoite\",\"schizont\") & DAY != \"Field\") raw_counts <- raw_counts[,rownames(meta)]  ## Filtering away field isolates and sexual stage cells  labels <- easyLabelTransfer(queryCounts = raw_counts,                             refCounts = subudhi2020@assays@data$counts, referenceMeta = subudhi2020@colData, labelCol = \"timetag\", isrefBulk = TRUE)  table(labels$pruned.labels) #>  #> 11hpi 13hpi 15hpi 17hpi 19hpi 21hpi 23hpi 25hpi 27hpi 29hpi 31hpi 33hpi 35hpi  #>   762   615   396   698   155  2126    65  3027    18  3855    14  2882     3  #> 37hpi 39hpi  3hpi 41hpi 43hpi  5hpi  7hpi  9hpi  #>   375  2066  2361  1579  5727  1199   241   336  df <- labels$labels %>% table() %>% data.frame() df$. <- factor(df$., levels = subudhi2020$timetag %>% unique())  ggpubr::ggbarplot(df,x=\".\",y=\"Freq\", label = TRUE, color = \"#2595be\", fill = \"#2595be\")+   geom_hline(yintercept = 100,colour = \"red\", linetype=2 )+   labs(x=\"Time-points\",y=\"No. of Cells\")+   theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) plotScoreHeatmap(labels,show_colnames = F,                        show.pruned = F,                         cluster_cols = F,                         cluster_rows = FALSE,                         rows.order=unique(subudhi2020$timetag))"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Miscellaneous_function.html","id":"go-enrichment-using-easytopgo","dir":"Articles","previous_headings":"Introduction > Other easy functions","what":"GO Enrichment using easytopGO()","title":"Other useful functions","text":"VEuPathDB constituent database allow users perform GO Enrichment analysis. However, option set background genes default genes used. ideal approach. Moreover, since Gene Ontologies curated using different pipelines different enrichment providers, results might differ just based source Ontologies. Similarly Ontology data might available databases BioMart like use custom GAF file. Users parasite domain might wish use GAF files provided VEuPathDB constituent database specific genome assembly per hypothesis. enable users , GO enrichment analysis can performed easily quickly using easytopGO() wrapper function. function requires users provide named numeric vector, names Ensembl Gene IDs numeric vector adjusted p-values. Users can also supply genes used background using bkggset argument. Finally users can use gaf argument supply .gaf file obtained VEuPathDBs constituent database interest. well known organisms, Biomart Ontologies can also used. case user provide mart argument figure key emsembl gene IDs . However, many times parasite assemblies used reference Ensembl might match parasite assembly used VEuPathDB. cases might mismatches gene IDs (see one issue ). can also change category argument specify GO category want test enrichment . Since parasites, sub-cellular localization Molecular function information sparingly available, “BP” set default. Finally, can also use ORA results obtained VEuPathDBs input easytopGO().   easyGOPlot() adapted modified version provided Kevin Blighe Biostars. can use limit argument limit number terms plotted.","code":"# Making a numeric vector of padjusted values gois <- c(\"PF3D7_0102200\",\"PF3D7_0207400\",\"PF3D7_0207500\",\"PF3D7_0207600\",\"PF3D7_0207700\",\"PF3D7_0207800\",\"PF3D7_0207900\",\"PF3D7_0208000\",\"PF3D7_0404700\",\"PF3D7_0501500\",\"PF3D7_0502400\",\"PF3D7_0618000\",\"PF3D7_0731800\",\"PF3D7_0930300\",\"PF3D7_1116000\",\"PF3D7_1247800\",\"PF3D7_1334700\")   p_values <- c(1.767929e-49,3.886063e-148,6.459285e-269,0.000000e+00,6.842121e-132, 5.282318e-178,1.140221e-224,1.625665e-100,6.177129e-08,1.484155e-03,2.789648e-10,2.300720e-12,7.450697e-30,3.417972e-89,4.846689e-73,1.207966e-11,4.173777e-51) names(p_values) <- gois  ## Using all genes captured as a background  background.gset <- rownames(subudhi2020@assays@data$counts) baseurl <- \"https://plasmodb.org/common/downloads/Current_Release/\" url<-paste0(baseurl,\"Pfalciparum3D7/gaf/PlasmoDB-68_Pfalciparum3D7_GO.gaf.gz\")  ## Performing ORA gores<-easytopGO(geneID = p_values,useGAF = TRUE,useBiomart = FALSE,gaf=url, bkggset = background.gset, category = \"BP\", stats = \"ks\")  ## Plotting the results.  goplt <- easyGOPlot(gores, title = \"GO Biological processes\", limit = 20, sortby = \"ks\") goplt ## Making circular plot goplt+theme_minimal()+coord_radial(inner.radius = 0.3, rotate.angle = TRUE,r_axis_inside = TRUE)+ylab(\"\")+ggeasy::easy_legend_at(\"bottom\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Miscellaneous_function.html","id":"screening-the-signal-peptides-from-pdbs","dir":"Articles","previous_headings":"Introduction > Other easy functions","what":"Screening the Signal Peptides from PDBs","title":"Other useful functions","text":"also offer convenient function, easyAF2Signal(), diagnose potential false-positive signal peptides using SignalP predictions VEuPathDB database AlphaFold2 structures, based observational study conducted (Sanaboyana Elcock 2024). authors found true N-terminal signal peptides (~24-24 amino acids) typically disengaged protein body lack atomic contacts, AlphaFold2 attempts model similar way. easyAF2Signal() R equivalent slight modifications Fortran code provided authors, reports additional information, number residues remaining pLDDT filtering. modification , signal peptide residues low pLDDT scores filtered , residues remain calculate contacts protein body, resulting zero contacts. give false impression first 25 amino acids signal peptides, confirmed, zero-contact observed due residues remaining filtering, signal peptide disengaged protein body. example , see signal peptide low mean pLDDT score therefore residues left post filtering bad quality residues leading zero residue-residue counts res_res_conts. Thus can’t say sure PDB hand signal peptide .","code":"easyAF2Signal(\"https://alphafold.ebi.ac.uk/files/AF-Q9TY95-F1-model_v4.pdb\") #>                    Name length_signalpeptide length_protein #> 1 AF-Q9TY95-F1-model_v4                   25            997 #>   postbfacFiltered_signalP_res medianSignalP_bfac clevagesite_bfac #> 1                            0              35.36            32.71 #>   postbfacFiltered_rest_res medianRest_bfac res_res_conts atm_atm_conts #> 1                       308           81.67             0             0"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Miscellaneous_function.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Other useful functions","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14 ucrt) #> Platform: x86_64-w64-mingw32/x64 #> Running under: Windows 11 x64 (build 26100) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_India.utf8  LC_CTYPE=English_India.utf8    #> [3] LC_MONETARY=English_India.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=English_India.utf8     #>  #> time zone: Asia/Riyadh #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] topGO_2.56.0                SparseM_1.84-2              #>  [3] GO.db_3.19.1                AnnotationDbi_1.66.0        #>  [5] graph_1.82.0                SingleR_2.6.0               #>  [7] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [9] GenomicRanges_1.56.2        GenomeInfoDb_1.40.1         #> [11] IRanges_2.38.1              S4Vectors_0.42.1            #> [13] BiocGenerics_0.50.0         MatrixGenerics_1.16.0       #> [15] matrixStats_1.5.0           ggplot2_3.5.2               #> [17] tibble_3.3.0                plyr_1.8.9                  #> [19] dplyr_1.1.4                 plasmoRUtils_1.1.0          #> [21] rlang_1.1.6                 readr_2.1.5                 #> [23] janitor_2.2.1               BiocStyle_2.32.1            #>  #> loaded via a namespace (and not attached): #>   [1] dichromat_2.0-0.1           vroom_1.6.5                 #>   [3] progress_1.2.3              vsn_3.72.0                  #>   [5] nnet_7.3-19                 Biostrings_2.72.1           #>   [7] vctrs_0.6.5                 digest_0.6.37               #>   [9] png_0.1-8                   proxy_0.4-27                #>  [11] MSnbase_2.30.1              parallelly_1.45.1           #>  [13] MASS_7.3-61                 pkgdown_2.1.3               #>  [15] reshape2_1.4.4              foreach_1.5.2               #>  [17] withr_3.0.2                 xfun_0.52                   #>  [19] ggpubr_0.6.1                survival_3.8-3              #>  [21] memoise_2.0.1               hexbin_1.28.5               #>  [23] ggsci_3.2.0                 mixtools_2.0.0.1            #>  [25] systemfonts_1.2.3           ragg_1.4.0                  #>  [27] gtools_3.9.5                easyPubMed_2.13             #>  [29] Formula_1.2-5               prettyunits_1.2.0           #>  [31] KEGGREST_1.44.1             promises_1.3.3              #>  [33] httr_1.4.7                  rstatix_0.7.2               #>  [35] restfulr_0.0.16             globals_0.18.0              #>  [37] ps_1.9.1                    rstudioapi_0.17.1           #>  [39] UCSC.utils_1.0.0            generics_0.1.4              #>  [41] processx_3.8.6              curl_6.4.0                  #>  [43] ncdf4_1.24                  zlibbioc_1.50.0             #>  [45] ScaledMatrix_1.12.0         randomForest_4.7-1.2        #>  [47] bio3d_2.4-5                 GenomeInfoDbData_1.2.12     #>  [49] SparseArray_1.4.8           xtable_1.8-4                #>  [51] stringr_1.5.1               desc_1.4.3                  #>  [53] doParallel_1.0.17           evaluate_1.0.4              #>  [55] S4Arrays_1.4.1              BiocFileCache_2.12.0        #>  [57] preprocessCore_1.66.0       hms_1.1.3                   #>  [59] bookdown_0.43               irlba_2.3.5.1               #>  [61] colorspace_2.1-1            filelock_1.0.3              #>  [63] magrittr_2.0.3              snakecase_0.11.1            #>  [65] later_1.4.2                 viridis_0.6.5               #>  [67] lattice_0.22-6              MsCoreUtils_1.16.1          #>  [69] future.apply_1.20.0         XML_3.99-0.18               #>  [71] scuttle_1.14.0              class_7.3-22                #>  [73] pillar_1.11.0               nlme_3.1-166                #>  [75] iterators_1.0.14            compiler_4.4.1              #>  [77] beachmat_2.20.0             stringi_1.8.7               #>  [79] gower_1.0.2                 dendextend_1.19.1           #>  [81] lubridate_1.9.4             GenomicAlignments_1.40.0    #>  [83] drawProteins_1.24.0         crayon_1.5.3                #>  [85] abind_1.4-8                 BiocIO_1.14.0               #>  [87] bit_4.6.0                   chromote_0.5.1              #>  [89] pcaMethods_1.96.0           codetools_0.2-20            #>  [91] textshaping_1.0.1           recipes_1.3.1               #>  [93] BiocSingular_1.20.0         MLInterfaces_1.84.0         #>  [95] bslib_0.9.0                 e1071_1.7-16                #>  [97] plotly_4.11.0               LaplacesDemon_16.1.6        #>  [99] MultiAssayExperiment_1.30.3 splines_4.4.1               #> [101] Rcpp_1.1.0                  dbplyr_2.5.0                #> [103] sparseMatrixStats_1.16.0    knitr_1.50                  #> [105] blob_1.2.4                  utf8_1.2.6                  #> [107] clue_0.3-66                 mzR_2.38.0                  #> [109] AnnotationFilter_1.28.0     fs_1.6.6                    #> [111] QFeatures_1.14.2            listenv_0.9.1               #> [113] mzID_1.42.0                 DelayedMatrixStats_1.26.0   #> [115] ggsignif_0.6.4              Matrix_1.7-1                #> [117] statmod_1.5.0               tzdb_0.5.0                  #> [119] lpSolve_5.6.23              pkgconfig_2.0.3             #> [121] pheatmap_1.0.13             tools_4.4.1                 #> [123] cachem_1.1.0                RSQLite_2.4.1               #> [125] viridisLite_0.4.2           rvest_1.0.4                 #> [127] DBI_1.2.3                   impute_1.78.0               #> [129] fastmap_1.2.0               rmarkdown_2.29              #> [131] scales_1.4.0                grid_4.4.1                  #> [133] gt_1.0.0                    Rsamtools_2.20.0            #> [135] broom_1.0.8                 sass_0.4.10                 #> [137] coda_0.19-4.1               FNN_1.1.4.1                 #> [139] BiocManager_1.30.26         carData_3.0-5               #> [141] rpart_4.1.23                farver_2.1.2                #> [143] yaml_2.3.10                 AnnotationForge_1.46.0      #> [145] rtracklayer_1.64.0          cli_3.6.5                   #> [147] purrr_1.1.0                 txdbmaker_1.0.1             #> [149] lifecycle_1.0.4             caret_7.0-1                 #> [151] mvtnorm_1.3-3               lava_1.8.1                  #> [153] kernlab_0.9-33              backports_1.5.0             #> [155] BiocParallel_1.38.0         annotate_1.82.0             #> [157] timechange_0.3.0            gtable_0.3.6                #> [159] rjson_0.2.23                parallel_4.4.1              #> [161] pROC_1.18.5                 limma_3.60.6                #> [163] jsonlite_2.0.0              bitops_1.0-9                #> [165] bit64_4.6.0-1               pRoloc_1.44.1               #> [167] jquerylib_0.1.4             segmented_2.1-4             #> [169] timeDate_4041.110           lazyeval_0.2.2              #> [171] htmltools_0.5.8.1           affy_1.82.0                 #> [173] rappdirs_0.3.3              glue_1.8.0                  #> [175] polyglotr_1.7.0             httr2_1.2.0                 #> [177] XVector_0.44.0              RCurl_1.98-1.17             #> [179] MALDIquant_1.22.3           mclust_6.1.1                #> [181] BSgenome_1.72.0             gridExtra_2.3               #> [183] igraph_2.1.4                R6_2.6.1                    #> [185] tidyr_1.3.1                 SingleCellExperiment_1.26.0 #> [187] labeling_0.4.3              GenomicFeatures_1.56.0      #> [189] cluster_2.1.8               ipred_0.9-15                #> [191] DelayedArray_0.30.1         tidyselect_1.2.1            #> [193] ProtGenerics_1.36.0         sampling_2.11               #> [195] xml2_1.3.8                  car_3.1-3                   #> [197] future_1.67.0               ModelMetrics_1.2.2.2        #> [199] rsvd_1.0.5                  affyio_1.74.0               #> [201] data.table_1.17.8           ggeasy_0.1.6                #> [203] websocket_1.4.4             mgsub_1.7.3                 #> [205] htmlwidgets_1.6.4           RColorBrewer_1.1-3          #> [207] biomaRt_2.60.1              hardhat_1.4.1               #> [209] prodlim_2025.04.28          PSMatch_1.8.0"},{"path":[]},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Need_for_reanalysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"RNASeq: Need for reanalysis?","text":"bioinformatics community, common reuse published RNA-seq count normalized count data without reprocessing, often overlooking important technical differences version genome annotation. Assembly updates typically include revisions : GFF files, gene models exon‐intron structures updated, UTRs redefined etc. GAF files, GO terms revised based newly published evidence RNA-seq, updates can substantially affect downstream analyses (e.g., -representation pathway enrichment). changes often documented NEWS sections VEuPathDB. instance, Plasmodium Toxoplasma, two key assembly updates : Release 51 (16 Mar 2021) PlasmoDB Release 66 (28 Nov 2023) ToxoDB, included extensive gene‐model revisions RNA-seq perspective, focus two factors known affect biological outcomes mappability. include changes : Number Genes Exon‐intron boundaries: Measured effective gene length (sum exon lengths) example , use Plasmodium Toxoplasma releases plasmoRUtils function getEffLen() track effective gene lengths hift across versions.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Need_for_reanalysis.html","id":"assessing-changes-in-gene-number","dir":"Articles","previous_headings":"","what":"Assessing Changes in Gene Number","title":"RNASeq: Need for reanalysis?","text":"compare six releases (24, 30, 40, 50, 60, 68) Plasmodium Toxoplasma. NEWS section, know Plasmodium, several loci initially annotated rRNAs, lncRNAs, coding genes later removed, mitochondrial genome PF3D7 revised 2019. Similarly, Toxoplasma TGME49 gene models underwent extensive updates release 66.   Plasmodium, current release 5720 genes. 57 genes removed since Release 24. Similarly 142 genes removed Toxoplasma compared previous releases.","code":"library(plasmoRUtils) library(dplyr) library(tidyr) library(tibble) library(ggpubr) library(GeneStructureTools) library(ggplot2)  releases <- c(24,30,40,50,60,68)  ## Getching GFFs from PlasmoDB and calculating effective lengths pf3d7.gffs <- lapply(releases, function(x){  paste0(\"https://plasmodb.org/common/downloads/release-\",x,\"/Pfalciparum3D7/gff/data/PlasmoDB-\",x,\"_Pfalciparum3D7.gff\") %>% getEffLen()  }) %>% setNames(releases)   ## Getching GFFs from ToxoDB and calculating effective lengths tgme49.gffs <- lapply(releases, function(x){  paste0(\"https://toxodb.org/common/downloads/release-\",x,\"/TgondiiME49/gff/data/ToxoDB-\",x,\"_TgondiiME49.gff\") %>% getEffLen()  }) %>% setNames(releases)  ## Let's plot changes in number of genes  pf3d7.ngenes<- lapply(pf3d7.gffs, nrow)  %>% setNames(releases) %>% plyr::ldply() tgme49.ngenes<- lapply(tgme49.gffs, nrow)  %>% setNames(releases) %>% plyr::ldply()  ggpubr::ggline(pf3d7.ngenes,x=\".id\",y=\"V1\", label = TRUE, color = \"#2595be\", fill = \"#2595be\")+labs(x=\"Releases\",y=\"No. of Genes\")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) ggpubr::ggline(tgme49.ngenes,x=\".id\",y=\"V1\", label = TRUE, color = \"#2595be\", fill = \"#2595be\")+labs(x=\"Releases\",y=\"No. of Genes\")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Need_for_reanalysis.html","id":"assessing-the-difference-in-effective-gene-lengths","dir":"Articles","previous_headings":"","what":"Assessing the difference in Effective gene lengths","title":"RNASeq: Need for reanalysis?","text":"get intuition counts genes affected mostly, calculate coefficient variation : CV = (Standard Deviation / Mean) × 100 effective gene length gene didn’t change across releases, CV equal zero. Similarly change effective length major gene, CV value higher. CV also gives us intuition genes underwent drastic changes; eg: 100 bp change matter 200 bp gene 5000 bp gene. calculate CV using following steps: Since gene IDs might vary across releases, first convert old Gene IDs new gene IDs using toGeneid() retain IDs common across releases. old annotations like release 24, genes coding multiple transcripts present separate gene entries coding 1 transcripts often denoted versions PF3D7_0618900.1,F3D7_0618900.2. issue fixed latest releases. handle remove versions gene IDs take average effective length genes. calculate CV filter genes CV>0.   exploration , see 79% gene models revised since release 50 therefore inform us published RNASeq dataset using annotations older Release 50 must reanalysed since read counts destined change genes. working annotation hypothetical genes, cautious assembly use since gene might appear regulated per old annotation might change change current annotation. Let’s recycle code Toxoplasma.   case 40% genes show change effective length compared past releases change happened release 60 (Release 66 precise brevity vignette, chose use 60 68).","code":"###  Step1 # Remove version suffix from GeneIDs df <- pf3d7.gffs %>% plyr::ldply() %>%   mutate(GeneID = GeneStructureTools::removeVersion(GeneID))  # Get annotation table and identify outdated IDs annot <- getTable(org = \"Plasmodium falciparum 3D7\", db = \"plasmodb\") old <- setdiff(unique(df$GeneID), annot$`Gene ID`) ## 152 old IDs  # Map outdated to Ensembl IDs new_ids <- toGeneid(old, from = \"old\", to = \"ensembl\") %>%   select(`Gene ID`, `Previous ID(s)`) %>%   distinct() ## only 62 mapped  # Replace outdated IDs in df. These are mostly apicoplast genes df$GeneID[match(new_ids$`Gene ID`,df$GeneID )] <- new_ids$`Gene ID`  # Filter for valid GeneIDs subdf <- df %>%   filter(GeneID %in% annot$`Gene ID`)  ###  Step 2  # Aggregate length per gene across releases df_agg <- subdf %>%   group_by(.id, GeneID) %>%   summarise(mean_length = round(mean(Length, na.rm = TRUE)), .groups = \"drop\") %>%   pivot_wider(names_from = GeneID, values_from = mean_length, values_fill = NA) %>%   column_to_rownames(\".id\") %>%   as.matrix()  ###  Step 3 # Coefficient of variation across releases cv <- cv <- apply(df_agg, 2, function(x) (sd(x, na.rm = TRUE) / mean(x, na.rm = TRUE)) * 100) %>%   sort(decreasing = TRUE)  ## Check for how many genes the effective length has changed table(cv>0) #4535 genes have their effective length changed #>  #> FALSE  TRUE  #>  1185  4535 ggpubr::gghistogram(cv,color = \"grey\", fill = \"grey\") ## Let's filter top 20 genes whose effective length has changed drastically and see what they are  annot %>%   select(`Gene ID`, `Product Description`) %>%   distinct() %>%   filter(`Gene ID` %in% names(cv)[1:20]) %>%   column_to_rownames(\"Gene ID\") %>%   .[names(cv)[1:20], , drop = FALSE] %>%   mutate(cv = cv[names(cv)[1:20]]) ## We see a lot of hypothetical genes #>                                                Product Description       cv #> PF3D7_1312500       conserved Plasmodium protein, unknown function 124.1221 #> PF3D7_1105000                                           histone H4 123.2382 #> PF3D7_1102800              early transcribed membrane protein 11.2 122.8477 #> PF3D7_1252300       conserved Plasmodium protein, unknown function 120.9319 #> PF3D7_1133000       conserved Plasmodium protein, unknown function 119.7104 #> PF3D7_0926200       conserved Plasmodium protein, unknown function 118.7044 #> PF3D7_0627000       conserved Plasmodium protein, unknown function 117.7699 #> PF3D7_0221800                                 hypothetical protein 117.3651 #> PF3D7_0624500      anaphase-promoting complex subunit 11, putative 117.0429 #> PF3D7_0202800       conserved Plasmodium protein, unknown function 116.1717 #> PF3D7_0936000                              ring-exported protein 2 114.3509 #> PF3D7_1003500                 40S ribosomal protein S20e, putative 113.8707 #> PF3D7_1325700       conserved Plasmodium protein, unknown function 113.8358 #> PF3D7_0817800     respiratory chain complex 3 associated protein 3 113.8013 #> PF3D7_0323000 translation machinery-associated protein 7, putative 113.3105 #> PF3D7_0530000       conserved Plasmodium protein, unknown function 112.0993 #> PF3D7_1202900                       high mobility group protein B1 112.0186 #> PF3D7_1355800               splicing factor 3B subunit 5, putative 111.9045 #> PF3D7_1102700              early transcribed membrane protein 11.1 111.8313 #> PF3D7_0705700                  40S ribosomal protein S29, putative 111.1493  # plot top 2 variable genes plts <- names(cv)[1:2] %>%   lapply(function(gid) {     df %>%       filter(GeneID == gid) %>%       ggline(x = \".id\", y = \"Length\",color = \"#2595be\", fill = \"#2595be\") +       labs(title = gid, x = \"Release\", y = \"Effective Length\") +       theme(axis.text.x = element_text(angle = 90, vjust = 0.5))   })  library(sjPlot) plot_grid(plts) library(dplyr) library(tidyr) library(tibble) library(ggpubr) library(GeneStructureTools)  ###  Step1 # Remove version suffix from GeneIDs df <- tgme49.gffs %>% plyr::ldply() %>%   mutate(GeneID = GeneStructureTools::removeVersion(GeneID))  # Get annotation table and identify outdated IDs annot <- getTable(org = \"Toxoplasma gondii ME49\", db = \"toxodb\") old <- setdiff(unique(df$GeneID), annot$`Gene ID`) ## 583 old IDs  # Map outdated to Ensembl IDs new_ids <- toGeneid(old, from = \"old\", to = \"ensembl\", org = \"Toxoplasma gondii ME49\", db = \"toxodb\") %>%   select(`Gene ID`, `Previous ID(s)`) %>%   distinct() ## only 332 mapped  # Replace outdated IDs in df. These are mostly apicoplast genes df$GeneID[match(new_ids$`Gene ID`,df$GeneID )] <- new_ids$`Gene ID`  # Filter for valid GeneIDs subdf <- df %>%   filter(GeneID %in% annot$`Gene ID`)  ###  Step 2  # Aggregate length per gene across releases df_agg <- subdf %>%   group_by(.id, GeneID) %>%   summarise(mean_length = round(mean(Length, na.rm = TRUE)), .groups = \"drop\") %>%   pivot_wider(names_from = GeneID, values_from = mean_length, values_fill = NA) %>%   column_to_rownames(\".id\") %>%   as.matrix()  ###  Step 3 # Coefficient of variation across releases cv <- cv <- apply(df_agg, 2, function(x) (sd(x, na.rm = TRUE) / mean(x, na.rm = TRUE)) * 100) %>%   sort(decreasing = TRUE)  ## Check for how many genes the effective length has changed table(cv>0) #3390 genes have their effective length changed #>  #> FALSE  TRUE  #>  4947  3390 ggpubr::gghistogram(cv,color = \"grey\", fill = \"grey\") ## Let's filter top 20 genes whose effective length has changed drastically and see what they are  annot %>%   select(`Gene ID`, `Product Description`) %>%   distinct() %>%   filter(`Gene ID` %in% names(cv)[1:20]) %>%   column_to_rownames(\"Gene ID\") %>%   .[names(cv)[1:20], , drop = FALSE] %>%   mutate(cv = cv[names(cv)[1:20]]) ## We see a lot of hypothetical genes #>                                                          Product Description #> TGME49_313740               zinc finger (CCCH type) motif-containing protein #> TGME49_265100                                           hypothetical protein #> TGME49_288850                                           hypothetical protein #> TGME49_245440                                           hypothetical protein #> TGME49_223845                                           hypothetical protein #> TGME49_313890                                           hypothetical protein #> TGME49_231998                                           hypothetical protein #> TGME49_291160                 dynein light polypeptide 4, axonemal, putative #> TGME49_311820                                           hypothetical protein #> TGME49_230135                                     Kinesin-associated protein #> TGME49_209945                                           hypothetical protein #> TGME49_254140                          DNA-directed RNA polymerase II RPABC4 #> TGME49_244890                                               cyclin, putative #> TGME49_310177                                           hypothetical protein #> TGME49_240790                                   dynein light chain, putative #> TGME49_260825                                           hypothetical protein #> TGME49_308830                           dual specificity protein phosphatase #> TGME49_261470           U6 snRNA-associated Sm family protein LSm6, putative #> TGME49_275750                    small nuclear ribonucleoprotein E, putative #> TGME49_283470 Kazal-type serine protease inhibitor domain-containing protein #>                     cv #> TGME49_313740 178.6757 #> TGME49_265100 171.6388 #> TGME49_288850 161.6959 #> TGME49_245440 157.8947 #> TGME49_223845 152.1074 #> TGME49_313890 151.9148 #> TGME49_231998 146.3761 #> TGME49_291160 143.9601 #> TGME49_311820 134.4396 #> TGME49_230135 134.2367 #> TGME49_209945 129.9972 #> TGME49_254140 126.7883 #> TGME49_244890 125.7379 #> TGME49_310177 125.1441 #> TGME49_240790 121.8464 #> TGME49_260825 121.0684 #> TGME49_308830 120.6382 #> TGME49_261470 120.3902 #> TGME49_275750 119.9072 #> TGME49_283470 119.0964  # plot top 2 variable genes plts <- names(cv)[1:2] %>%   lapply(function(gid) {     df %>%       filter(GeneID == gid) %>%       ggline(x = \".id\", y = \"Length\",color = \"#2595be\", fill = \"#2595be\") +       labs(title = gid, x = \"Release\", y = \"Effective Length\") +       theme(axis.text.x = element_text(angle = 90, vjust = 0.5))   })  library(sjPlot) plot_grid(plts)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Need_for_reanalysis.html","id":"discussion","dir":"Articles","previous_headings":"","what":"Discussion","title":"RNASeq: Need for reanalysis?","text":"scope reannotation directly influences whether legacy datasets remain reliable must reprocessed; technical choices inevitably affect downstream biological interpretations. found every major bulk transcriptomic study Plasmodium PlasmoDB relies annotations predating release 51 can benefit reanalysis. Therefore, analysis—correlation, co‐expression, single‐cell mapping—use reanalyzed data based ‐‐date GFFs. Given VEuPathDB’s constrained resources, reanalysis responsibility falls end users regenerate share reprocessed datasets whenever feasible.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/Need_for_reanalysis.html","id":"session","dir":"Articles","previous_headings":"","what":"Session","title":"RNASeq: Need for reanalysis?","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14 ucrt) #> Platform: x86_64-w64-mingw32/x64 #> Running under: Windows 11 x64 (build 26100) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_India.utf8  LC_CTYPE=English_India.utf8    #> [3] LC_MONETARY=English_India.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=English_India.utf8     #>  #> time zone: Asia/Riyadh #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #>  [1] sjPlot_2.9.0              GeneStructureTools_1.24.0 #>  [3] ggpubr_0.6.1              ggplot2_3.5.2             #>  [5] tibble_3.3.0              tidyr_1.3.1               #>  [7] dplyr_1.1.4               plasmoRUtils_1.1.0        #>  [9] rlang_1.1.6               readr_2.1.5               #> [11] janitor_2.2.1             BiocStyle_2.32.1          #>  #> loaded via a namespace (and not attached): #>   [1] IRanges_2.38.1                     dichromat_2.0-0.1                  #>   [3] vroom_1.6.5                        progress_1.2.3                     #>   [5] vsn_3.72.0                         nnet_7.3-19                        #>   [7] Biostrings_2.72.1                  vctrs_0.6.5                        #>   [9] digest_0.6.37                      png_0.1-8                          #>  [11] proxy_0.4-27                       MSnbase_2.30.1                     #>  [13] deldir_2.0-4                       parallelly_1.45.1                  #>  [15] MASS_7.3-61                        pkgdown_2.1.3                      #>  [17] reshape2_1.4.4                     foreach_1.5.2                      #>  [19] BiocGenerics_0.50.0                withr_3.0.2                        #>  [21] xfun_0.52                          survival_3.8-3                     #>  [23] memoise_2.0.1                      hexbin_1.28.5                      #>  [25] ggsci_3.2.0                        mixtools_2.0.0.1                   #>  [27] systemfonts_1.2.3                  ragg_1.4.0                         #>  [29] gtools_3.9.5                       easyPubMed_2.13                    #>  [31] Formula_1.2-5                      prettyunits_1.2.0                  #>  [33] KEGGREST_1.44.1                    promises_1.3.3                     #>  [35] httr_1.4.7                         rstatix_0.7.2                      #>  [37] restfulr_0.0.16                    globals_0.18.0                     #>  [39] ps_1.9.1                           rstudioapi_0.17.1                  #>  [41] UCSC.utils_1.0.0                   generics_0.1.4                     #>  [43] base64enc_0.1-3                    processx_3.8.6                     #>  [45] curl_6.4.0                         ncdf4_1.24                         #>  [47] S4Vectors_0.42.1                   zlibbioc_1.50.0                    #>  [49] ScaledMatrix_1.12.0                randomForest_4.7-1.2               #>  [51] bio3d_2.4-5                        GenomeInfoDbData_1.2.12            #>  [53] SparseArray_1.4.8                  xtable_1.8-4                       #>  [55] stringr_1.5.1                      desc_1.4.3                         #>  [57] doParallel_1.0.17                  evaluate_1.0.4                     #>  [59] S4Arrays_1.4.1                     BiocFileCache_2.12.0               #>  [61] preprocessCore_1.66.0              hms_1.1.3                          #>  [63] GenomicRanges_1.56.2               bookdown_0.43                      #>  [65] irlba_2.3.5.1                      colorspace_2.1-1                   #>  [67] filelock_1.0.3                     magrittr_2.0.3                     #>  [69] snakecase_0.11.1                   later_1.4.2                        #>  [71] viridis_0.6.5                      lattice_0.22-6                     #>  [73] MsCoreUtils_1.16.1                 future.apply_1.20.0                #>  [75] SparseM_1.84-2                     XML_3.99-0.18                      #>  [77] scuttle_1.14.0                     matrixStats_1.5.0                  #>  [79] Hmisc_5.2-3                        class_7.3-22                       #>  [81] pillar_1.11.0                      nlme_3.1-166                       #>  [83] iterators_1.0.14                   compiler_4.4.1                     #>  [85] beachmat_2.20.0                    stringi_1.8.7                      #>  [87] gower_1.0.2                        SummarizedExperiment_1.34.0        #>  [89] dendextend_1.19.1                  lubridate_1.9.4                    #>  [91] GenomicAlignments_1.40.0           drawProteins_1.24.0                #>  [93] plyr_1.8.9                         crayon_1.5.3                       #>  [95] abind_1.4-8                        BiocIO_1.14.0                      #>  [97] bit_4.6.0                          chromote_0.5.1                     #>  [99] pcaMethods_1.96.0                  codetools_0.2-20                   #> [101] textshaping_1.0.1                  recipes_1.3.1                      #> [103] BiocSingular_1.20.0                MLInterfaces_1.84.0                #> [105] bslib_0.9.0                        e1071_1.7-16                       #> [107] biovizBase_1.52.0                  plotly_4.11.0                      #> [109] LaplacesDemon_16.1.6               MultiAssayExperiment_1.30.3        #> [111] splines_4.4.1                      Rcpp_1.1.0                         #> [113] dbplyr_2.5.0                       sparseMatrixStats_1.16.0           #> [115] interp_1.1-6                       knitr_1.50                         #> [117] blob_1.2.4                         clue_0.3-66                        #> [119] mzR_2.38.0                         AnnotationFilter_1.28.0            #> [121] fs_1.6.6                           checkmate_2.3.2                    #> [123] QFeatures_1.14.2                   listenv_0.9.1                      #> [125] mzID_1.42.0                        DelayedMatrixStats_1.26.0          #> [127] Gviz_1.48.0                        ggsignif_0.6.4                     #> [129] Matrix_1.7-1                       statmod_1.5.0                      #> [131] tzdb_0.5.0                         lpSolve_5.6.23                     #> [133] pkgconfig_2.0.3                    tools_4.4.1                        #> [135] cachem_1.1.0                       BSgenome.Mmusculus.UCSC.mm10_1.4.3 #> [137] RSQLite_2.4.1                      viridisLite_0.4.2                  #> [139] rvest_1.0.4                        DBI_1.2.3                          #> [141] impute_1.78.0                      fastmap_1.2.0                      #> [143] rmarkdown_2.29                     scales_1.4.0                       #> [145] grid_4.4.1                         gt_1.0.0                           #> [147] Rsamtools_2.20.0                   broom_1.0.8                        #> [149] sass_0.4.10                        coda_0.19-4.1                      #> [151] FNN_1.1.4.1                        BiocManager_1.30.26                #> [153] VariantAnnotation_1.50.0           graph_1.82.0                       #> [155] carData_3.0-5                      SingleR_2.6.0                      #> [157] rpart_4.1.23                       farver_2.1.2                       #> [159] yaml_2.3.10                        AnnotationForge_1.46.0             #> [161] latticeExtra_0.6-30                foreign_0.8-87                     #> [163] MatrixGenerics_1.16.0              rtracklayer_1.64.0                 #> [165] cli_3.6.5                          purrr_1.1.0                        #> [167] stats4_4.4.1                       txdbmaker_1.0.1                    #> [169] lifecycle_1.0.4                    caret_7.0-1                        #> [171] Biobase_2.64.0                     mvtnorm_1.3-3                      #> [173] lava_1.8.1                         kernlab_0.9-33                     #> [175] backports_1.5.0                    BiocParallel_1.38.0                #> [177] annotate_1.82.0                    timechange_0.3.0                   #> [179] gtable_0.3.6                       rjson_0.2.23                       #> [181] parallel_4.4.1                     pROC_1.18.5                        #> [183] limma_3.60.6                       jsonlite_2.0.0                     #> [185] bitops_1.0-9                       bit64_4.6.0-1                      #> [187] pRoloc_1.44.1                      jquerylib_0.1.4                    #> [189] segmented_2.1-4                    timeDate_4041.110                  #> [191] lazyeval_0.2.2                     htmltools_0.5.8.1                  #> [193] affy_1.82.0                        GO.db_3.19.1                       #> [195] rappdirs_0.3.3                     ensembldb_2.28.1                   #> [197] glue_1.8.0                         polyglotr_1.7.0                    #> [199] httr2_1.2.0                        XVector_0.44.0                     #> [201] RCurl_1.98-1.17                    MALDIquant_1.22.3                  #> [203] mclust_6.1.1                       BSgenome_1.72.0                    #> [205] jpeg_0.1-11                        gridExtra_2.3                      #> [207] igraph_2.1.4                       R6_2.6.1                           #> [209] SingleCellExperiment_1.26.0        labeling_0.4.3                     #> [211] GenomicFeatures_1.56.0             cluster_2.1.8                      #> [213] stringdist_0.9.15                  GenomeInfoDb_1.40.1                #> [215] ipred_0.9-15                       DelayedArray_0.30.1                #> [217] tidyselect_1.2.1                   ProtGenerics_1.36.0                #> [219] htmlTable_2.4.3                    sampling_2.11                      #> [221] xml2_1.3.8                         car_3.1-3                          #> [223] AnnotationDbi_1.66.0               future_1.67.0                      #> [225] ModelMetrics_1.2.2.2               rsvd_1.0.5                         #> [227] affyio_1.74.0                      topGO_2.56.0                       #> [229] data.table_1.17.8                  websocket_1.4.4                    #> [231] mgsub_1.7.3                        htmlwidgets_1.6.4                  #> [233] RColorBrewer_1.1-3                 biomaRt_2.60.1                     #> [235] hardhat_1.4.1                      prodlim_2025.04.28                 #> [237] PSMatch_1.8.0"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/retrieving_orthologs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Retrieving Orthologs","text":"Users might require Ortholog mapping : assess phyletic profile set genes see orthologs related organism . integrate datasets obtained two different species. Often datasets scRNASeq (eg: (Tebben, Dia, Serre 2022)) borrow annotations localization hypothesis generation. perform co-expression analysis two different species. Whatever use case maybe, see can exploit getpairedOrthologs() fetch orthologs multiple organisms interest batch manner integrate . , try get Plasmodium falciparum 3D7 (1742855) orthologs present Toxoplasma gondii ME49 (1747281), Plasmodium berghei ANKA (1742951) Plasmodium vivax Sal1(1744988). numbers mentioned alongside vocabulary unique IDs OrthoMCL uses fetch paired orthologs. Since OrthoMCL VEuPathDB database updated simultaneously, chances might using old OrthoMCL ID. ’s case function much helpful. workaround fetch old OrthoMCL IDs organisms respective databases use anchor combine collapse gene IDs organisms. code snippet demonstrate .","code":"# Load package and some other useful packages by using suppressPackageStartupMessages(   suppressWarnings({     library(plasmoRUtils)     library(dplyr)     library(plyr)})) #?getpairedOrthologs # listOrthomcl()  res <- lapply(c(1744988,1747281,1742951), function(x){   getpairedOrthologs(from = 1742855,                      to=x,                      db=\"orthomcl\",transform = FALSE) }) %>% setNames(c(\"Pvivax\",\"Tgme49\",\"Pb\"))  merged_df <- Reduce(function(x, y) merge(x, y, by = \"Accession\", all = TRUE), res) merged_df %>% head() #>            Accession #> 1 pfal|PF3D7_0100100 #> 2 pfal|PF3D7_0100300 #> 3 pfal|PF3D7_0102500 #> 4 pfal|PF3D7_0102600 #> 5 pfal|PF3D7_0102700 #> 6 pfal|arget ID.x #> 1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 pviv|pviv|PVX_110810 #> 3                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 pviv|pviv|PVX_088265 #> 5 pviv|PVX_112665,pviv|PVX_090250,pviv|PVX_097577,pviv|PVX_094305,pviv|PVX_101510,pviv|PVX_002500,pviv|PVX_090275,pviv|PVX_092995,pviv|PVX_090270,pviv|PVX_112675,pviv|PVX_096950,pviv|PVX_125730,pviv|PVX_101525,pviv|PVX_112670,pviv|PVX_083550,pviv|PVX_088825,pviv|PVX_092990,pviv|PVX_115465,pviv|PVX_090260,pviv|PVX_112690,pviv|PVX_088810,pviv|PVX_121897,pviv|PVX_090255,pviv|PVX_101515,pviv|PVX_112705,pviv|PVX_088850,pviv|PVX_112660,pviv|PVX_125728,pviv|PVX_109280,pviv|PVX_088820,pviv|PVX_097575,pviv|PVX_096995,pviv|PVX_090265,pviv|pviv|PVX_081615 #>          Target ID.y #> 1               <NA> #> 2               <NA> #> 3               <NA> #> 4 tgon|TGME49_289050 #> 5               <NA> #> 6               <NA> #>                                                                                                                 Target ID #> 1                                                                                                     pber|PBANKA_1332700 #> 2                                                                                                     pber|PBANKA_1332700 #> 3                                                                                                     pber|PBANKA_1332700 #> 4                                                                                                     pber|PBANKA_1225000 #> 5 pber|PBANKA_0623100,pber|PBANKA_1146100,pber|PBANKA_0524300,pber|PBANKA_0524400,pber|PBANKA_1146000,pber|PBANKA_0623300 #> 6                                                                                                     pber|PBANKA_0210300  ## Tidying up the dataframe by removing organisms prefixes strip_prefix <- function(x) sub(\"^[^|]+\\\\|\", \"\", x)     # per-token clean_list   <- function(s) {     toks <- trimws(strsplit(s, \",\", fixed = TRUE)[[1]])     paste(vapply(toks, strip_prefix, character(1)), collapse = \",\") }  merged_df[] <- lapply(merged_df, function(col) vapply(col, clean_list, character(1)))  ## Changing column names colnames(merged_df) <- c(\"P falciparum 3D7\",\"P vivax Sal1\",\"T gondii ME49\",\"Plasmodium berghei ANKA\")  merged_df %>% head() #>   P falciparum 3D7 #> 1    PF3D7_0100100 #> 2    PF3D7_0100300 #> 3    PF3D7_0102500 #> 4    PF3D7_0102600 #> 5    PF3D7_0102700 #> 6    PF3D7_0102800 #>                                                                                                                                                                                                                                                                                                                                                                            P vivax Sal1 #> 1                                                                                                                                                                                                                                                                                                                                                                            PVX_110810 #> 2                                                                                                                                                                                                                                                                                                                                                                            PVX_110810 #> 3                                                                                                                                                                                                                                                                                                                                                                            PVX_110810 #> 4                                                                                                                                                                                                                                                                                                                                                                            PVX_088265 #> 5 PVX_112665,PVX_090250,PVX_097577,PVX_094305,PVX_101510,PVX_002500,PVX_090275,PVX_092995,PVX_090270,PVX_112675,PVX_096950,PVX_125730,PVX_101525,PVX_112670,PVX_083550,PVX_088825,PVX_092990,PVX_115465,PVX_090260,PVX_112690,PVX_088810,PVX_121897,PVX_090255,PVX_101515,PVX_112705,PVX_088850,PVX_112660,PVX_125728,PVX_109280,PVX_088820,PVX_097575,PVX_096995,PVX_090265,PVX_112655 #> 6                                                                                                                                                                                                                                                                                                                                                                            PVX_081615 #>   T gondii ME49 #> 1            NA #> 2            NA #> 3            NA #> 4 TGME49_289050 #> 5            NA #> 6            NA #>                                                                     Plasmodium berghei ANKA #> 1                                                                            PBANKA_1332700 #> 2                                                                            PBANKA_1332700 #> 3                                                                            PBANKA_1332700 #> 4                                                                            PBANKA_1225000 #> 5 PBANKA_0623100,PBANKA_1146100,PBANKA_0524300,PBANKA_0524400,PBANKA_1146000,PBANKA_0623300 #> 6                                                                            PBANKA_0210300 ## List all organisms list <- listVeupathdb(customFields = c(\"primary_key\",\"project_id\",\"species\",'species_ncbi_tax_id'))  ## Subset organisms I am interested in  dbs <- list[grep(\"3D7|ME49$|Sal-1\", list$Organism),] dbs #> # A tibble: 3 × 4 #>   Organism                  `VEuPathDB Project` Species   Species NCBI taxon I…¹ #>   <chr>                     <chr>               <chr>                      <dbl> #> 1 Plasmodium vivax Sal-1    PlasmoDB            Plasmodi…                   5855 #> 2 Plasmodium falciparum 3D7 PlasmoDB            Plasmodi…                   5833 #> 3 Toxoplasma gondii ME49    ToxoDB              Toxoplas…                   5811 #> # ℹ abbreviated name: ¹​`Species NCBI taxon ID` df <- lapply(1:nrow(dbs), function(x){   plasmoRUtils::getTable(org=dbs[x,]$Organism, db=tolower(dbs[x,]$`VEuPathDB Project`),customFields = c(\"primary_key\" ,\"gene_orthomcl_name\")) })  ## Retain protein coding genes  df2 <- lapply(df, function(x){   x[!(stringr::str_detect(pattern = \"N/A\",string = x$`Ortholog Group`)),] })  ## Combine all the tables merged_df2 <- Reduce(function(x, y) merge(x, y, by = \"Ortholog Group\", all = TRUE), df2)  merged_df2 %>% head(n = 10) #>    Ortholog Group  Gene ID.x     Gene ID.y       Gene ID #> 1      OG6_100000       <NA>          <NA> TGME49_231880 #> 2      OG6_100004 PVX_086920          <NA>          <NA> #> 3      OG6_100006 PVX_083360 PF3D7_1349300 TGME49_237210 #> 4      OG6_100006 PVX_118355 PF3D7_1349300 TGME49_237210 #> 5      OG6_100007 PVX_001655          <NA>          <NA> #> 6      OG6_100012 PVX_001960 PF3D7_1021900 TGME49_261590 #> 7      OG6_100012 PVX_001960 PF3D7_1021900 TGME49_308810 #> 8      OG6_100012 PVX_001960 PF3D7_1423100 TGME49_261590 #> 9      OG6_100012 PVX_001960 PF3D7_1423100 TGME49_308810 #> 10     OG6_100012 PVX_085325 PF3D7_1021900 TGME49_261590 ## Combining all the gene IDs in each column so that we have 1 row per orthogroup merged_df2 <- merged_df2 %>%    dplyr::group_by( `Ortholog Group`) %>%    dplyr::summarise(dplyr::across(dplyr::everything(),                                   ~paste(unique(.x), collapse = \",\")), .groups = \"drop\")  ## Changing column names colnames(merged_df2) <- c(\"Orthogroup ID\",\"P vivax Sal1\",\"P falciparum 3D7\",\"T gondii ME49\") merged_df2 %>% head(n = 10) #> # A tibble: 10 × 4 #>    `Orthogroup ID` `P vivax Sal1`             `P falciparum 3D7` `T gondii ME49` #>    <chr>           <chr>                      <chr>              <chr>           #>  1 OG6_100000      NA                         NA                 TGME49_231880   #>  2 OG6_100004      PVX_086920                 NA                 NA              #>  3 OG6_100006      PVX_083360,PVX_118355      PF3D7_1349300      TGME49_237210   #>  4 OG6_100007      PVX_001655                 NA                 NA              #>  5 OG6_100012      PVX_001960,PVX_085325      PF3D7_1021900,PF3… TGME49_261590,… #>  6 OG6_100025      PVX_081792,PVX_005565,PVX… PF3D7_1465800,PF3… TGME49_294550,… #>  7 OG6_100026      PVX_096045,PVX_124085,PVX… PF3D7_1229100,PF3… TGME49_320460   #>  8 OG6_100029      NA                         NA                 TGME49_207210   #>  9 OG6_100034      PVX_089960                 NA                 NA              #> 10 OG6_100045      PVX_095250                 PF3D7_0319700      NA"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/retrieving_orthologs.html","id":"fetching-orthologs-from-inparanoidb","dir":"Articles","previous_headings":"","what":"Fetching orthologs from InParanoiDB","title":"Retrieving Orthologs","text":"InParanoiDB uses NCBI taxon IDs unique identifiers. P. falciparum (36329), T. gondii (5811), P. vivax (126793) P. berghei (5823), fetch pairwise orthologs keeping P. falciparum constant species. can recycle code follows. Combining results across InParanoiDB, straightforward OrthoMCL lack unique Orthogroup ID. However, user can use Query Uniprot ID anchor, combine results, convert Uniprot IDs gene IDs collapse rows since two Uniprot IDs might correspond gene IDs.","code":"#?getpairedOrthologs # listipdb()  res <- lapply(c(126793,5811,5823), function(x){   getpairedOrthologs(from = 36329,                      to=x,                      db=\"ipdb\",transform = TRUE) }) %>% setNames(c(\"Pvivax\",\"Tgme49\",\"Pb\"))  res[[1]] %>% head() #> # A tibble: 6 × 11 #>   `query_Group-id` query_Bitscore query_Species           query_Inparalog-scor…¹ #>              <dbl> <chr>          <chr>                   <chr>                  #> 1                1 8359           Plasmodium falciparum … 1                      #> 2                2 8119           Plasmodium falciparum … 1                      #> 3                3 7587           Plasmodium falciparum … 1                      #> 4                4 7155           Plasmodium falciparum … 1                      #> 5                5 6891           Plasmodium falciparum … 1                      #> 6                6 6507           Plasmodium falciparum … 1                      #> # ℹ abbreviated name: ¹​`query_Inparalog-score` #> # ℹ 7 more variables: `query_Protein-name` <chr>, `query_Seed-score` <chr>, #> #   target_Bitscore <chr>, target_Species <chr>, #> #   `target_Inparalog-score` <chr>, `target_Protein-name` <chr>, #> #   `target_Seed-score` <chr>"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/articles/retrieving_orthologs.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Retrieving Orthologs","text":"","code":"utils::sessionInfo() #> R version 4.4.1 (2024-06-14 ucrt) #> Platform: x86_64-w64-mingw32/x64 #> Running under: Windows 11 x64 (build 26100) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_India.utf8  LC_CTYPE=English_India.utf8    #> [3] LC_MONETARY=English_India.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=English_India.utf8     #>  #> time zone: Asia/Riyadh #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] plyr_1.8.9         dplyr_1.1.4        plasmoRUtils_1.1.0 rlang_1.1.6        #> [5] readr_2.1.5        janitor_2.2.1      BiocStyle_2.32.1   #>  #> loaded via a namespace (and not attached): #>   [1] segmented_2.1-4             fs_1.6.6                    #>   [3] ProtGenerics_1.36.0         matrixStats_1.5.0           #>   [5] bitops_1.0-9                lubridate_1.9.4             #>   [7] pRoloc_1.44.1               httr_1.4.7                  #>   [9] RColorBrewer_1.1-3          doParallel_1.0.17           #>  [11] ggsci_3.2.0                 tools_4.4.1                 #>  [13] MSnbase_2.30.1              backports_1.5.0             #>  [15] utf8_1.2.6                  R6_2.6.1                    #>  [17] lazyeval_0.2.2              withr_3.0.2                 #>  [19] prettyunits_1.2.0           gridExtra_2.3               #>  [21] preprocessCore_1.66.0       cli_3.6.5                   #>  [23] Biobase_2.64.0              textshaping_1.0.1           #>  [25] gt_1.0.0                    sass_0.4.10                 #>  [27] topGO_2.56.0                mvtnorm_1.3-3               #>  [29] randomForest_4.7-1.2        proxy_0.4-27                #>  [31] pkgdown_2.1.3               Rsamtools_2.20.0            #>  [33] systemfonts_1.2.3           txdbmaker_1.0.1             #>  [35] AnnotationForge_1.46.0      dichromat_2.0-0.1           #>  [37] parallelly_1.45.1           limma_3.60.6                #>  [39] rstudioapi_0.17.1           impute_1.78.0               #>  [41] RSQLite_2.4.1               FNN_1.1.4.1                 #>  [43] generics_0.1.4              BiocIO_1.14.0               #>  [45] vroom_1.6.5                 gtools_3.9.5                #>  [47] car_3.1-3                   dendextend_1.19.1           #>  [49] GO.db_3.19.1                Matrix_1.7-1                #>  [51] MALDIquant_1.22.3           drawProteins_1.24.0         #>  [53] S4Vectors_0.42.1            abind_1.4-8                 #>  [55] lifecycle_1.0.4             yaml_2.3.10                 #>  [57] snakecase_0.11.1            carData_3.0-5               #>  [59] SummarizedExperiment_1.34.0 recipes_1.3.1               #>  [61] SparseArray_1.4.8           BiocFileCache_2.12.0        #>  [63] grid_4.4.1                  blob_1.2.4                  #>  [65] promises_1.3.3              crayon_1.5.3                #>  [67] PSMatch_1.8.0               lattice_0.22-6              #>  [69] beachmat_2.20.0             annotate_1.82.0             #>  [71] GenomicFeatures_1.56.0      chromote_0.5.1              #>  [73] mzR_2.38.0                  KEGGREST_1.44.1             #>  [75] pillar_1.11.0               knitr_1.50                  #>  [77] GenomicRanges_1.56.2        rjson_0.2.23                #>  [79] lpSolve_5.6.23              future.apply_1.20.0         #>  [81] codetools_0.2-20            mgsub_1.7.3                 #>  [83] glue_1.8.0                  pcaMethods_1.96.0           #>  [85] data.table_1.17.8           MultiAssayExperiment_1.30.3 #>  [87] vctrs_0.6.5                 png_0.1-8                   #>  [89] gtable_0.3.6                kernlab_0.9-33              #>  [91] cachem_1.1.0                gower_1.0.2                 #>  [93] xfun_0.52                   prodlim_2025.04.28          #>  [95] S4Arrays_1.4.1              polyglotr_1.7.0             #>  [97] coda_0.19-4.1               survival_3.8-3              #>  [99] ncdf4_1.24                  timeDate_4041.110           #> [101] SingleCellExperiment_1.26.0 iterators_1.0.14            #> [103] hardhat_1.4.1               lava_1.8.1                  #> [105] statmod_1.5.0               MLInterfaces_1.84.0         #> [107] ipred_0.9-15                nlme_3.1-166                #> [109] bit64_4.6.0-1               progress_1.2.3              #> [111] filelock_1.0.3              LaplacesDemon_16.1.6        #> [113] GenomeInfoDb_1.40.1         bslib_0.9.0                 #> [115] affyio_1.74.0               irlba_2.3.5.1               #> [117] rpart_4.1.23                colorspace_2.1-1            #> [119] BiocGenerics_0.50.0         DBI_1.2.3                   #> [121] nnet_7.3-19                 tidyselect_1.2.1            #> [123] processx_3.8.6              bit_4.6.0                   #> [125] compiler_4.4.1              curl_6.4.0                  #> [127] rvest_1.0.4                 httr2_1.2.0                 #> [129] graph_1.82.0                SparseM_1.84-2              #> [131] xml2_1.3.8                  desc_1.4.3                  #> [133] DelayedArray_0.30.1         plotly_4.11.0               #> [135] bookdown_0.43               rtracklayer_1.64.0          #> [137] scales_1.4.0                hexbin_1.28.5               #> [139] affy_1.82.0                 rappdirs_0.3.3              #> [141] stringr_1.5.1               digest_0.6.37               #> [143] mixtools_2.0.0.1            rmarkdown_2.29              #> [145] XVector_0.44.0              htmltools_0.5.8.1           #> [147] pkgconfig_2.0.3             SingleR_2.6.0               #> [149] sparseMatrixStats_1.16.0    MatrixGenerics_1.16.0       #> [151] dbplyr_2.5.0                fastmap_1.2.0               #> [153] htmlwidgets_1.6.4           UCSC.utils_1.0.0            #> [155] DelayedMatrixStats_1.26.0   farver_2.1.2                #> [157] jquerylib_0.1.4             jsonlite_2.0.0              #> [159] mclust_6.1.1                BiocParallel_1.38.0         #> [161] mzID_1.42.0                 ModelMetrics_1.2.2.2        #> [163] BiocSingular_1.20.0         RCurl_1.98-1.17             #> [165] magrittr_2.0.3              scuttle_1.14.0              #> [167] Formula_1.2-5               GenomeInfoDbData_1.2.12     #> [169] Rcpp_1.1.0                  viridis_0.6.5               #> [171] MsCoreUtils_1.16.1          vsn_3.72.0                  #> [173] pROC_1.18.5                 stringi_1.8.7               #> [175] zlibbioc_1.50.0             MASS_7.3-61                 #> [177] listenv_0.9.1               parallel_4.4.1              #> [179] Biostrings_2.72.1           splines_4.4.1               #> [181] hms_1.1.3                   ps_1.9.1                    #> [183] igraph_2.1.4                ggpubr_0.6.1                #> [185] QFeatures_1.14.2            ggsignif_0.6.4              #> [187] reshape2_1.4.4              biomaRt_2.60.1              #> [189] stats4_4.4.1                ScaledMatrix_1.12.0         #> [191] XML_3.99-0.18               evaluate_1.0.4              #> [193] BiocManager_1.30.26         tzdb_0.5.0                  #> [195] foreach_1.5.2               tidyr_1.3.1                 #> [197] purrr_1.1.0                 future_1.67.0               #> [199] clue_0.3-66                 bio3d_2.4-5                 #> [201] ggplot2_3.5.2               rsvd_1.0.5                  #> [203] xtable_1.8-4                broom_1.0.8                 #> [205] restfulr_0.0.16             AnnotationFilter_1.28.0     #> [207] easyPubMed_2.13             e1071_1.7-16                #> [209] rstatix_0.7.2               later_1.4.2                 #> [211] class_7.3-22                viridisLite_0.4.2           #> [213] ragg_1.4.0                  tibble_3.3.0                #> [215] websocket_1.4.4             memoise_2.0.1               #> [217] AnnotationDbi_1.66.0        GenomicAlignments_1.40.0    #> [219] IRanges_2.38.1              cluster_2.1.8               #> [221] globals_0.18.0              timechange_0.3.0            #> [223] caret_7.0-1                 sampling_2.11"},{"path":[]},{"path":"https://rohit-satyam.github.io/plasmoRUtils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rohit Satyam. Author, maintainer. Alberto Maillo. Author, contributor. David Gomez-Cabrero. Author. Arnab Pain. Author.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Satyam R, Maillo , Gomez-Cabrero D, Pain (2025). plasmoRUtils: one-stop R Package Plasmodium Apicomplexan parasite-related Bioinformatics analysis. R package version 1.1.0, https://rohit-satyam.github.io/plasmoRUtils/.","code":"@Manual{,   title = {plasmoRUtils: A one-stop R Package for Plasmodium and other Apicomplexan parasite-related Bioinformatics analysis},   author = {Rohit Satyam and Alberto Maillo and David Gomez-Cabrero and Arnab Pain},   year = {2025},   note = {R package version 1.1.0},   url = {https://rohit-satyam.github.io/plasmoRUtils/}, }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/Contributing.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant, version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/index.html","id":"plasmorutils-","dir":"","previous_headings":"","what":"A one-stop R Package for Plasmodium and other Apicomplexan parasite-related Bioinformatics analysis","title":"A one-stop R Package for Plasmodium and other Apicomplexan parasite-related Bioinformatics analysis","text":"plasmoRUtils enables users connect several Plasmodium apicomplexan databases via R interface provides simple functions carry bioinformatics tasks non-trival parasite informatic analysis. details, recommend read preprint.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A one-stop R Package for Plasmodium and other Apicomplexan parasite-related Bioinformatics analysis","text":"easiest way download package follows method fails, try following steps: downloading package, install following dependencies. can install development version plasmoRUtils using:","code":"pak::pkg_install(\"Rohit-Satyam/plasmoRUtils\", dependencies = TRUE) cranpkgs <- c('BiocManager','randomcoloR', 'janitor', 'readr', 'rlang', 'dplyr', 'ggsci', 'rvest', 'easyPubMed', 'plyr', 'scales', 'ggplot2', 'glue', 'tidyr', 'tibble', 'data.table', 'plotly', 'purrr', 'stringr', 'S4Vectors', 'magrittr', 'bio3d', 'httr', 'jsonlite', 'ggpubr', 'gt', 'mgsub', 'reshape2','pathfindR','polyglotr')  install.packages(setdiff(cranpkgs, rownames(installed.packages())), dependencies = TRUE)  biocpkgs <- c(\"rmarkdown\",\"pRoloc\",\"knitr\",\"BiocStyle\",\"DESeq2\",\"styler\",\"utils\",\"IRanges\", \"BiocGenerics\",\"rtracklayer\",\"scuttle\",\"txdbmaker\",\"topGO\",\"drawProteins\",\"GenomicFeatures\", \"biomaRt\",\"AnnotationForge\",\"Biostrings\",\"GenomeInfoDb\",\"SingleCellExperiment\", \"SingleR\",\"NOISeq\",\"GenomicRanges\",\"BSgenome\")  BiocManager::install(setdiff(biocpkgs, rownames(installed.packages())), dependencies = TRUE) devtools::install_github(\"Rohit-Satyam/plasmoRUtils\") remotes::install_github('Rohit-Satyam/plasmoRUtils')"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/index.html","id":"check-installation","dir":"","previous_headings":"","what":"Check installation","title":"A one-stop R Package for Plasmodium and other Apicomplexan parasite-related Bioinformatics analysis","text":"dependencies installed, package can loaded follows:","code":"# Once installed load the library as library(plasmoRUtils)  ## To re-check if all the dependencies that are required by plasmoRUtils are installed install_dependencies()"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"A one-stop R Package for Plasmodium and other Apicomplexan parasite-related Bioinformatics analysis","text":"documentation package available following: Introduction plasmoRUtils Accessing component databases VEuPathDB useful functions RNASeq: Importance reanalysis","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/index.html","id":"to-do-list","dir":"","previous_headings":"","what":"To-do List","title":"A one-stop R Package for Plasmodium and other Apicomplexan parasite-related Bioinformatics analysis","text":"Write wrapper function, easypathFindR, perform Pathway enrichment analysis quickly. Write function make String PPI quickly.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"A one-stop R Package for Plasmodium and other Apicomplexan parasite-related Bioinformatics analysis","text":"’re excited contribute package! ’d like help , try follow style conventions used current functions - makes sense, course. ideas suggestions, don’t hesitate reach —opening GitHub issue usually best way start conversation. Just heads : project Contributor Code Conduct, getting involved, ’re agreeing play rules. Thanks helping make project better!","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Rohit Satyam Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/dot-clickable.html","id":null,"dir":"Reference","previous_headings":"","what":"plasmoRUtils — .clickable","title":"plasmoRUtils — .clickable","text":"Hidden function fetch expandable tables MPMP database","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/dot-clickable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plasmoRUtils — .clickable","text":"","code":".clickable(url)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/dot-clickable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plasmoRUtils — .clickable","text":"url MPMP url.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/dot-fast_ifelse2.html","id":null,"dir":"Reference","previous_headings":"","what":"Fastest IfElse function: https://github.com/ICJIA/r-user-group/issues/11 — .fast_ifelse2","title":"Fastest IfElse function: https://github.com/ICJIA/r-user-group/issues/11 — .fast_ifelse2","text":"Fastest IfElse function: https://github.com/ICJIA/r-user-group/issues/11","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/dot-fast_ifelse2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fastest IfElse function: https://github.com/ICJIA/r-user-group/issues/11 — .fast_ifelse2","text":"","code":".fast_ifelse2(test, yes, no)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/dot-nonclickable.html","id":null,"dir":"Reference","previous_headings":"","what":"plasmoRUtils — .nonclickable","title":"plasmoRUtils — .nonclickable","text":"Hidden function download static tables MPMP database","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/dot-nonclickable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plasmoRUtils — .nonclickable","text":"","code":".nonclickable(url)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/dot-nonclickable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plasmoRUtils — .nonclickable","text":"url MPMP url.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/dot-usetopGO.html","id":null,"dir":"Reference","previous_headings":"","what":"plasmoRUtils — .usetopGO","title":"plasmoRUtils — .usetopGO","text":"Hidden function called easytopGO run topGO.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/dot-usetopGO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plasmoRUtils — .usetopGO","text":"","code":".usetopGO(   stats = stats,   category = category,   geneID = geneID,   gene_2_GO = gene_2_GO,   algo = algo,   fdr = fdr,   correction = correction )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyAF2Signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Signal peptide fidelity — easyAF2Signal","title":"Check Signal peptide fidelity — easyAF2Signal","text":"convenience function compute atomic contacts predicted signal peptide rest protein AlphaFold2 structures. implements FORTRAN code Elcock-Lab/AlphaFold2-Signal, added features calculate median pLDDT count residues surpassing pLDDT threshold signal peptide. Unlike FORTRAN version, function highlights cases low-confidence signal peptide structures filter residues, suggesting may represent true outward-facing signal peptides.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyAF2Signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Signal peptide fidelity — easyAF2Signal","text":"","code":"easyAF2Signal(pdb, cut_dist = 4, nsignal = 25, bfac_thresh = 90, nskip = 1)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyAF2Signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Signal peptide fidelity — easyAF2Signal","text":"pdb link PDB file path PDB file file locally present. cut_dist Distance cutoff defining atomic contacts (Default: 4 Angstroms). nsignal Number residues comprise N-terminal signal peptide. SignalP prediction available protein, predicted length used. (Default: 25). bfac_thresh pLDDT threshold including residues atomic contact calculation. nskip . residues immediately next cleavage site exclude atomic contact calculations.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyAF2Signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Signal peptide fidelity — easyAF2Signal","text":"data frame, containing statistics signal peptide rest protein. Zero atomic residue-residue contact indicative True positives non-zero values putative False Positives.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyAF2Signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Signal peptide fidelity — easyAF2Signal","text":"","code":"if (FALSE) { # \\dontrun{ df <- easyAF2Signal(\"https://alphafold.ebi.ac.uk/files/AF-Q9TY95-F1-model_v4.pdb\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyExpPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Normalised expression quickly — easyExpPlot","title":"Plot Normalised expression quickly — easyExpPlot","text":"convenience function make line plots bubble plots showcase gene expression trends across time points sample groups","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyExpPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Normalised expression quickly — easyExpPlot","text":"","code":"easyExpPlot(df, x, y, value, type = \"line\", scaleBubbles = c(2, 6))"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyExpPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Normalised expression quickly — easyExpPlot","text":"df 3 column data frame bee transformed using reshape2::melt function. x, y x y variables drawing. value Remaining column choosing x y. column numeric type=\"line\" character type=\"bubble\". type Type plot. Default (\"line\").","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyExpPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Normalised expression quickly — easyExpPlot","text":"line plot bubble plot represents trends across different time points sample types.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyExpPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Normalised expression quickly — easyExpPlot","text":"","code":"if (FALSE) { # \\dontrun{   # Load sample data that contain Z-score transformed TPM values (randomly generated) for some genes   data(pf3d7TPMs)     df <- reshape2::melt(pf3d7TPMs,\"Probe\",na.rm = T)    easyExpPlot(df,x=\"variable\",y=\"Probe\",value=\"value\", type = \"bubble\")   easyExpPlot(df,x=\"variable\",y=\"value\",value=\"Probe\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyGOPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick ORA result plotting — easyGOPlot","title":"Quick ORA result plotting — easyGOPlot","text":"convenience function quickly plot results easytopGO ORA results obtained VEupathDB component databases.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyGOPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick ORA result plotting — easyGOPlot","text":"","code":"easyGOPlot(   res,   title = \"GO Biological processes\",   limit = 20,   desc = \"Term\",   genecounts = \"Annotated\",   sortby = \"ks\" )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyGOPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick ORA result plotting — easyGOPlot","text":"res Output easytopGO. title Title plot. limit terms plot. desc Column name containing GO description.using VEuPathDB compnent database, \"Name\" column. genecounts Column name containing number query genes associated GO description. Used bubble size. VEupathDB \"Result count\" column. sortby Name statistics column sort terms use plotting.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyGOPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick ORA result plotting — easyGOPlot","text":"publication ready ggplot2 object.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyGOPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick ORA result plotting — easyGOPlot","text":"","code":"if (FALSE) { # \\dontrun{ ## get enrichment results from easytopGO gores <- easytopGO(geneID = geneList, bkggset = background.gset, stats = \"ks\") baseurl <- \"https://plasmodb.org/common/downloads/Current_Release/\" url <- paste0(baseurl, \"Pfalciparum3D7/gaf/PlasmoDB-68_Pfalciparum3D7_GO.gaf.gz\") gores <- easytopGO(   geneID = geneList, useGAF = TRUE, useBiomart = FALSE, gaf = url,   bkggset = background.gset, category = \"BP\", stats = \"ks\" )  ## Then feed them to easyGOPlot plot <- easyGOPlot(gores, title = \"GO Enrichment Biological Processes\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyLabelTransfer.html","id":null,"dir":"Reference","previous_headings":"","what":"Easy label transfer from reference data — easyLabelTransfer","title":"Easy label transfer from reference data — easyLabelTransfer","text":"function retrieves data malaria.tools generates dataframe containing Stage Parasite gene highly expressed.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyLabelTransfer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easy label transfer from reference data — easyLabelTransfer","text":"","code":"easyLabelTransfer(   queryCounts,   refCounts,   referenceMeta,   refNormalised = FALSE,   queryNormalised = FALSE,   labelCol,   isrefBulk = FALSE,   ... )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyLabelTransfer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easy label transfer from reference data — easyLabelTransfer","text":"queryCounts object containing raw counts lognormalised counts query dataset. can form dcgMatrix. counts normalised, set queryNormalised=TRUE. refCounts description object containing raw counts lognormalised counts reference dataset. can form dcgMatrix. counts normalised, set refNormalised=TRUE. referenceMeta dataframe containing reference metadata. refNormalised Logical. Use TRUE, counts already normalised otherwise counts log-normalised using Scuttle's logNormCounts function. queryNormalised Logical. Use TRUE, counts already normalised otherwise counts log-normalised using Scuttle's logNormCounts function. labelCol Column metadata contains desired labels transferred query. isrefBulk Logical. Use TRUE, reference dataset Bulk-RNASeq. cases \"classic\" approach used shortlist DEGs. false, \"wilcox\" method used scRNAseq reference. ... Additional arguments can passed SingleR based user's needs de.n=30 aggr.ref=TRUE. Refer SingleR documentation details.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyLabelTransfer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easy label transfer from reference data — easyLabelTransfer","text":"DFrame object containing transferred labels can directly used functions SingleR plotScoreHeatmap().","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyLabelTransfer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easy label transfer from reference data — easyLabelTransfer","text":"","code":"if (FALSE) { # \\dontrun{ ## Fetching the URL mcalist <- listMCA() data(\"subudhi2020\") ## reference dataset  ## Using this reference set url <- \"https://www.malariacellatlas.org/downloads/pf-ch10x-set4-biorxiv.zip\"  raw_counts <- easyMCA(url,type = \"raw\") rownames(raw_counts) <- gsub(\"-\",\"_\",rownames(raw_counts)) meta <- easyMCA(url,type=\"data\")  ## Retaining only Asexual stage cells and Lab isolates. meta <- subset(meta, meta$STAGE_LR %in% c(\"ring\",\"trophozoite\",\"schizont\") & DAY != \"Field\") raw_counts <- raw_counts[,rownames(meta)]  ## Filtering away field isolates and asexual stage cells labels <- easyLabelTransfer(queryCounts = raw_counts, refCounts = subudhi2020@assays@data$counts, referenceMeta = subudhi2020@colData, labelCol = \"timetag\", isrefBulk = TRUE) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easymakeOrgdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Org.db package quickly — easymakeOrgdb","title":"Create Org.db package quickly — easymakeOrgdb","text":"convenience function make OrgDb packages quickly used GO enrichment packages ClusterProfiler.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easymakeOrgdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Org.db package quickly — easymakeOrgdb","text":"","code":"easymakeOrgdb(   gff =     \"https://plasmodb.org/common/downloads/release-68/Pfalciparum3D7/gff/data/PlasmoDB-68_Pfalciparum3D7.gff\",   gaf =     \"https://plasmodb.org/common/downloads/release-68/Pfalciparum3D7/gaf/PlasmoDB-68_Pfalciparum3D7_Curated_GO.gaf.gz\",   out.dir = \".\",   taxid = 36329,   genus = \"Plasmodium\",   sp = \"falciparum3D7\",   version = 0.1,   verbose = FALSE,   maintainer = \"John doe <johndoe@gmail.com>\" )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easymakeOrgdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Org.db package quickly — easymakeOrgdb","text":"gff link GFF file VEuPathDB path GFF file file present locally. gaf Gene Ontology file obtained VEuPathDB. .dir Output directory package saved. taxid Taxonomy ID organism. can obtained https://www.ncbi.nlm.nih.gov/taxonomy. genus Genus organism. used construct name package. sp Species without strain information. version Version package choose maintain share package. verbose Display messages running makeOrgPackage function. maintainer Email Id package builder. Default \"John doe johndoe@gmail.com\"","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easymakeOrgdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Org.db package quickly — easymakeOrgdb","text":"tar.gz file can installed package can used GO enrichment tools ClusterProfiler.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easymakeOrgdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Org.db package quickly — easymakeOrgdb","text":"","code":"if (FALSE) { # \\dontrun{  easymakeOrgdb(   gff=\"https://plasmodb.org/common/downloads/release-68/PbergheiANKA/gff/data/PlasmoDB-68_PbergheiANKA.gff\",   gaf=\"https://plasmodb.org/common/downloads/release-68/PbergheiANKA/gaf/PlasmoDB-68_PbergheiANKA_Curated_GO.gaf.gz\",   out.dir=\".\", taxid=5823,genus=\"Plasmodium\",   sp=\"bergheiANKA\",   version=0.1,   verbose = FALSE,   maintainer=\"John doe <johndoe@gmail.com>\")   } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyMCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch data from Malaria Cell Atlas — easyMCA","title":"Fetch data from Malaria Cell Atlas — easyMCA","text":"function fetches loads metadata expression matrices desired data sets available Malaria Cell Atlas (MCA) Database.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyMCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch data from Malaria Cell Atlas — easyMCA","text":"","code":"easyMCA(url, type = \"data\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyMCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch data from Malaria Cell Atlas — easyMCA","text":"url url dataset listMCA function. type Type data fetched. Use \"exp\" fetch normalized scaled values, use \"raw\" get raw counts use \"data\" get metadata dataset.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyMCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch data from Malaria Cell Atlas — easyMCA","text":"df dataframe requested data type MCA.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyMCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch data from Malaria Cell Atlas — easyMCA","text":"","code":"if (FALSE) { # \\dontrun{   url <- \"https://www.malariacellatlas.org/downloads/pf-ch10x-set4-biorxiv.zip\"   # Use the function to read metadata, expression, or raw data   metadata <- easyMCA(url, type = \"data\")   expression <- easyMCA(url, type = \"exp\")   raw_counts <- easyMCA(url, type = \"raw\")    ## make Seurat Object easily now    testmca <- Seurat::CreateSeuratObject(counts = raw_counts, meta.data = metadata, project = \"MCA\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyNOISeqAnnot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","title":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","text":"convenience function make data frame containing biological annotations required NOISeq run NOISeq::readData function using custom GTF/GFF file FASTA.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyNOISeqAnnot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","text":"","code":"easyNOISeqAnnot(   gff,   fasta,   name = \"Tgondii\",   select = c(\"protein_coding_gene\", \"ncRNA_gene\", \"pseudogene\"),   geneidcol = \"ID\",   genetype = \"ebi_biotype\" )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyNOISeqAnnot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","text":"gff link GFF file VEuPathDB path GTF file produced using AGAT. fasta link path genome fasta file. name Name organism. select Type features selected. default select \"protein_coding_gene\",\"ncRNA_gene\"\"pseudogene\" cover genes VEuPathDB annotation files. using AGAT formatted GTF file, using \"gene\" sufficient AGAT put genes types gene tag. geneidcol Use tag refers gene IDs GTF/GFF file. genetype Use tag refers gene subtypes \"ebi_biotype\".","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyNOISeqAnnot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","text":"dataframe containing annotations per gene GC content, gene description, gene-length, gene start, gene end coordinates chromosome information.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyNOISeqAnnot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get NOISeq::readData ready annotations — easyNOISeqAnnot","text":"","code":"if (FALSE) { # \\dontrun{  df <- easyNOISeqAnnot(  gff=\"https://toxodb.org/common/downloads/release-68/EpraecoxHoughton/gff/data/ToxoDB-68_EpraecoxHoughton.gff\",  fasta = \"https://toxodb.org/common/downloads/release-68/EpraecoxHoughton/fasta/data/ToxoDB-68_EpraecoxHoughton_Genome.fasta\")   } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyPhplplottbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","title":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","text":"function generates Disruptability Mutant Phenotype tables R, mirroring style Phenoplasm visualizations.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyPhplplottbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","text":"","code":"easyPhplplottbl(file, skip = 2)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyPhplplottbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","text":"file Path Phenotype.txt file obtained PhenoPlasm database data frame. skip Number lines skip file. Default 2.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyPhplplottbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","text":"gt table plot.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyPhplplottbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly plot PhenoPlasm summary tables — easyPhplplottbl","text":"","code":"if (FALSE) { # \\dontrun{  ## Read the table generated from Phenoplasm advance search and pass the resulting data frame df <- read.csv(\"phenotype.txt\", skip = 2, sep = \"\\t\") %>% dplyr::select(-3, -4) %>% dplyr::rename_with(~ gsub(\"Sprozoite\", \"Sporozoite\", .x)) easyPhplplottbl(df)  ## Pass the file path directly easyPhplplottbl(\"phenotype.txt\")  ## Load example data frame data(pf3d7PhplTable)  easyPhplplottbl(pf3d7PhplTable) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyPie.html","id":null,"dir":"Reference","previous_headings":"","what":"Pie chart to summarize searchMT results — easyPie","title":"Pie chart to summarize searchMT results — easyPie","text":"function make donut chart represent distribution input gene IDs across different stages Malaria given result object plotTissueSpecific function.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyPie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pie chart to summarize searchMT results — easyPie","text":"","code":"easyPie(df, col = \"Tissue Specificity\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyPie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pie chart to summarize searchMT results — easyPie","text":"df dataframe obtained plotTissueSpecific(returnData=TRUE). col Column plot donut chart. Default: \"Tissue Specificity\"","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyPie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pie chart to summarize searchMT results — easyPie","text":"plot (data thereof) domains present list gene IDs.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyPie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pie chart to summarize searchMT results — easyPie","text":"","code":"if (FALSE) { # \\dontrun{   geneID <- c(\"PBANKA_0100600\", \"PBANKA_0102900\", \"PF3D7_0102900\")   ## To get Plot similar to malaria.tools   res <- searchMT(geneID = geneID)   res %>% easyPie() } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easytopGO.html","id":null,"dir":"Reference","previous_headings":"","what":"Performing quick ORA analysis — easytopGO","title":"Performing quick ORA analysis — easytopGO","text":"convenience function quickly perform GO Term Enrichment analysis using TopGO.results can plotted using easyGOPlot","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easytopGO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performing quick ORA analysis — easytopGO","text":"","code":"easytopGO(   geneID,   bkggset = \"\",   gaf = \"\",   useBiomart = TRUE,   useGAF = FALSE,   mart = \"protists_mart\",   gset = \"pfalciparum_eg_gene\",   algo = \"weight01\",   stats = \"ks\",   category = \"BP\",   fdr = FALSE,   correction = \"BY\" )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easytopGO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performing quick ORA analysis — easytopGO","text":"geneID vector named p-values. names gene IDs. bkggset character vector gene IDs used background. gaf URL path .gaf file obtained PlasmoDB choose use biomaRt. using argument, set useBiomart=FALSE useGAF=TRUE. useBiomart Logical enable usage BiomaRt fetch GO terms. Default: TRUE. useGAF Logical enable usage custom .gaf file fetch GO terms. Default: FALSE mart Argument specify mart BiomaRt functions. Default: \"protists_mart\". gset Argument specify geneset used BiomaRt functions. Default: \"pfalciparum_eg_gene\" algo Argument specify algorithm used enrichment topGO. possible options use topGO::whichAlgorithms() stats Argument specify statistical test used enrichment topGO. possible values use topGO::whichTests(). Default: \"ks\". category Specify category -representation analysis \"BP\" Biological Process, \"MF\" Molecular Function \"CC\" Cellular Component Enrichment. fdr logical. Perform multiple testing correction testing. Default (FALSE) correction Method used calculate adjusted p-value. Possible values: \"\"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\",\"fdr\". Read section 6.2 topGO documentation performing correction. Correction using elim weight usually recommended.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easytopGO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performing quick ORA analysis — easytopGO","text":"dataframe enriched terms GO description genes filteres uncorrected p-values.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easytopGO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performing quick ORA analysis — easytopGO","text":"","code":"if (FALSE) { # \\dontrun{ ## making gene list from DESEq2 geneList <- subset(res, regulate==\"Up\") %>% .$padj names(geneList) <- subset(res, regulate==\"Up\") %>% .$Geneid  ## background genes will be the genes tested for differential expression background.gset <- res$Geneid baseurl <- \"https://plasmodb.org/common/downloads/Current_Release/\" url<-paste0(baseurl,\"Pfalciparum3D7/gaf/PlasmoDB-68_Pfalciparum3D7_GO.gaf.gz\") gores<-easytopGO(geneID = geneList,useGAF = TRUE,useBiomart = FALSE,gaf=url, bkggset = background.gset, category = \"BP\", stats = \"ks\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyTPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate TPM values from count data — easyTPM","title":"Calculate TPM values from count data — easyTPM","text":"function provides ability compute quick TPM values.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyTPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate TPM values from count data — easyTPM","text":"","code":"easyTPM(counts, featureLength)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyTPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate TPM values from count data — easyTPM","text":"counts Count matrix containing raw counts. featureLength Effective length genes generated getEfflen.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyTPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate TPM values from count data — easyTPM","text":"df numeric. function returns dataframe TPM normalized counts final column containing feature length.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyTPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate TPM values from count data — easyTPM","text":"","code":"if (FALSE) { # \\dontrun{ ## Effective length of the gene gene_info <- data.frame(GeneID = c(\"gene1\", \"gene2\", \"gene3\"), Length = c(1000, 1500, 2000)) count_matrix <- matrix(c(10, 20, 30, 40, 50, 60),   nrow = 3, ncol = 2,   dimnames = list(c(\"gene1\", \"gene2\", \"gene3\"), c(\"sample1\", \"sample2\")) ) test <- easyTPM(count_matrix, gene_info) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyTxDbmaker.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly make TxDb object — easyTxDbmaker","title":"Quickly make TxDb object — easyTxDbmaker","text":"convenience function make OrgDb packages quickly used GO enrichment packages ClusterProfiler.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyTxDbmaker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly make TxDb object — easyTxDbmaker","text":"","code":"easyTxDbmaker(   gff,   fasta,   abbr = \"TgondiiME49\",   org = \"Toxoplasma gondii\",   taxid = 508771,   db = \"ToxoDB release 68\" )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyTxDbmaker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly make TxDb object — easyTxDbmaker","text":"gff link GFF file VEuPathDB path GFF file file present locally. fasta Genome FASTA file obtained VEuPathDB. abbr Abbreviation organism. org Name organism including genus species. taxid NCBI Taxonomy ID. can obtained https://www.ncbi.nlm.nih.gov/taxonomy. db Name database release information.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyTxDbmaker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly make TxDb object — easyTxDbmaker","text":"tar.gz file can installed package can used GO enrichment tools ClusterProfiler.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/easyTxDbmaker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly make TxDb object — easyTxDbmaker","text":"","code":"if (FALSE) { # \\dontrun{  txdb<-easyTxDbmaker(  gff=\"https://toxodb.org/common/downloads/release-68/TgondiiME49/gff/data/ToxoDB-68_TgondiiME49.gff\",  fasta=\"https://toxodb.org/common/downloads/release-68/TgondiiME49/fasta/data/ToxoDB-68_TgondiiME49_Genome.fasta\",  abbr=\"TgondiiME49\",  taxid=508771,org = \"Toxoplasma gondii ME49\",  db = \"ToxoDB release 68\")   } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getEffLen.html","id":null,"dir":"Reference","previous_headings":"","what":"Get effective gene lengths form TPM calculation — getEffLen","title":"Get effective gene lengths form TPM calculation — getEffLen","text":"function provides effective length (sum lengths exons) genes calculating TPM values.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getEffLen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get effective gene lengths form TPM calculation — getEffLen","text":"","code":"getEffLen(gtf = NULL, format = \"gff3\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getEffLen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get effective gene lengths form TPM calculation — getEffLen","text":"gtf Provide path URL GTF file. format Format feature file .e. \"gtf\" \"gff3\". Default \"gff3\".","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getEffLen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get effective gene lengths form TPM calculation — getEffLen","text":"df numeric. function returns data frame 2 columns: \"GeneID\", \"Length\".","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getEffLen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get effective gene lengths form TPM calculation — getEffLen","text":"","code":"if (FALSE) { # \\dontrun{ baseurl <- \"https://plasmodb.org/common/downloads/release-68/\" getEffLen(paste0(baseurl, \"Pfalciparum3D7/gff/data/PlasmoDB-68_Pfalciparum3D7.gff\"))  OR  getEffLen(\"/data/PlasmoDB-67_Pfalciparum3D7.gtf\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getMpmp.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly fetch data from MPMP database — getMpmp","title":"Quickly fetch data from MPMP database — getMpmp","text":"function provides ability fetch pathways data MPMP. data can modified used MPMP pathway enrichment analysis.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getMpmp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly fetch data from MPMP database — getMpmp","text":"","code":"getMpmp(url)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getMpmp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly fetch data from MPMP database — getMpmp","text":"url URL pathway interest.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getMpmp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly fetch data from MPMP database — getMpmp","text":"df function returns dataframe containing gene ID Annotations fetched MPMP database.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getMpmp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly fetch data from MPMP database — getMpmp","text":"","code":"if (FALSE) { # \\dontrun{ df <- getMpmp(\"http://mpmp.huji.ac.il/maps/HNE_prot.html\") df <- getMpmp(\"http://mpmp.huji.ac.il/maps/14-3-3prot.html\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getpairedOrthologs.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch paired orthologs — getpairedOrthologs","title":"Fetch paired orthologs — getpairedOrthologs","text":"function provides ability query InParanoiDB 9 OrthoMCL 7 get paired orthologs two species interest.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getpairedOrthologs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch paired orthologs — getpairedOrthologs","text":"","code":"getpairedOrthologs(   from,   to,   db = c(\"ipdb\", \"orthomcl\"),   customFields = NULL,   transform = TRUE )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getpairedOrthologs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch paired orthologs — getpairedOrthologs","text":"ID query organism orthologs fetched. view organisms indexed database respective IDs use listipdb() listOrthomcl(). ID target organism queried orthologs. view organisms indexed database respective IDs use listipdb() listOrthomcl(). db Define database queried. Possible values: \"orthomcl\",\"ipdb\". customFields Additional field fetched OrthoMCL 7. \"primary_key\" \"target_id\" mandatory fields. Additional popular fields include: \"group_name\",\"product\",\"source_id\",\"num_core\",\"num_peripheral\",\"length\",\"sequence\",\"taxon_name\",\"abbreviation\",\"core_peripheral\",\"ec_numbers\",\"pfam_domains\" etc.fields refer OrthoMCL REST query builder. transform Logical. case InParanoiDB, transform collapses orthologs Group IDs unique rows. OrthoMCL, performs opposite function separates rows one ID column. set FALSE, function returns ortholog query results raw form provided database.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getpairedOrthologs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch paired orthologs — getpairedOrthologs","text":"df function returns dataframe orthologs additional requested fields.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getpairedOrthologs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch paired orthologs — getpairedOrthologs","text":"","code":"if (FALSE) { # \\dontrun{ df <- getpairedOrthologs(from=1742855, to=1747281, db=\"orthomcl\", transform = FALSE) df <- getpairedOrthologs(from=1742855, to=1747281, db=\"orthomcl\",  transform = FALSE, customFields = c(\"primary_key\",\"target_id\",\"group_name\")) df <- getpairedOrthologs(from=1742855, to=1747281, db=\"orthomcl\", transform = TRUE) df <- getpairedOrthologs(from=423536,to=36329, transform = FALSE) df <- getpairedOrthologs(from=423536,to=36329, transform = TRUE) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getPreconfiguredTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pre-configured tables — getPreconfiguredTable","title":"Get pre-configured tables — getPreconfiguredTable","text":"convenience function quickly fetch preconfigured table Signal Peptide ranges, Pathways, Pubmed entries related genes, Annotations etc database choice PlasmoDB, ToxoDB, PiroplasmaDB among VEuPathDB pathogen databases.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getPreconfiguredTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pre-configured tables — getPreconfiguredTable","text":"","code":"getPreconfiguredTable(org, db = \"plasmodb\", customField = \"Y2hInteractions\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getPreconfiguredTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pre-configured tables — getPreconfiguredTable","text":"org Full name organism interest specified VEuPathDB. find exact name organism, use listVeupathdb function. db Character Name database organism present. can one following: \"toxodb\",\"plasmodb\",\"hostdb\",\"amoebadb\",\"cryptodb\",\"fungidb\",\"giardiadb\",\"microsporidiadb\",\"piroplasmadb\",\"trichdb\",\"tritrypdb\". customField Preconfigured table wish fetch. Pass one value time following: \"GeneModelDump\",   \"GeneTranscripts\",   \"Alias\",   \"GeneLinkouts\",   \"GeneLocation\",   \"PubMed\",   \"OrthologsLite\",   \"LowComplexity\",   \"PdbSimilarities\",   \"3dPreds\",   \"AlphaFoldLinkouts\",   \"ProteinProperties\",   \"InterPro\",   \"SignalP\",   \"TMHMM\",   \"ECNumbers\",   \"ECNumbersInferred\",   \"protein_length\",   \"chromosome\",   \"location_text\",   \"sequence_id\",   \"gene_ortholog_number\",   \"gene_orthomcl_name\",   \"gene_paralog_number\",   \"MetabolicPathwaysMPMP\",   \"MetabolicPathways\",   \"CompoundsMetabolicPathways\",   \"Y2hInteractions\",   \"MassSpecDownload\",   \"MassSpecMod\",   \"Epitopes\" etc.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getPreconfiguredTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get pre-configured tables — getPreconfiguredTable","text":"data frame.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getPreconfiguredTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get pre-configured tables — getPreconfiguredTable","text":"","code":"if (FALSE) { # \\dontrun{ df <- getPreconfiguredTable(org = \"Plasmodium falciparum 3D7\",      db = \"plasmodb\",customField = \"Y2hInteractions\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tables with custom fields — getTable","title":"Get tables with custom fields — getTable","text":"convenience function quickly fetch table Gene IDs, Protein IDs, Gene Symbols, Annotations many columns database choice PlasmoDB, ToxoDB, PiroplasmaDB among VEuPathDB pathogen databases.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tables with custom fields — getTable","text":"","code":"getTable(org, db = \"toxodb\", customFields = NULL)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tables with custom fields — getTable","text":"org Full name organism interest specified VEuPathDB. find exact name organism, use listVeupathdb function. db Character Name database organism present. can one following: \"toxodb\",\"plasmodb\",\"hostdb\",\"amoebadb\",\"cryptodb\",\"fungidb\",\"giardiadb\",\"microsporidiadb\",\"piroplasmadb\",\"trichdb\",\"tritrypdb\". customFields vector custom fields desired fetched. \"primary_key\" mandatory field. fields can supplied can chosen (limited ): \"organism\",   \"gene_location_text\",   \"gene_product\",   \"gene_type\",  \"exon_count\",   \"gene_exon_count\",   \"gene_transcript_count\",   \"three_prime_utr_length\",   \"five_prime_utr_length\",   \"strand\",   \"is_pseudo\",   \"transcript_length\",   \"is_deprecated\",   \"gene_name\",   \"gene_source_id\",   \"transcript_product\",   \"protein_length\",   \"chromosome\",   \"location_text\",   \"sequence_id\",   \"gene_ortholog_number\",   \"gene_orthomcl_name\",   \"gene_paralog_number\",   \"cds_length\",   \"molecular_weight\",   \"isoelectric_point\",   \"tm_count\",   \"signalp_peptide\",   \"predicted_go_id_component\",   \"predicted_go_component\",   \"predicted_go_id_function\",   \"predicted_go_function\",   \"predicted_go_id_process\",   \"predicted_go_process\",   \"annotated_go_id_component\",   \"annotated_go_component\",   \"annotated_go_id_function\",   \"annotated_go_function\",   \"annotated_go_id_process\",   \"annotated_go_process\",   \"ec_numbers\",   \"ec_numbers_derived\"","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tables with custom fields — getTable","text":"data frame, containing \"Gene ID\", \"Product Description\", \"Gene Strand\", \"Gene Name Symbol\", \"Previous ID(s)\", \"Entrez Gene ID\", \"UniProt ID(s)\", \"Protein Length\", \"TM Domains\" \"SignalP Peptide\" genes present organism interest.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/getTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tables with custom fields — getTable","text":"","code":"if (FALSE) { # \\dontrun{ df <- getTable(org=\"Plasmodium falciparum 3D7\", db=\"plasmodb\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/install_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Install package dependencies — install_dependencies","title":"Install package dependencies — install_dependencies","text":"Installs missing dependencies CRAN Bioconductor","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/install_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install package dependencies — install_dependencies","text":"","code":"install_dependencies()"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listipdb.html","id":null,"dir":"Reference","previous_headings":"","what":"List species metadata present in InparanoiDB 9 — listipdb","title":"List species metadata present in InparanoiDB 9 — listipdb","text":"convenience function quickly fetch table InParanoiDB 9 species taxonomy id.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listipdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List species metadata present in InparanoiDB 9 — listipdb","text":"","code":"listipdb()"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listipdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List species metadata present in InparanoiDB 9 — listipdb","text":"data frame containing information species present InParanoiDB9 taxon ID.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listipdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List species metadata present in InparanoiDB 9 — listipdb","text":"","code":"if (FALSE) { # \\dontrun{ listipdb() } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listMCA.html","id":null,"dir":"Reference","previous_headings":"","what":"List data sets in MCA — listMCA","title":"List data sets in MCA — listMCA","text":"function lists datasets available Malaria Cell Atlas Database.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listMCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List data sets in MCA — listMCA","text":"","code":"listMCA()"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listMCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List data sets in MCA — listMCA","text":"df dataframe listing datasets available MCA URls can used easyMCA function.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listMCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List data sets in MCA — listMCA","text":"","code":"if (FALSE) { # \\dontrun{   df <- listMCA() } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listOrthomcl.html","id":null,"dir":"Reference","previous_headings":"","what":"List species metadata present in OrthoMCL — listOrthomcl","title":"List species metadata present in OrthoMCL — listOrthomcl","text":"convenience function quickly fetch species related vocabulary 713 species used OrthoMCL database. function helps users choose IDs organisms wish fetch paired orthologs. See also: getpairedOrthologs().","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listOrthomcl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List species metadata present in OrthoMCL — listOrthomcl","text":"","code":"listOrthomcl()"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listOrthomcl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List species metadata present in OrthoMCL — listOrthomcl","text":"data frame containing information species present InParanoiDB9 taxon ID.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listOrthomcl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List species metadata present in OrthoMCL — listOrthomcl","text":"","code":"if (FALSE) { # \\dontrun{ listOrthomcl() } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listVeupathdb.html","id":null,"dir":"Reference","previous_headings":"","what":"List genomes and metadata in VEuPathDB — listVeupathdb","title":"List genomes and metadata in VEuPathDB — listVeupathdb","text":"convenience function quickly fetch table genomes associated metadata VEupathDB.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listVeupathdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List genomes and metadata in VEuPathDB — listVeupathdb","text":"","code":"listVeupathdb(customFields = NULL)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listVeupathdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List genomes and metadata in VEuPathDB — listVeupathdb","text":"customFields vector custom fields desired fetched. \"primary_key\" mandatory field. fields can supplied can chosen (limited ): \"annotation_source\", \"annotation_version\", \"arraygenecount\", \"chipchipgenecount\", \"chromosomeCount\", \"codinggenecount\", \"communitycount\", \"contigCount\", \"ecnumbercount\", \"estcount\", \"genecount\", \"genecount_number\", \"genome_source\", \"genome_version\", \"gocount\", \"is_in_apollo\", \"is_reference_strain\", \"megabps\", \"ncbi_tax_id\", \"ncbi_taxon_url\", \"organism\", \"organism_full\", \"orthologcount\", \"othergenecount\", \"popsetcount\", \"project_id\", \"proteomicscount\", \"pseudogenecount\", \"rnaseqcount\", \"rtpcrcount\", \"snpcount\", \"species\", \"species_ncbi_tax_id\", \"species_ncbi_taxon_url\", \"supercontigCount\", \"tfbscount\", \"URLcdsFasta\", \"URLGenomeFasta\", \"URLgff\", \"URLproteinFasta\", \"URLtranscriptFasta\". fields, refer VEuPathDB Documentation","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listVeupathdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List genomes and metadata in VEuPathDB — listVeupathdb","text":"data frame containing information genomes present VEuPathDB attributes.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/listVeupathdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List genomes and metadata in VEuPathDB — listVeupathdb","text":"","code":"if (FALSE) { # \\dontrun{ df <- listVeupathdb() df <- listVeupathdb(customFields=c(\"species\", \"project_id\")) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/pdb2uniprot.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","title":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","text":"convenience function quickly convert PDB IDs Uniprot IDs. protein multimeric, corresponding Uniprot IDs returned . function uses PDBe API.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/pdb2uniprot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","text":"","code":"pdb2uniprot(pdbid)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/pdb2uniprot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","text":"pdbid single PDB Id.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/pdb2uniprot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","text":"data frame, Uniprot IDs, Chain IDs start end coordinates chains.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/pdb2uniprot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick mapping of PDB IDs to Uiprot IDs — pdb2uniprot","text":"","code":"if (FALSE) { # \\dontrun{ df <- pdb2uniprot(\"9FIA\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotAllCondition.html","id":null,"dir":"Reference","previous_headings":"","what":"Making plots similar to malaria.tools — plotAllCondition","title":"Making plots similar to malaria.tools — plotAllCondition","text":"function retrieves data malaria.tools generates expression value plots (TPM) similar produced website. Use function create publication-ready plots.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotAllCondition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Making plots similar to malaria.tools — plotAllCondition","text":"","code":"plotAllCondition(geneID, returnData = FALSE, plotify = FALSE)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotAllCondition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Making plots similar to malaria.tools — plotAllCondition","text":"geneID Single Gene ID Plasmodium falciparum Plasmodium berghi. returnData Logical. Use true return dataframe used making plots. plotify make plots interactive using plotly.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotAllCondition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Making plots similar to malaria.tools — plotAllCondition","text":"plot (data theirof) TPM values across multiple stages parasite.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotAllCondition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Making plots similar to malaria.tools — plotAllCondition","text":"","code":"if (FALSE) { # \\dontrun{   #'   ## To get Plot similar to malaria.tools   res <- plotAllCondition(geneID = \"PBANKA_0100600\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotDomain.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting domains on protein body — plotDomain","title":"Plotting domains on protein body — plotDomain","text":"function retrieves data malaria.tools generates dataframe containing Stage Parasite gene highly expressed.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotDomain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting domains on protein body — plotDomain","text":"","code":"plotDomain(   geneID,   mart = \"protists_mart\",   gset = \"pfalciparum_eg_gene\",   input = \"ensembl_gene_id\",   fetchid = \"uniprotsptrembl\",   returnData = FALSE )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotDomain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting domains on protein body — plotDomain","text":"geneID character vector Gene IDs Plasmodium falciparum Plasmodium berghi.Remove version gene ids. mart Name Ensembl Biomart. Default: \"protists_mart\" gset Gene-set organism. changed dealing Plasmodium species. Default: \"pfalciparum_eg_gene\" input Input id type. gene IDs PlasmoDB \"ensembl_gene_id\". fetchid Desired output ids returnData return converted gene ids domain information fetched uniprot.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotDomain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting domains on protein body — plotDomain","text":"plot (data thereof) domains present list gene IDs.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotDomain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting domains on protein body — plotDomain","text":"","code":"if (FALSE) { # \\dontrun{   ## Search proper mart   ## View(listDatasets(biomaRt::useEnsemblGenomes(biomart = \"protists_mart\")))   ## To get domain information from uniprot and prepare publication ready figures   plot <- plotDomain(geneID = c(\"PF3D7_0518900\", \"PF3D7_0602800\", \"PF3D7_0624600\"))    ## Currently pberghei doesn't work, see issue: https://github.com/grimbough/biomaRt/issues/110   plot <- plotDomain(geneID = c(\"PBANKA_0100600\", \"PBANKA_0102900\"), gset = \"pberghei_eg_gene\")    ## Change plot domain colors, if desired. Say you have 15 domains in all 3 proteins combined   palette <- randomcoloR::distinctColorPalette(15)   plot + scale_fill_manual(values = palette) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotStageSpecific.html","id":null,"dir":"Reference","previous_headings":"","what":"Making plots similar to malaria.tools — plotStageSpecific","title":"Making plots similar to malaria.tools — plotStageSpecific","text":"function retrieves data malaria.tools generates expression value plots (TPM) similar produced website. Use function create publication-ready plots.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotStageSpecific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Making plots similar to malaria.tools — plotStageSpecific","text":"","code":"plotStageSpecific(geneID, returnData = FALSE, plotify = FALSE)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotStageSpecific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Making plots similar to malaria.tools — plotStageSpecific","text":"geneID Gene ID Plasmodium falciparum Plasmodium berghi. returnData Logical. Use true return data frame used making plots. plotify make plots interactive using plotly.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotStageSpecific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Making plots similar to malaria.tools — plotStageSpecific","text":"plot (data theirof) TPM values across multiple stages parasite.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotStageSpecific.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Making plots similar to malaria.tools — plotStageSpecific","text":"","code":"if (FALSE) { # \\dontrun{   geneID <- c(\"PBANKA_0100600\", \"PBANKA_0102900\", \"PF3D7_0102900\")   ## To get Plot similar to malaria.tools   res <- plotTissueSpecific(geneID = \"PBANKA_0100600\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotTissueSpecific.html","id":null,"dir":"Reference","previous_headings":"","what":"Making plots similar to malaria.tools — plotTissueSpecific","title":"Making plots similar to malaria.tools — plotTissueSpecific","text":"function retrieves data malaria.tools generates expression value plots (TPM) similar produced website. Use function create publication-ready plots.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotTissueSpecific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Making plots similar to malaria.tools — plotTissueSpecific","text":"","code":"plotTissueSpecific(geneID, returnData = FALSE, plotify = FALSE)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotTissueSpecific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Making plots similar to malaria.tools — plotTissueSpecific","text":"geneID Gene ID Plasmodium falciparum Plasmodium berghi. returnData Logical. Use true return dataframe used making plots. plotify make plots interactive using plotly.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotTissueSpecific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Making plots similar to malaria.tools — plotTissueSpecific","text":"plot (data theirof) TPM values across multiple stages parasite.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/plotTissueSpecific.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Making plots similar to malaria.tools — plotTissueSpecific","text":"","code":"if (FALSE) { # \\dontrun{   geneID <- c(\"PBANKA_0100600\", \"PBANKA_0102900\", \"PF3D7_0102900\")   ## To get Plot similar to malaria.tools   res <- plotTissueSpecific(geneID = \"PBANKA_0100600\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/quickTPM.html","id":null,"dir":"Reference","previous_headings":"","what":"plasmoRUtils — quickTPM","title":"plasmoRUtils — quickTPM","text":"function provides ability compute quick TPM values.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/quickTPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plasmoRUtils — quickTPM","text":"","code":"quickTPM(counts, featureLength)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/quickTPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plasmoRUtils — quickTPM","text":"counts Count matrix containing raw counts. featureLength Effective length genes generated getEfflen.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/quickTPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plasmoRUtils — quickTPM","text":"df numeric. function returns dataframe TPM normalized counts final clumn containing feature length.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/quickTPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plasmoRUtils — quickTPM","text":"","code":"if (FALSE) { # \\dontrun{ gene_info <- data.frame(GeneID = c(\"gene1\", \"gene2\", \"gene3\"), Length = c(1000, 1500, 2000)) count_matrix <- matrix(c(10, 20, 30, 40, 50, 60),   nrow = 3, ncol = 2,   dimnames = list(c(\"gene1\", \"gene2\", \"gene3\"), c(\"sample1\", \"sample2\")) ) test <- quickTPM(count_matrix, gene_info) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchApicoTFdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch data from ApicoTFdb — searchApicoTFdb","title":"Fetch data from ApicoTFdb — searchApicoTFdb","text":"function provides ability query gene IDs ApicoTFDb.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchApicoTFdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch data from ApicoTFdb — searchApicoTFdb","text":"","code":"searchApicoTFdb(org = \"pf\", fetch = \"all\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchApicoTFdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch data from ApicoTFdb — searchApicoTFdb","text":"org Abbreviation organism interest. fetch Describe tables fetched. Default: \"\" fetch TFs. fetch TRs,CRRs,RNA-regs Experimentally verified TF, use \"trs\",\"crrs\",\"rnaregs\" \"exptfs\" respectively. using \"\", org argument ignored. pb: Plasmodium berghii pv: Plasmodium vivax pf: Plasmodium falciparum pk: Plasmodium knowlesi py: Plasmodium yoelii pc: Plasmodium chabaudi tg49: Toxoplasma Gondii ME49 tg89: Toxoplasma Gondii P89 cp: Cryptosporidium parvum em: Eimeria maxima bb: Babesia bovis et: Eimeria tenella nu: Neurospora caninum cy: Cyclospora cayetanensis","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchApicoTFdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch data from ApicoTFdb — searchApicoTFdb","text":"df function returns dataframe transcription regulators organism interest ApicoTFDb.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchApicoTFdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch data from ApicoTFdb — searchApicoTFdb","text":"","code":"if (FALSE) { # \\dontrun{ test <- searchApicoTFdb(org = \"pf\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchGSC.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch articles for given gene IDs from Google Scholar — searchGSC","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"function searches Google Scholar corpus recursively articles contains Gene ID interest.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchGSC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"","code":"searchGSC(   geneIDs,   year_start = NULL,   year_end = NULL,   max_pages = 2,   sleep_secs = 10,   verbose = TRUE,   translate = NULL )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchGSC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"geneIDs Character vector Gene IDs. want use gene symbols, use organism name alongside avoid articles might similar abbreviated word. eg. use \"AP2-P Plasmodium\". year_start Limit results starting year interest. year_end Limit results end year interest. max_pages Maximum number pages scrap. verbose Print warnings. translate Translate paper titles english desired language. Use two letter code.eg: \"fr\" french, \"en\" english \"es\" spanish.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchGSC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"data frame, containing 5 columns: GeneID, Title article, Year Publication, Url Authors.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchGSC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"Warning: Scraping Google Scholar Terms Service. advise users use function querying IDs (20) per day. Proceeding function may result IP blocked temporarily.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchGSC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch articles for given gene IDs from Google Scholar — searchGSC","text":"","code":"if (FALSE) { # \\dontrun{ ## We have a fake ID: PF3D7_0420300OR res <- searchGSC( geneIDs=c(\"PF3D7_0420300 OR MAL4P1.192 OR Q8I1N6 OR PFD0985w\",\"PF3D7_0621000\",\"PF3D7_0420300OR\"), translate = \"en\", year_start = 2018,  year_end   = 2021)  test <- searchGSC(geneID = c(\"AP2-P AND Plasmodium\", \"AP2-I\")) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchHP.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","title":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","text":"function searches Hitpredict database retrieve Experimental Protein-Protein Interaction data.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchHP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","text":"","code":"searchHP(geneID, taxid = \"36329\", uniprotToGID = TRUE)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchHP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","text":"geneID Single gene ID. taxid Taxon ID organism interest. Default: 36329. taxon id organism known set NULL. uniprotToGID convert Uniprot ID gene ID. Set TRUE Plasmodium geneIDs .","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchHP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","text":"data frame, containing 11 columns: \"Interaction\", \"Interactor\", \"Name\", \"Experiments\", \"Category\", \"Method.Score\", \"Annotation.Score\", \"Interaction.Score\", \"Confidence\", \"QueryID\", \"ensembl_gene_id\".","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchHP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Protein-protein interaction for given gene IDs from Hit Predict database — searchHP","text":"","code":"if (FALSE) { # \\dontrun{ test <- searchHP(\"PF3D7_0418300\")  ## To use it for other organism, turn off uniprotToGID and provide taxid of the organism test <- searchHP(\"BRCA1\",taxid = \"9606\" , uniprotToGID = FALSE) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchIpDb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch orthologs from InParanoiDb — searchIpDb","title":"Fetch orthologs from InParanoiDb — searchIpDb","text":"function retrieves orthologs InParanoiDB 9 database 640 species given set Ensembl Gene IDs uniprot IDs usinf database API.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchIpDb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch orthologs from InParanoiDb — searchIpDb","text":"","code":"searchIpDb(geneID, ..., idtype = \"ensembl\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchIpDb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch orthologs from InParanoiDb — searchIpDb","text":"geneID Gene ID Plasmodium falciparum VEupathDB enlisted organisms also covered InParanoiDB. providing uniprot ID, set idtype=\"uniprot\" prevent ID conversion. ... Additional arguments can passed toGeneid() function. comes handy working parasite gene IDs Plasmodium. idtype Set \"uniprot\" using uniprot IDs directly GenID uniprot ID conversion required.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchIpDb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch orthologs from InParanoiDb — searchIpDb","text":"data frame, containing 10 columns.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchIpDb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch orthologs from InParanoiDb — searchIpDb","text":"view list species covered InParanoiDB 9, use listipdb() function.","code":""},{"path":[]},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchIpDb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch orthologs from InParanoiDb — searchIpDb","text":"","code":"if (FALSE) { # \\dontrun{ df <-  searchIpDb( c(\"PF3D7_0807800\", \"PF3D7_1023900\")) df <- searchIpDb( c(\"C5LD32\", \"A5KAC7\"),idtype = \"uniprot\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchKipho.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","title":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","text":"function provides ability query gene IDs KiPho Database.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchKipho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","text":"","code":"searchKipho(org = \"pf\", type = \"kinase\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchKipho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","text":"org Abbreviation organism interest. pb: Plasmodium berghii pv: Plasmodium vivax pf: Plasmodium falciparum pc: Plasmodium chabaudi type Type protein class .e. \"kinase\" \"phosphatase\". Default: \"kinase\"","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchKipho.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","text":"df function returns dataframe kinases/phosphatases Plasmodium species.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchKipho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Kinases and Phosphatases from Kipho Database — searchKipho","text":"","code":"if (FALSE) { # \\dontrun{ test <- searchKipho(org=\"pf\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMidb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Minor intron tables from MiDB — searchMidb","title":"Fetch Minor intron tables from MiDB — searchMidb","text":"function provides ability fetch intron class data 265 species MiDB database. information refer MiDB database","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMidb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Minor intron tables from MiDB — searchMidb","text":"","code":"searchMidb(org, type = \"intron\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMidb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Minor intron tables from MiDB — searchMidb","text":"org Name Organism. Can obtained loading midbSpecies data package type Type data fetched. Default: \"intron\"","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMidb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Minor intron tables from MiDB — searchMidb","text":"df function returns dataframe intron classification Plasmodium species.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMidb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Minor intron tables from MiDB — searchMidb","text":"","code":"if (FALSE) { # \\dontrun{ load(\"data/midbSpecies.rda\") ## Fetching intron data from MiDB for P. falciparum df <- searchMidb(midbSpecies$`Available Species`[196]) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMiip.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Protein-Protein interactions from MIIP database — searchMiip","title":"Fetch Protein-Protein interactions from MIIP database — searchMiip","text":"function retrieves Protein-protein interaction data MIIP database.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMiip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Protein-Protein interactions from MIIP database — searchMiip","text":"","code":"searchMiip(geneID)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMiip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Protein-Protein interactions from MIIP database — searchMiip","text":"geneID character vector Gene IDs Plasmodium falciparum.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMiip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Protein-Protein interactions from MIIP database — searchMiip","text":"data frame Protein protein interaction provided MIIP database.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMiip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Protein-Protein interactions from MIIP database — searchMiip","text":"","code":"if (FALSE) { # \\dontrun{  df <- searchMiip(c(\"PF3D7_0807800\",\"PF3D7_1023900\")) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMT.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch data tables from malaria.tools database — searchMT","title":"Fetch data tables from malaria.tools database — searchMT","text":"function retrieves data malaria.tools generates dataframe containing Stage Parasite gene highly expressed.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch data tables from malaria.tools database — searchMT","text":"","code":"searchMT(geneID)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch data tables from malaria.tools database — searchMT","text":"geneID character vector Gene IDs Plasmodium falciparum Plasmodium berghi.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch data tables from malaria.tools database — searchMT","text":"plot (data thereof) TPM values across multiple stages parasite.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchMT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch data tables from malaria.tools database — searchMT","text":"","code":"if (FALSE) { # \\dontrun{   geneID <- c(\"PBANKA_0100600\", \"PBANKA_0102900\", \"PF3D7_0102900\")   ## To get condition specificity and tissue specificity data   res <- searchMT(geneID = geneID) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchPhPl.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch data tables from PhenoPlasm database — searchPhPl","title":"Fetch data tables from PhenoPlasm database — searchPhPl","text":"function searches Phenotypes gene IDs Phenoplasm database enables users fetch sub-tables Disruptability Mutant phenotypes.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchPhPl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch data tables from PhenoPlasm database — searchPhPl","text":"","code":"searchPhPl(geneID = \"\", org = \"pf\", fetch = 1)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchPhPl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch data tables from PhenoPlasm database — searchPhPl","text":"geneID Character vector Gene IDs. org Abbreviation organism. Default \"pf\" fetch Numeric. Use 1 fetch \"Disruptability\" table 2 fetch \"Mutant phenotypes\" table. pb: Plasmodium berghii pk: Plasmodium knowlesi pf: Plasmodium falciparum pc: Plasmodium chabaudi py: Plasmodium yoelii","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchPhPl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch data tables from PhenoPlasm database — searchPhPl","text":"data frame.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchPhPl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch data tables from PhenoPlasm database — searchPhPl","text":"","code":"if (FALSE) { # \\dontrun{ ## get phenotype for few genes in plasmodium falciparum df <- searchPhPl(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\",\"PF3D7_0523800\"), org=\"pf\") df <- searchPhPl(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\",\"PF3D7_0523800\"), org=\"pf\", fetch=2)  } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch articles from PubMed database — searchPM","title":"Fetch articles from PubMed database — searchPM","text":"function searches PubMed corpus articles contains Gene ID interest.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch articles from PubMed database — searchPM","text":"","code":"searchPM(   geneID,   org = \"Plasmodium falciparum\",   query = NULL,   from = 2010,   to = 2025,   verbose = TRUE )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch articles from PubMed database — searchPM","text":"geneID Character vector Gene IDs. org Scientific name organism. Default Plasmodium falciparum query String user defined custom queries. wish pass combination od terms use argument. define start year querying articles. define end year querying articles. verbose Disable turn messages printed function.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch articles from PubMed database — searchPM","text":"data frame, containing 9 columns: \"pmid\"    \"doi\"     \"title\"   \"year\"    \"month\"   \"day\"     \"jabbrv\"  \"journal\" \"GeneID\" .","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch articles from PubMed database — searchPM","text":"","code":"if (FALSE) { # \\dontrun{ test <- searchPM(geneID = c(\"PF3D7_0420300\",\"PF3D7_0621000\")) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchTedConsensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch protein domains from TED database — searchTedConsensus","title":"Fetch protein domains from TED database — searchTedConsensus","text":"convenience function quickly access Encyclopedia Domains (TED) database fetch domain boundary information given Uniprot IDs. information column names users requested refer TED database https://ted.cathdb.info/.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchTedConsensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch protein domains from TED database — searchTedConsensus","text":"","code":"searchTedConsensus(uniprotid = \"\", returnCATHdesc = TRUE)"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchTedConsensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch protein domains from TED database — searchTedConsensus","text":"uniprotid character vector uniprot IDs. returnCATHdesc Logical. Set get description CATH ID CATH database.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchTedConsensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch protein domains from TED database — searchTedConsensus","text":"data frame, domain boundaries information provided TED. details visit TED database.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/searchTedConsensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch protein domains from TED database — searchTedConsensus","text":"","code":"if (FALSE) { # \\dontrun{ df <- searchTedConsensus( c(\"Q7K6A1\",\"Q8IAP8\",\"C0H4D0\",\"C6KT90\",\"Q8IBJ7\"), returnCATHdesc=FALSE) } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/toGeneid.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Other IDs to Ensembl gene IDs — toGeneid","title":"Convert Other IDs to Ensembl gene IDs — toGeneid","text":"convenience function quickly convert Uniprot Entrez Ids Ensembl gene IDs,  using VEuPathDB specialized databases.also provides description gene symbol input Ids.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/toGeneid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Other IDs to Ensembl gene IDs — toGeneid","text":"","code":"toGeneid(   inputid,   from = \"\",   to = \"\",   org = \"Plasmodium falciparum 3D7\",   db = \"plasmodb\",   ... )"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/toGeneid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Other IDs to Ensembl gene IDs — toGeneid","text":"inputid character vector IDs. Can Ensembl, Uniprot, Entrez old Pf ids. describe type Input ID. Possible values: \"old\", \"uniprot\". \"entrez\", \"ensembl\" describle type output ID desired. Possible values: \"emsembl\". org Organism IDs belongs .Possible values: toxodb, plasmodb, hostdb, amoebadb, cryptodb, fungidb, giardiadb, microsporidiadb, piroplasmadb, trichdb, tritrypdb. db Database organism present. ... Additional arguments can passed getTable function.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/toGeneid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Other IDs to Ensembl gene IDs — toGeneid","text":"data frame, containing Gene IDs, gene description gene Symbols .","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/toGeneid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Other IDs to Ensembl gene IDs — toGeneid","text":"","code":"if (FALSE) { # \\dontrun{ df <- toGeneid( c(\"PF3D7_0420300\", \"PF3D7_0621000\"),       from=\"ensembl\") } # }"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/toPfid.html","id":null,"dir":"Reference","previous_headings":"","what":"plasmoRUtils — toPfid","title":"plasmoRUtils — toPfid","text":"convenience function quickly convert Old Pf IDs, Uniprot Entrez Ids Ensembl IDs using PlasmoDB Release 68 Annotation data.also provides description gene symbol input Ids.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/toPfid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plasmoRUtils — toPfid","text":"","code":"toPfid(inputid, from = \"\", to = \"\")"},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/toPfid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plasmoRUtils — toPfid","text":"inputid character vector IDs. Can Ensembl, Uniprot, Entrez old Pf ids. describe type Input ID. Possible values: \"old\", \"uniprot\". \"entrez\", \"ensembl\" describle type output ID desired. Possible values: \"emsembl\".","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/toPfid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plasmoRUtils — toPfid","text":"data frame, containing PFIDs, gene description gene Symbols.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/reference/toPfid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plasmoRUtils — toPfid","text":"","code":"if (FALSE) { # \\dontrun{ df <- toPfid(c(\"PF3D7_0420300\", \"PF3D7_0621000\"), from=\"ensembl\") } # }"},{"path":[]},{"path":"https://rohit-satyam.github.io/plasmoRUtils/news/index.html","id":"changes-in-version-1-1-0","dir":"Changelog","previous_headings":"","what":"Changes in version 1.1.0","title":"plasmoRUtils 1.1.0","text":"searchGSC function can now fetch articles custom years interest. Title translation desired language provided. Users can choose many pages parse match number articles returned upon manual query Google scholar. searchHP : Taxon id mandatory desired avoid fetching interactions organisms gene name. Help sections functions improved. New functions: getpairedOrthologs , listOrthomcl, listipdb get paired orthologs OrthoMCL 7 InParanoiDB. Functions removed: searchMT easyPie removed due repeated failure given database latency. searchApicoTFdb now fetches specialised tables database. searchIpDb Plasmodium specific can accept uniprot IDs organisms provided InParanoiDB. searchPhPl unable fetch phenotypes genes. fixed.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/news/index.html","id":"changes-in-version-1-1-0-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.0.0","title":"plasmoRUtils 1.1.0","text":"First stable release.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/news/index.html","id":"changes-in-version-1-1-0-2","dir":"Changelog","previous_headings":"","what":"Changes in version 0.99.1","title":"plasmoRUtils 1.1.0","text":"Vignettes created.","code":""},{"path":"https://rohit-satyam.github.io/plasmoRUtils/news/index.html","id":"changes-in-version-1-1-0-3","dir":"Changelog","previous_headings":"","what":"Changes in version 0.99.0","title":"plasmoRUtils 1.1.0","text":"First version created.","code":""}]
